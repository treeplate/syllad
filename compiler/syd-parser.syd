import 'syd-tokenizer.syd';
import 'syd-ast.syd';

// forward declaration
ExpressionFunction parseExpression;

ExpressionList parseArguments(TokenConsumer source) {
  source.expectPunctuation(tt.OpenParen);
  ExpressionList arguments = []:Expression;
  while (!source.isNext(tt.CloseParen)) {
    append(arguments, parseExpression(source));
    if (!source.isNext(tt.CloseParen)) {
      source.expectPunctuation(tt.Comma);
    }
  }
  source.expectPunctuation(tt.CloseParen);
  return arguments;
}

Expression parseExpressionLeaves(TokenConsumer source) {
  if (source.isNext(tt.Identifier)) {
    String identifier = source.readIdentifier();
    if (identifier == 'super') {
      source.expectPunctuation(tt.Period);
      identifier = source.readIdentifier();
      if (source.isNext(tt.OpenParen)) {
        return SuperSubroutineCallExpression(identifier, parseArguments(source), source.lastLocation());
      }
      return SuperExpression(identifier, source.lastLocation());
    } else if (identifier == 'LINE') {
      return SourceLocationLineIntegerLiteralExpression(source.lastLocation());
    } else if (identifier == 'COL') {
      return SourceLocationColumnIntegerLiteralExpression(source.lastLocation());
    } else if (identifier == 'FILE') {
      return SourceLocationFileStringLiteralExpression(source.lastLocation());
    } else if (source.isNext(tt.OpenParen)) {
      return IdentifierSubroutineCallExpression(identifier, parseArguments(source), source.lastLocation());
    }
    return VariableExpression(identifier, source.lastLocation());
  }
  if (source.isNext(tt.String)) {
    String value = source.readString();
    return StringLiteralExpression(value, source.lastLocation());
  }
  if (source.isNext(tt.Integer)) {
    Integer value = source.readInteger();
    return IntegerLiteralExpression(value, source.lastLocation());
  }
  if (source.isNext(tt.OpenBracket)) {
    source.expectPunctuation(tt.OpenBracket);
    ExpressionList values = []:Expression;
    while (!source.isNext(tt.CloseBracket)) {
      append(values, parseExpression(source));
      if (!source.isNext(tt.CloseBracket)) {
        source.expectPunctuation(tt.Comma);
      }
    }
    source.expectPunctuation(tt.CloseBracket);
    TypeIdentifierNullable elementType = null;
    if (source.isNext(tt.Colon)) {
      source.expectPunctuation(tt.Colon);
      elementType = TypeIdentifier(source.readIdentifier(), source.lastLocation());
    }
    return ListLiteralExpression(values, elementType, source.lastLocation());
  }
  if (source.isNext(tt.OpenParen)) {
    source.expectPunctuation(tt.OpenParen);
    Expression expression = parseExpression(source);
    source.expectPunctuation(tt.CloseParen);
    return expression;
  }
  throw(source.expected('expression'));
}

Expression parseUnaryExpression(TokenConsumer source) {
  if (source.isNext(tt.Minus)) {
    source.expectPunctuation(tt.Minus);
    SourceLocation location = source.lastLocation();
    return IntegerNegationExpression(parseUnaryExpression(source), location);
  }
  if (source.isNext(tt.Plus)) {
    source.expectPunctuation(tt.Plus);
    SourceLocation location = source.lastLocation();
    return PlusExpression(parseUnaryExpression(source), location);
  }
  if (source.isNext(tt.Bang)) {
    source.expectPunctuation(tt.Bang);
    SourceLocation location = source.lastLocation();
    return BooleanNotExpression(parseUnaryExpression(source), location);
  }
  if (source.isNext(tt.Tilde)) {
    source.expectPunctuation(tt.Tilde);
    SourceLocation location = source.lastLocation();
    return BitwiseNotExpression(parseUnaryExpression(source), location);
  }
  if (source.isNextIdentifier('__typeToCode')) {
    source.expectIdentifier('__typeToCode');
    SourceLocation location = source.lastLocation();
    TypeIdentifier type = TypeIdentifier(source.readIdentifier(), source.lastLocation());
    return TypeToCodeExpression(type, location);
  }
  if (source.isNextIdentifier('__typeOf')) {
    source.expectIdentifier('__typeOf');
    SourceLocation location = source.lastLocation();
    return TypeOfExpression(parseUnaryExpression(source), location);
  }
  if (source.isNextIdentifier('__elementTypeFrom')) {
    source.expectIdentifier('__elementTypeFrom');
    SourceLocation location = source.lastLocation();
    return ElementTypeFromExpression(parseUnaryExpression(source), location);
  }
  if (source.isNextIdentifier('__iteratorTypeFrom')) {
    source.expectIdentifier('__iteratorTypeFrom');
    SourceLocation location = source.lastLocation();
    return IteratorTypeFromExpression(parseUnaryExpression(source), location);
  }
  if (source.isNextIdentifier('__listTypeFrom')) {
    source.expectIdentifier('__listTypeFrom');
    SourceLocation location = source.lastLocation();
    return ListTypeFromExpression(parseUnaryExpression(source), location);
  }
  Expression result = parseExpressionLeaves(source);
  while (true) {
    if (source.isNext(tt.OpenParen)) {
      result = SubroutineCallExpression(result, parseArguments(source), source.lastLocation());
      continue;
    }
    if (source.isNext(tt.OpenBracket)) {
      source.expectPunctuation(tt.OpenBracket);
      Expression argument = parseExpression(source);
      source.expectPunctuation(tt.CloseBracket);
      result = SubscriptExpression(result, argument, source.lastLocation());
      continue;
    }
    if (source.isNext(tt.Period)) {
      source.expectPunctuation(tt.Period);
      String identifier = source.readIdentifier();
      if (source.isNext(tt.OpenParen)) {
        result = MemberAccessSubroutineCallExpression(result, identifier, parseArguments(source), source.lastLocation());
      } else {
        result = MemberAccessExpression(result, identifier, source.lastLocation());
      }
      continue;
    }
    if (source.isNext(tt.Bang)) {
      source.expectPunctuation(tt.Bang);
      result = UnwrapExpression(result, source.lastLocation());
      continue;
    }
    if (source.isNextIdentifier('is')) {
      source.expectIdentifier('is');
      String typeName = source.readIdentifier();
      result = IsOperatorExpression(result, TypeIdentifier(typeName, source.lastLocation()), source.lastLocation());
      continue;
    }
    if (source.isNextIdentifier('as')) {
      source.expectIdentifier('as');
      String typeName = source.readIdentifier();
      result = AsOperatorExpression(result, TypeIdentifier(typeName, source.lastLocation()), source.lastLocation());
      continue;
    }
    if (source.isNextIdentifier('__as__')) {
      source.expectIdentifier('__as__');
      String typeName = source.readIdentifier();
      result = ReinterpretAsOperatorExpression(result, TypeIdentifier(typeName, source.lastLocation()), source.lastLocation());
      continue;
    }
    if (source.isNextIdentifier('__dynamic_is__')) {
      source.expectIdentifier('__dynamic_is__');
      result = DynamicIsOperatorExpression(result, parseUnaryExpression(source), source.lastLocation());
      continue;
    }
    if (source.isNextIdentifier('__dynamic_as__')) {
      source.expectIdentifier('__dynamic_as__');
      result = ReinterpretDynamicAsOperatorExpression(result, parseUnaryExpression(source), source.lastLocation());
      continue;
    }
    break;
  }
  return result;
}

Expression parseExpressionExponentiation(TokenConsumer source) {
  Expression result = parseUnaryExpression(source);
  if (source.isNext(tt.AsteriskAsterisk)) {
    source.expectPunctuation(tt.AsteriskAsterisk);
    SourceLocation location = source.lastLocation();
    Expression rhs = parseExpressionExponentiation(source);
    result = OperatorExponentiationExpression(result, rhs, location);
  }
  return result;
}

Expression parseExpressionMultiplication(TokenConsumer source) {
  Expression result = parseExpressionExponentiation(source);
  while (true) {
    if (source.isNext(tt.Asterisk)) {
      source.expectPunctuation(tt.Asterisk);
      SourceLocation location = source.lastLocation();
      Expression rhs = parseExpressionExponentiation(source);
      result = OperatorMultiplicationExpression(result, rhs, location);
      continue;
    }
    if (source.isNext(tt.Slash)) {
      source.expectPunctuation(tt.Slash);
      SourceLocation location = source.lastLocation();
      Expression rhs = parseExpressionExponentiation(source);
      result = OperatorDivisionExpression(result, rhs, location);
      continue;
    }
    if (source.isNext(tt.Modulus)) {
      source.expectPunctuation(tt.Modulus);
      SourceLocation location = source.lastLocation();
      Expression rhs = parseExpressionExponentiation(source);
      result = OperatorModulusExpression(result, rhs, location);
      continue;
    }
    break;
  }
  return result;
}

Expression parseExpressionAddition(TokenConsumer source) {
  Expression result = parseExpressionMultiplication(source);
  while (true) {
    if (source.isNext(tt.Plus)) {
      source.expectPunctuation(tt.Plus);
      SourceLocation location = source.lastLocation();
      Expression rhs = parseExpressionMultiplication(source);
      result = OperatorAdditionExpression(result, rhs, location);
      continue;
    }
    if (source.isNext(tt.Minus)) {
      source.expectPunctuation(tt.Minus);
      SourceLocation location = source.lastLocation();
      Expression rhs = parseExpressionMultiplication(source);
      result = OperatorSubtractionExpression(result, rhs, location);
      continue;
    }
    break;
  }
  return result;
}

Expression parseExpressionShift(TokenConsumer source) {
  Expression result = parseExpressionAddition(source);
  while (true) {
    if (source.isNext(tt.LessThanLessThan)) {
      source.expectPunctuation(tt.LessThanLessThan);
      SourceLocation location = source.lastLocation();
      Expression rhs = parseExpressionAddition(source);
      result = OperatorLeftShiftExpression(result, rhs, location);
      continue;
    }
    if (source.isNext(tt.GreaterThanGreaterThan)) {
      source.expectPunctuation(tt.GreaterThanGreaterThan);
      SourceLocation location = source.lastLocation();
      Expression rhs = parseExpressionAddition(source);
      result = OperatorRightShiftExpression(result, rhs, location);
      continue;
    }
    break;
  }
  return result;
}

Expression parseExpressionRelational(TokenConsumer source) {
  Expression result = parseExpressionShift(source);
  while (true) {
    if (source.isNext(tt.LessThan)) {
      source.expectPunctuation(tt.LessThan);
      SourceLocation location = source.lastLocation();
      Expression rhs = parseExpressionShift(source);
      result = OperatorLessThanExpression(result, rhs, location);
      continue;
    }
    if (source.isNext(tt.LessThanEquals)) {
      source.expectPunctuation(tt.LessThanEquals);
      SourceLocation location = source.lastLocation();
      Expression rhs = parseExpressionShift(source);
      result = OperatorLessThanOrEqualsExpression(result, rhs, location);
      continue;
    }
    if (source.isNext(tt.GreaterThan)) {
      source.expectPunctuation(tt.GreaterThan);
      SourceLocation location = source.lastLocation();
      Expression rhs = parseExpressionAddition(source);
      result = OperatorGreaterThanExpression(result, rhs, location);
      continue;
    }
    if (source.isNext(tt.GreaterThanEquals)) {
      source.expectPunctuation(tt.GreaterThanEquals);
      SourceLocation location = source.lastLocation();
      Expression rhs = parseExpressionAddition(source);
      result = OperatorGreaterThanOrEqualsExpression(result, rhs, location);
      continue;
    }
    break;
  }
  return result;
}

Expression parseExpressionLogicalEquality(TokenConsumer source) {
  Expression result = parseExpressionRelational(source);
  while (true) {
    if (source.isNext(tt.EqualsEquals)) {
      source.expectPunctuation(tt.EqualsEquals);
      SourceLocation location = source.lastLocation();
      Expression rhs = parseExpressionRelational(source);
      result = OperatorEqualsEqualsExpression(result, rhs, location);
      continue;
    }
    if (source.isNext(tt.BangEquals)) {
      source.expectPunctuation(tt.BangEquals);
      SourceLocation location = source.lastLocation();
      Expression rhs = parseExpressionRelational(source);
      result = OperatorBangEqualsExpression(result, rhs, location);
      continue;
    }
    break;
  }
  return result;
}

Expression parseExpressionBitwiseAnd(TokenConsumer source) {
  Expression result = parseExpressionLogicalEquality(source);
  while (true) {
    if (source.isNext(tt.Ampersand)) {
      source.expectPunctuation(tt.Ampersand);
      SourceLocation location = source.lastLocation();
      Expression rhs = parseExpressionLogicalEquality(source);
      result = OperatorBitwiseAndExpression(result, rhs, location);
      continue;
    }
    break;
  }
  return result;
}

Expression parseExpressionBitwiseXor(TokenConsumer source) {
  Expression result = parseExpressionBitwiseAnd(source);
  while (true) {
    if (source.isNext(tt.Caret)) {
      source.expectPunctuation(tt.Caret);
      SourceLocation location = source.lastLocation();
      Expression rhs = parseExpressionBitwiseAnd(source);
      result = OperatorBitwiseXorExpression(result, rhs, location);
      continue;
    }
    break;
  }
  return result;
}

Expression parseExpressionBitwiseOr(TokenConsumer source) {
  Expression result = parseExpressionBitwiseXor(source);
  while (true) {
    if (source.isNext(tt.VerticalBar)) {
      source.expectPunctuation(tt.VerticalBar);
      SourceLocation location = source.lastLocation();
      Expression rhs = parseExpressionBitwiseXor(source);
      result = OperatorBitwiseOrExpression(result, rhs, location);
      continue;
    }
    break;
  }
  return result;
}

Expression parseExpressionLogicalAnd(TokenConsumer source) {
  Expression result = parseExpressionBitwiseOr(source);
  while (true) {
    if (source.isNext(tt.AmpersandAmpersand)) {
      source.expectPunctuation(tt.AmpersandAmpersand);
      SourceLocation location = source.lastLocation();
      Expression rhs = parseExpressionBitwiseOr(source);
      result = OperatorLogicalAndExpression(result, rhs, location);
      continue;
    }
    break;
  }
  return result;
}

Expression _parseExpression(TokenConsumer source) {
  Expression result = parseExpressionLogicalAnd(source);
  while (true) {
    if (source.isNext(tt.VerticalBarVerticalBar)) {
      source.expectPunctuation(tt.VerticalBarVerticalBar);
      SourceLocation location = source.lastLocation();
      Expression rhs = parseExpressionLogicalAnd(source);
      result = OperatorLogicalOrExpression(result, rhs, location);
      continue;
    }
    break;
  }
  return result;
}
parseExpression = _parseExpression;

// forward declaration
StatementFunction parseStatement;

StatementBlock parseBlock(TokenConsumer source) {
  source.expectPunctuation(tt.OpenBrace);
  StatementList statements = []:Statement;
  while (!source.isNext(tt.CloseBrace)) {
    append(statements, parseStatement(source));
  }
  source.expectPunctuation(tt.CloseBrace);
  return StatementBlock(statements, source.lastLocation());
}

IfStatement parseIfStatement(TokenConsumer source) {
  source.expectIdentifier('if');
  SourceLocation location = source.lastLocation();
  source.expectPunctuation(tt.OpenParen);
  Expression expression = parseExpression(source);
  source.expectPunctuation(tt.CloseParen);
  StatementBlock block = parseBlock(source);
  ElseClauseNullable elseClause = null;
  if (source.isNextIdentifier('else')) {
    source.expectIdentifier('else');
    SourceLocation location = source.lastLocation();
    if (source.isNextIdentifier('if')) {
      elseClause = ElseIfClause(parseIfStatement(source), location);
    } else {
      elseClause = DefaultElseClause(parseBlock(source), location);
    }
  }
  return IfStatement(expression, block, elseClause, location);
}

Boolean parseParameters(TokenConsumer source, AnythingListList parameters, Boolean expectNames) {
  source.expectPunctuation(tt.OpenParen);
  Boolean isVarArgs = false;
  while (true) {
    if (len(parameters) > 0) {
      if (source.isNext(tt.Comma)) {
        source.expectPunctuation(tt.Comma);
      } else {
        break;
      }
      if (isVarArgs) {
        break;
      }
    }
    if (source.isNext(tt.CloseParen)) {
      break;
    }
    String parameterTypeName = source.readIdentifier();
    TypeIdentifier parameterType = TypeIdentifier(parameterTypeName, source.lastLocation());
    if (len(parameters) == 0) {
      if (source.isNext(tt.Ellipsis)) {
        source.expectPunctuation(tt.Ellipsis);
        isVarArgs = true;
      }
    }
    if (expectNames) {
      String parameterName = source.readIdentifier();
      append(parameters, [ parameterType, parameterName ]);
    } else {
      append(parameters, [ parameterType ]:Anything);
    }
  }
  source.expectPunctuation(tt.CloseParen);
  return isVarArgs;
}

Statement parseDeclaration(TokenConsumer source) {
  String typeName = source.readIdentifier();
  TypeIdentifier type = TypeIdentifier(typeName, source.lastLocation());
  String identifier = source.readIdentifier();
  if (source.isNext(tt.Equals)) {
    source.expectPunctuation(tt.Equals);
    SourceLocation location = source.lastLocation();
    Expression initializer = parseExpression(source);
    source.expectPunctuation(tt.Semicolon);
    return VariableDeclarationStatement(type, identifier, initializer, location);
  }
  if (source.isNext(tt.OpenParen)) {
    SourceLocation location = source.lastLocation();
    AnythingListList parameters = []:AnythingList;
    Boolean isVarArgs = parseParameters(source, parameters, true);
    Boolean isIntrinsic = false;
    if (source.isNextIdentifier('__intrinsic')) {
      source.expectIdentifier('__intrinsic');
      isIntrinsic = true;
    }
    if (source.isNextIdentifier('__extern')) {
      if (isVarArgs) {
        throw(source.butFound('function body', '__extern keyword (which does not support varargs)'));
      }
      source.expectIdentifier('__extern');
      String library = source.readString();
      String externalName = source.readString();
      source.expectPunctuation(tt.Semicolon);
      return GenericSystemSubroutineDeclarationStatement(type, identifier, parameters, library, externalName, location, isIntrinsic);
    }
    StatementBlock block = parseBlock(source);
    return SubroutineDeclarationStatement(type, identifier, parameters, isVarArgs, block, location, isIntrinsic);
  }
  if (source.isNext(tt.Semicolon)) {
    SourceLocation location = source.lastLocation();
    source.expectPunctuation(tt.Semicolon);
    return VariableDeclarationStatement(type, identifier, null, location);
  }
  throw(source.expected('"=", "(", or ";"'));
}

Statement parseClassMemberDeclaration(TokenConsumer source) {
  String typeName = source.readIdentifier();
  TypeIdentifier type = TypeIdentifier(typeName, source.lastLocation());
  String identifier = source.readIdentifier();
  if (source.isNext(tt.Equals)) {
    source.expectPunctuation(tt.Equals);
    SourceLocation location = source.lastLocation();
    Expression initializer = parseExpression(source);
    source.expectPunctuation(tt.Semicolon);
    return FieldDeclarationStatement(type, identifier, initializer, location);
  }
  if (source.isNext(tt.OpenParen)) {
    SourceLocation location = source.lastLocation();
    AnythingListList parameters = []:AnythingList;
    Boolean isVarArgs = parseParameters(source, parameters, true);
    StatementBlock block = parseBlock(source);
    return MethodDeclarationStatement(type, identifier, parameters, isVarArgs, block, location);
  }
  if (source.isNext(tt.Semicolon)) {
    SourceLocation location = source.lastLocation();
    source.expectPunctuation(tt.Semicolon);
    return FieldDeclarationStatement(type, identifier, null, location);
  }
  throw(source.expected('"=", "(", or ";"'));
}

Statement _parseStatement(TokenConsumer source) {
  if (source.isNextIdentifier('if')) {
    return parseIfStatement(source);
  }
  if (source.isNextIdentifier('return')) {
    source.expectIdentifier('return');
    ExpressionNullable returnValue = null;
    if (!source.isNext(tt.Semicolon)) {
      returnValue = parseExpression(source);
    }
    source.expectPunctuation(tt.Semicolon);
    return ReturnStatement(returnValue, source.lastLocation());
  }
  if (source.isNextIdentifier('break')) {
    source.expectIdentifier('break');
    source.expectPunctuation(tt.Semicolon);
    return BreakStatement(source.lastLocation());
  }
  if (source.isNextIdentifier('continue')) {
    source.expectIdentifier('continue');
    source.expectPunctuation(tt.Semicolon);
    return ContinueStatement(source.lastLocation());
  }
  if (source.isNextIdentifier('import')) {
    source.expectIdentifier('import');
    String path = source.readString();
    source.expectPunctuation(tt.Semicolon);
    return ImportStatement(path, source.lastLocation());
  }
  if (source.isNextIdentifier('while')) {
    source.expectIdentifier('while');
    source.expectPunctuation(tt.OpenParen);
    Expression expression = parseExpression(source);
    source.expectPunctuation(tt.CloseParen);
    SourceLocation location = source.lastLocation();
    StatementBlock block = parseBlock(source);
    return WhileStatement(expression, block, location);
  }
  if (source.isNextIdentifier('for')) {
    source.expectIdentifier('for');
    source.expectPunctuation(tt.OpenParen);
    String variable = source.readIdentifier();
    source.expectIdentifier('in');
    Expression expression = parseExpression(source);
    source.expectPunctuation(tt.CloseParen);
    SourceLocation location = source.lastLocation();
    StatementBlock block = parseBlock(source);
    return ForStatement(variable, expression, block, location);
  }
  if (source.isNext2(tt.Identifier, tt.Identifier)) {
    return parseDeclaration(source);
  }
  Expression expression = parseExpression(source);
  if (source.isNext(tt.Semicolon)) {
    source.expectPunctuation(tt.Semicolon);
    return ExpressionStatement(expression, source.lastLocation());
  }
  // Expression followed by some operator: must be assignment.
  // TODO: the following leads to a weird error when the input is just |''|.
  if (!(expression is LValueExpression)) {
    throw(source.expected('semicolon'));
  }
  if (source.isNext(tt.Equals)) {
    source.expectPunctuation(tt.Equals);
    SourceLocation location = source.lastLocation();
    Expression initializer = parseExpression(source);
    source.expectPunctuation(tt.Semicolon);
    return StraightAssignmentStatement(expression as LValueExpression, initializer, location);
  }
  if (source.isNext(tt.PlusEquals)) {
    source.expectPunctuation(tt.PlusEquals);
    SourceLocation location = source.lastLocation();
    Expression initializer = parseExpression(source);
    source.expectPunctuation(tt.Semicolon);
    return PlusAssignmentStatement(expression as LValueExpression, initializer, location);
  }
  if (source.isNext(tt.MinusEquals)) {
    source.expectPunctuation(tt.MinusEquals);
    SourceLocation location = source.lastLocation();
    Expression initializer = parseExpression(source);
    source.expectPunctuation(tt.Semicolon);
    return MinusAssignmentStatement(expression as LValueExpression, initializer, location);
  }
  if (source.isNext(tt.AsteriskEquals)) {
    source.expectPunctuation(tt.AsteriskEquals);
    SourceLocation location = source.lastLocation();
    Expression initializer = parseExpression(source);
    source.expectPunctuation(tt.Semicolon);
    return AsteriskAssignmentStatement(expression as LValueExpression, initializer, location);
  }
  if (source.isNext(tt.AsteriskEquals)) {
    source.expectPunctuation(tt.AsteriskEquals);
    SourceLocation location = source.lastLocation();
    Expression initializer = parseExpression(source);
    source.expectPunctuation(tt.Semicolon);
    return AsteriskAssignmentStatement(expression as LValueExpression, initializer, location);
  }
  if (source.isNext(tt.AsteriskAsteriskEquals)) {
    source.expectPunctuation(tt.AsteriskAsteriskEquals);
    SourceLocation location = source.lastLocation();
    Expression initializer = parseExpression(source);
    source.expectPunctuation(tt.Semicolon);
    return AsteriskAsteriskAssignmentStatement(expression as LValueExpression, initializer, location);
  }
  if (source.isNext(tt.SlashEquals)) {
    source.expectPunctuation(tt.SlashEquals);
    SourceLocation location = source.lastLocation();
    Expression initializer = parseExpression(source);
    source.expectPunctuation(tt.Semicolon);
    return SlashAssignmentStatement(expression as LValueExpression, initializer, location);
  }
  if (source.isNext(tt.ModulusEquals)) {
    source.expectPunctuation(tt.ModulusEquals);
    SourceLocation location = source.lastLocation();
    Expression initializer = parseExpression(source);
    source.expectPunctuation(tt.Semicolon);
    return ModulusAssignmentStatement(expression as LValueExpression, initializer, location);
  }
  if (source.isNext(tt.AmpersandEquals)) {
    source.expectPunctuation(tt.AmpersandEquals);
    SourceLocation location = source.lastLocation();
    Expression initializer = parseExpression(source);
    source.expectPunctuation(tt.Semicolon);
    return BitwiseAndAssignmentStatement(expression as LValueExpression, initializer, location);
  }
  if (source.isNext(tt.AmpersandAmpersandEquals)) {
    source.expectPunctuation(tt.AmpersandAmpersandEquals);
    SourceLocation location = source.lastLocation();
    Expression initializer = parseExpression(source);
    source.expectPunctuation(tt.Semicolon);
    return LogicalAndAssignmentStatement(expression as LValueExpression, initializer, location);
  }
  if (source.isNext(tt.CaretEquals)) {
    source.expectPunctuation(tt.CaretEquals);
    SourceLocation location = source.lastLocation();
    Expression initializer = parseExpression(source);
    source.expectPunctuation(tt.Semicolon);
    return BitwiseXorAssignmentStatement(expression as LValueExpression, initializer, location);
  }
  if (source.isNext(tt.VerticalBarEquals)) {
    source.expectPunctuation(tt.VerticalBarEquals);
    SourceLocation location = source.lastLocation();
    Expression initializer = parseExpression(source);
    source.expectPunctuation(tt.Semicolon);
    return BitwiseOrAssignmentStatement(expression as LValueExpression, initializer, location);
  }
  if (source.isNext(tt.VerticalBarVerticalBarEquals)) {
    source.expectPunctuation(tt.VerticalBarVerticalBarEquals);
    SourceLocation location = source.lastLocation();
    Expression initializer = parseExpression(source);
    source.expectPunctuation(tt.Semicolon);
    return LogicalOrAssignmentStatement(expression as LValueExpression, initializer, location);
  }
  throw(source.expected('assignment operator (e.g. "=")'));
}
parseStatement = _parseStatement;

Statement parseTopLevelStatement(TokenConsumer source) {
  if (source.isNextIdentifier('enum')) {
    source.expectIdentifier('enum');
    String name = source.readIdentifier();
    source.expectPunctuation(tt.OpenBrace);
    StringList values = []:String;
    while (source.isNext(tt.Identifier)) {
      append(values, source.readIdentifier());
    }
    source.expectPunctuation(tt.CloseBrace);
    return EnumDeclaration(name, values, source.lastLocation());
  }
  if (source.isNextIdentifier('class')) {
    source.expectIdentifier('class');
    String className = source.readIdentifier();
    SourceLocation location = source.lastLocation();
    TypeIdentifierNullable superclassName = null;
    if (source.isNextIdentifier('extends')) {
      source.expectIdentifier('extends');
      superclassName = TypeIdentifier(source.readIdentifier(), source.lastLocation());
    }
    Boolean isIntrinsic = false;
    if (source.isNextIdentifier('__intrinsic')) {
      source.expectIdentifier('__intrinsic');
      isIntrinsic = true;
    }
    source.expectPunctuation(tt.OpenBrace);
    StatementList members = []:Statement; // TODO: consider making a superclass just for methods and fields
    while (!source.isNext(tt.CloseBrace)) {
      append(members, parseClassMemberDeclaration(source));
    }
    source.expectPunctuation(tt.CloseBrace);
    return ClassDeclaration(className, superclassName, members, isIntrinsic, location);
  }
  if (source.isNextIdentifier('fwdclass')) {
    source.expectIdentifier('fwdclass');
    String className = source.readIdentifier();
    SourceLocation location = source.lastLocation();
    TypeIdentifierList constructorParameterTypes;
    Boolean isVarArgs = false;
    source.expectPunctuation(tt.OpenParen);
    constructorParameterTypes = []:TypeIdentifier;
    while (!source.isNext(tt.CloseParen)) {
      append(constructorParameterTypes, TypeIdentifier(source.readIdentifier(), source.lastLocation()));
      if (len(constructorParameterTypes) == 1) {
        if (source.isNext(tt.Ellipsis)) {
          source.expectPunctuation(tt.Ellipsis);
          isVarArgs = true;
          break;
        }
      }
      if (!source.isNext(tt.CloseParen)) {
        source.expectPunctuation(tt.Comma);
      }
    }
    source.expectPunctuation(tt.CloseParen);
    TypeIdentifierNullable superclassName = null;
    if (source.isNextIdentifier('extends')) {
      source.expectIdentifier('extends');
      superclassName = TypeIdentifier(source.readIdentifier(), source.lastLocation());
    }
    Boolean isIntrinsic = false;
    if (source.isNextIdentifier('__intrinsic')) {
      source.expectIdentifier('__intrinsic');
      isIntrinsic = true;
    }
    source.expectPunctuation(tt.Semicolon);
    return ForwardClassDeclaration(className, constructorParameterTypes, isVarArgs, superclassName, isIntrinsic, location);
  }
  if (source.isNextIdentifier('fwdclassfield')) {
    source.expectIdentifier('fwdclassfield');
    TypeIdentifier propertyType = TypeIdentifier(source.readIdentifier(), source.lastLocation());
    TypeIdentifier hostClass = TypeIdentifier(source.readIdentifier(), source.lastLocation());
    source.expectPunctuation(tt.Period);
    String propertyName = source.readIdentifier();
    SourceLocation location = source.lastLocation();
    source.expectPunctuation(tt.Semicolon);
    return ForwardClassFieldDeclaration(hostClass, propertyType, propertyName, location);
  }
  if (source.isNextIdentifier('fwdclassmethod')) {
    source.expectIdentifier('fwdclassmethod');
    TypeIdentifier returnType = TypeIdentifier(source.readIdentifier(), source.lastLocation());
    TypeIdentifier hostClass = TypeIdentifier(source.readIdentifier(), source.lastLocation());
    source.expectPunctuation(tt.Period);
    String methodName = source.readIdentifier();
    AnythingListList parameters = []:AnythingList;
    Boolean isVarArgs = parseParameters(source, parameters, false);
    SourceLocation location = source.lastLocation();
    source.expectPunctuation(tt.Semicolon);
    return ForwardClassMethodDeclaration(hostClass, returnType, methodName, parameters, isVarArgs, location);
  }
  if (source.isNextIdentifier('typedef#')) {
    source.expectIdentifier('typedef#');
    String name = source.readIdentifier();
    source.expectIdentifier('is');
    source.expectIdentifier('GarbageCollectable');
    source.expectPunctuation(tt.Semicolon);
    return TypeIntrinsicDeclaration(name, source.lastLocation());
  }
  return parseStatement(source);
}

Library parseTokens(TokenList tokens, String name, Boolean isProgram) {
  TokenConsumer source = TokenConsumer(tokens);
  StatementList statements = []:Statement;
  while (!source.isNext(tt.Eof)) {
    append(statements, parseTopLevelStatement(source));
  }
  if (isProgram) {
    return Program(statements, name, SourceLocation(0, 0, 0, 0, name));
  }
  return Library(statements, name, SourceLocation(0, 0, 0, 0, name));
}
