// STANDARD LIBRARY
// Code in this file must not use compiler intrinsics.

// LISTS

//#ignore_unused
WhateverList filledList(Integer length, Whatever value) {
  // TODO: use a fixed-size list constructor ("sizedList")
  WhateverList result = [];
  Integer index = 0;
  while (index < length) {
    append(result, value);
    index += 1;
  }
  return result;
}

//#ignore_unused
Whatever first(WhateverIterable iterable) {
  WhateverIterator i = iterator(iterable);
  next(i);
  return current(i);
}

//#ignore_unused
Whatever last(WhateverIterable iterable) {
  if (iterable is WhateverList) {
    return (iterable as WhateverList)[len(iterable as WhateverList) - 1];
  }
  Whatever result;
  for (value in iterable) {
    result = value;
  }
  return result;
}

//#ignore_unused
Whatever single(WhateverIterable iterable) {
  WhateverIterator i = iterator(iterable);
  next(i);
  Whatever result = current(i);
  if (next(i)) {
    stderr('single() called with Iterable with more than one element');
    exit(1);
  }
  return result;
}


// STRINGS

String joinList(WhateverList args) {
  StringBuffer result = createStringBuffer();
  for (arg in args) {
    writeStringBuffer(result, concat(arg));
  }
  return readStringBuffer(result);
}

String stringTimes(String str, Integer count) {
  StringBuffer result = createStringBuffer();
  Integer index = 0;
  while (index < count) {
    writeStringBuffer(result, str);
    index += 1;
  }
  return readStringBuffer(result);
}

/*
String chr(Integer character) {
  // TODO: implement this
  stderr('chr is not implemented');
  exit(1);
}

StringList scalarValues(String str) {
  // TODO: implement this
  stderr('scalarValues is not implemented');
  exit(1);
}

String hex(Integer num) {
  // TODO: implement this
  stderr('hex is not implemented');
  exit(1);
}

String padLeft(String line, Integer length, String padding) {
  return concat(stringTimes(padding, (length - len(charsOf(line))) / len(charsOf(padding))), line);
}


// I/O

String readFile(String file) {
  // TODO: implement this
  stderr('readFile is not implemented');
  exit(1);
}
*/