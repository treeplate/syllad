// STANDARD LIBRARY
// Code in this file must not use compiler intrinsics.

// LISTS

//#ignore_unused
WhateverList filledList(Integer length, Whatever value) {
  // TODO: use a fixed-size list constructor ("sizedList")
  WhateverList result = [];
  Integer index = 0;
  while (index < length) {
    append(result, value);
    index += 1;
  }
  return result;
}

//#ignore_unused
Whatever first(WhateverIterable iterable) {
  WhateverIterator i = iterator(iterable);
  next(i);
  return current(i);
}

//#ignore_unused
Whatever last(WhateverIterable iterable) {
  if (iterable is WhateverList) {
    return (iterable as WhateverList)[len(iterable as WhateverList) - 1];
  }
  Whatever result;
  for (value in iterable) {
    result = value;
  }
  return result;
}

//#ignore_unused
Whatever single(WhateverIterable iterable) {
  WhateverIterator i = iterator(iterable);
  next(i);
  Whatever result = current(i);
  if (next(i)) {
    stderr('single() called with Iterable with more than one element');
    exit(1);
  }
  return result;
}


// STRINGS

//#ignore_unused
String joinList(WhateverList args) {
  StringBuffer result = createStringBuffer();
  for (arg in args) {
    writeStringBuffer(result, concat(arg));
  }
  return readStringBuffer(result);
}

//#ignore_unused
String stringTimes(String str, Integer count) {
  StringBuffer result = createStringBuffer();
  Integer index = 0;
  while (index < count) {
    writeStringBuffer(result, str);
    index += 1;
  }
  return readStringBuffer(result);
}

//#ignore_unused
String padRight(String line, Integer length, String padding) {
  return concat(line, stringTimes(padding, (length - len(charsOf(line))) / len(charsOf(padding))));
}

//#ignore_unused
String padLeft(String line, Integer length, String padding) {
  return concat(stringTimes(padding, (length - len(charsOf(line))) / len(charsOf(padding))), line);
}

String _hexDigitToStr(Integer digit) {
  if (digit == 0) {
    return '0';
  }
  if (digit == 1) {
    return '1';
  }
  if (digit == 2) {
    return '2';
  }
  if (digit == 3) {
    return '3';
  }
  if (digit == 4) {
    return '4';
  }
  if (digit == 5) {
    return '5';
  }
  if (digit == 6) {
    return '6';
  }
  if (digit == 7) {
    return '7';
  }
  if (digit == 8) {
    return '8';
  }
  if (digit == 9) {
    return '9';
  }
  if (digit == 10) {
    return 'a';
  }
  if (digit == 11) {
    return 'b';
  }
  if (digit == 12) {
    return 'c';
  }
  if (digit == 13) {
    return 'd';
  }
  if (digit == 14) {
    return 'e';
  }
  if (digit == 15) {
    return 'f';
  }
  stderr('Invalid digit passed to _hexDigitToStr (digit as exit code)');
  exit(digit);
}

//#ignore_unused
String hex(Integer value) {
  if (value >= 0 && value < 16) {
    return _hexDigitToStr(value);
  }
  StringBuffer buffer = createStringBuffer();
  Integer newValue = value; // parameters are final
  if (value < 0) {
    writeStringBuffer(buffer, '-');
    newValue = -newValue;
  }
  while (newValue > 0) {
    Integer digit = newValue % 16;
    newValue = newValue / 16;
    writeStringBuffer(buffer, _hexDigitToStr(digit));
  }
  return readStringBuffer(buffer);
}
