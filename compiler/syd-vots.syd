import 'core.syd';
import 'syd-types.syd';
import 'syd-assembler.syd';

class VotSource extends Object {
  Type staticType;
  String debugName;

  Null forceAllocation() {
    throw(concat('Cannot force allocation of ', this));
  }

  String toString() {
    return concat('<', debugName, ': ', staticType, '>');
  }

  Null constructor(Type staticTypeArg, String debugNameArg) {
    super.constructor();
    staticType = staticTypeArg;
    debugName = debugNameArg;
  }
}

// A Vot is a means to get an operand that represents a value or a type.
class Vot extends Object {
  Operand asOperand() {
    abstract();
  }

  String toString() {
    return concat('[', className, ']');
  }
}


// TYPE VOTS

class TypeVot extends Vot {
  Boolean canStaticallyProveCompatibilityWith(Type staticType) {
    return false;
  }
}

class StaticTypeVot extends TypeVot {
  Type type;

  Operand asOperand() {
    return type.asOperand();
  }

  Boolean canStaticallyProveCompatibilityWith(Type staticType) {
    return type.isSubtypeOf(staticType);
  }

  Null constructor(Type typeArg) {
    super.constructor();
    type = typeArg;
  }
}

class OperandTypeVot extends TypeVot {
  Operand operand;

  Operand asOperand() {
    return operand;
  }

  Null constructor(Operand operandArg) {
    super.constructor();
    operand = operandArg;
  }

  String toString() {
    return concat("[", className, ":", operand, "@", internalObjectId, "]");
  }
}


// VALUE VOTS

class ValueVot extends Vot {
  Type staticType;

  Operand asOperand() {
    abstract();
  }

  Operand length() {
    // TODO: implement this for heap-allocated lists and heap-allocated read-only lists
    abstract();
  }

  TypeVot dynamicType() {
    return StaticTypeVot(staticType);
  }

  Null constructor(Type staticTypeArg) {
    super.constructor();
    staticType = staticTypeArg;
  }
}

class SentinelVot extends ValueVot {
  Operand asOperand() {
    return Operand('0h', otImm32);
  }

  Null constructor(SentinelType staticTypeArg) {
    super.constructor(staticTypeArg);
  }
}

class LiteralIntegerVot extends ValueVot {
  Integer value;

  Operand asOperand() {
    if (value <= 0xFFFFFFFF) {
      return Operand(hex32(value), otImm32);
    }
    return Operand(hex64(value), otImm64);
  }

  Null constructor(NumericType typeArg, Integer valueArg) {
    super.constructor(typeArg);
    value = valueArg;
  }

  String toString() {
    return concat("[", className, ":", value, "@", internalObjectId, "]");
  }
}

class ImmediateAddressVot extends ValueVot {
  String label;

  Operand asOperand() {
    return Operand(label, otAddressOfLabel);
  }

  Null constructor(Type typeArg, String labelArg) {
    super.constructor(typeArg);
    label = labelArg;
  }

  String toString() {
    return concat("[", className, ":", label, "@", internalObjectId, "]");
  }
}

class DereferencedPointerVot extends ValueVot {
  String label;

  Operand asOperand() {
    return Operand(label, otDereferencedPointerLabel);
  }

  Null constructor(Type typeArg, String labelArg) {
    super.constructor(typeArg);
    label = labelArg;
  }

  String toString() {
    return concat("[", className, ":", label, "@", internalObjectId, "]");
  }
}

class GlobalVariableVot extends ValueVot {
  String valueLabel;
  String typeLabel;

  Operand asOperand() {
    return Operand(valueLabel, otDereferencedPointerLabel);
  }

  TypeVot dynamicType() {
    return OperandTypeVot(Operand(typeLabel, otDereferencedPointerLabel));
  }

  Null constructor(Type staticTypeArg, String valueLabelArg, String typeLabelArg) {
    assert(staticTypeArg.hasDynamicType(), 'cannot use GlobalVariableVot with non-dynamic type');
    super.constructor(staticTypeArg);
    valueLabel = valueLabelArg;
    typeLabel = typeLabelArg;
  }

  String toString() {
    return concat("[", className, ":", valueLabel, "@", internalObjectId, "]");
  }
}

class OperandVot extends ValueVot {
  Operand operand;

  Operand asOperand() {
    return operand;
  }

  Null constructor(Type typeArg, Operand operandArg) {
    super.constructor(typeArg);
    operand = operandArg;
  }

  String toString() {
    return concat("[", className, ":", operand, "@", internalObjectId, "]");
  }
}

class OperandPairVot extends ValueVot {
  Operand typeOperand;
  Operand valueOperand;

  Operand asOperand() {
    return valueOperand;
  }

  TypeVot dynamicType() {
    return OperandTypeVot(typeOperand);
  }

  Null constructor(Type staticTypeArg, Operand typeOperandArg, Operand valueOperandArg) {
    super.constructor(staticTypeArg);
    typeOperand = typeOperandArg;
    valueOperand = valueOperandArg;
  }

  String toString() {
    return concat("[", className, ":", typeOperand, "/", valueOperand, "@", internalObjectId, "]");
  }
}

class StackAllocatedVot extends ValueVot {
  Integer stackOffset;

  Operand asOperand() {
    return Operand(concat('rbp-', hex8(stackOffset + 0x08)), otIndirect);
  }

  TypeVot dynamicType() {
    if (staticType.hasDynamicType()) {
      return OperandTypeVot(Operand(concat('rbp-', hex8(stackOffset + 0x10)), otIndirect));
    }
    return super.dynamicType(); // uses the static type by default
  }

  Null constructor(Type staticTypeArg, Integer stackOffsetArg) {
    super.constructor(staticTypeArg);
    stackOffset = stackOffsetArg;
  }
}

class ParameterVot extends ValueVot {
  Integer offset;

  Operand asOperand() {
    return Operand(concat('rbp+', hex8(offset)), otIndirect);
  }

  TypeVot dynamicType() {
    return OperandTypeVot(Operand(concat('rbp+', hex8(offset - 0x08)), otIndirect));
  }

  Null constructor(Type staticTypeArg, Integer savedRegisterCount, Integer parameterNumber) {
    super.constructor(staticTypeArg);
    offset = parameterNumber * 0x10 + 0x08
           + 0x08 /* return value pointer */
           + 0x20 /* shadow space */
           + 0x08 /* return address */
           + 0x08 * savedRegisterCount;
  }
}

class VarArgsParameterVot extends ValueVot {
  Integer offset; // offset from rbp to first entry in list

  Operand asOperand() {
    throw('cannot directly reference varargs parameters');
  }

  Operand baseAddress() {
    return Operand(concat('rbp+', hex8(offset)), otIndirect);
  }

  Operand length() {
    return rcx;
  }

  Null constructor(Type staticTypeArg, Integer savedRegisterCount) {
    super.constructor(staticTypeArg);
    offset = 0x08 /* return value pointer */
           + 0x08 /* type of first value */
           + 0x20 /* shadow space */
           + 0x08 /* return address */
           + 0x08 * savedRegisterCount;
  }
}

class DereferencedRegisterVot extends ValueVot {
  String register;

  Operand asOperand() {
    return Operand(register, otIndirect); // [register]
  }

  TypeVot dynamicType() {
    return OperandTypeVot(Operand(concat(register, '-', hex8(0x08)), otIndirect));
  }

  Null constructor(Type staticTypeArg, String registerArg) {
    super.constructor(staticTypeArg);
    register = registerArg;
  }
}

class TypeHandle extends Object {
  TypeVotNullable type = null;

  Null assign(TypeVot typeArg) {
    assert(type == null, 'cannot assign a type handle twice');
    type = typeArg;
  }

  Null constructor(TypeVotNullable typeArg) {
    super.constructor();
    if (typeArg != null) {
      assign(typeArg!);
    }
  }
}

class ValueHandle extends Object {
  VotSource source;
  ValueVotNullable value = null;
  TypeHandle type;

  Null forceAllocation() {
    source.forceAllocation();
  }

  Null assign(ValueVot valueArg) {
    assert(value == null, 'cannot assign a value handle twice');
    assert(valueArg.staticType.isSubtypeOf(source.staticType), concat('cannot assign ', valueArg.staticType, ' to ', source.staticType, ' debugName ', source.debugName));
    value = valueArg;
    type.assign(valueArg.dynamicType());
  }

  Null constructor(VotSource sourceArg, ValueVotNullable valueArg) {
    super.constructor();
    source = sourceArg;
    type = TypeHandle(null);
    if (valueArg != null) {
      assign(valueArg!);
    }
  }
}