_drectve segment info alias(".drectve")
  db ' /ENTRY:main '
_drectve ends
option casemap:none

; includes
includelib kernel32.lib

; externs
extern GetStdHandle : proc
extern WriteConsoleA : proc
extern ExitProcess : proc
extern GetLastError : proc
extern GetProcessHeap : proc
extern HeapAlloc : proc
extern HeapFree : proc

.const
  typeTable    db 000h, 000h, 040h, 002h, 040h, 002h, 040h, 002h ; Type table
               db 040h, 002h, 040h, 002h, 040h, 002h, 040h, 002h ; ...
               db 040h, 002h, 040h, 002h, 040h, 002h, 040h, 002h ; ...
               db 040h, 002h, 040h, 002h, 040h, 002h, 040h, 002h ; ...
               db 040h, 002h, 040h, 002h, 040h, 002h, 040h, 002h ; ...
               db 040h, 002h, 0c0h, 001h, 040h, 002h, 040h, 002h ; ...
               db 040h, 002h, 040h, 002h, 0c0h, 010h, 040h, 002h ; ...
               db 0c0h, 001h, 041h, 000h, 042h, 000h, 044h, 000h ; ...
               db 048h, 000h, 0d0h, 000h, 0e0h, 00dh, 000h, 000h ; ...
   ; Columns: Null'29 Boolean'30 Integer'31 String'32 __ListData'33 StringList'34 Anything'35 GarbageCollectable'36 WhateverReadOnlyList'37 AnythingFunction'38 WhateverIterable'39 WhateverList'40 WhateverIterator'41
   ; 0 0 0 0 0 0 0 0 : 0 0 0 0 0   <sentinel>'0
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   NullFunction(String)'1
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   NullFunction(Integer)'2
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   IntegerFunction(WhateverReadOnlyList)'3
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   NullFunction()'4
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   IntegerFunction(Integer)'5
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   NullFunction(Integer, Integer)'6
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   NullFunction(Anything)'7
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   NullFunction(Boolean, String)'8
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   IntegerFunction()'9
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   IntegerFunction(Integer, Integer, Integer)'10
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   NullFunction(Integer, Integer, Integer)'11
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   GarbageCollectableFunction(Integer, Integer, Integer)'12
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   WhateverListFunction(Integer, Integer)'13
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   NullFunction(WhateverList)'14
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   NullFunction(WhateverList, Anything)'15
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   WhateverFunction(WhateverIterator)'16
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   BooleanFunction(WhateverIterator)'17
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   WhateverIteratorFunction(WhateverIterable)'18
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   IntegerFunction(String)'19
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   StringFunction(String...)'20
   ; 0 0 0 0 0 0 1 1 : 1 0 0 0 0   StringReadOnlyList'21
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   StringFunction(Integer)'22
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   StringFunction(StringList, String, Integer)'23
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   StringFunction(StringList, String)'24
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   StringFunction(Anything)'25
   ; 0 0 0 0 0 0 1 1 : 0 0 0 0 1   StringIterator'26
   ; 0 0 0 0 0 0 1 0 : 0 1 0 0 0   NullFunction(Anything...)'27
   ; 0 0 0 0 0 0 1 1 : 1 0 0 0 0   AnythingReadOnlyList'28
   ; 1 0 0 0 0 0 1 0 : 0 0 0 0 0   Null'29
   ; 0 1 0 0 0 0 1 0 : 0 0 0 0 0   Boolean'30
   ; 0 0 1 0 0 0 1 0 : 0 0 0 0 0   Integer'31
   ; 0 0 0 1 0 0 1 0 : 0 0 0 0 0   String'32
   ; 0 0 0 0 1 0 1 1 : 0 0 0 0 0   __ListData'33
   ; 0 0 0 0 0 1 1 1 : 1 0 1 1 0   StringList'34

  iteratorTypeTable dd 0ffffffffh, 0ffffffffh, 0ffffffffh, 0ffffffffh ; Table mapping iterable types to iterator types
               dd 0ffffffffh, 0ffffffffh, 0ffffffffh, 0ffffffffh
               dd 0ffffffffh, 0ffffffffh, 0ffffffffh, 0ffffffffh
               dd 0ffffffffh, 0ffffffffh, 0ffffffffh, 0ffffffffh
               dd 0ffffffffh, 0ffffffffh, 0ffffffffh, 0ffffffffh
               dd 0ffffffffh, 0ffffffffh, 0ffffffffh, 0ffffffffh
               dd 0ffffffffh, 0ffffffffh, 0ffffffffh, 0ffffffffh
               dd 0ffffffffh, 0ffffffffh, 0ffffffffh, 0ffffffffh
               dd 0ffffffffh, 0ffffffffh, 00000001ah
  listTypeTable dd 0ffffffffh, 0ffffffffh, 0ffffffffh, 0ffffffffh ; Table mapping iterable types to list types
               dd 0ffffffffh, 0ffffffffh, 0ffffffffh, 0ffffffffh
               dd 0ffffffffh, 0ffffffffh, 0ffffffffh, 0ffffffffh
               dd 0ffffffffh, 0ffffffffh, 0ffffffffh, 0ffffffffh
               dd 0ffffffffh, 0ffffffffh, 0ffffffffh, 0ffffffffh
               dd 0ffffffffh, 0ffffffffh, 0ffffffffh, 0ffffffffh
               dd 0ffffffffh, 0ffffffffh, 0ffffffffh, 0ffffffffh
               dd 0ffffffffh, 0ffffffffh, 0ffffffffh, 0ffffffffh
               dd 0ffffffffh, 0ffffffffh, 000000022h
  func$__print$annotation dq -01h                                ; String constant (reference count)
               dq 7                                              ; Length
               db "__print"                                      ; line 1380 column 111 in file syd-compiler.syd
               db 00h                                            ; padding to align to 8-byte boundary
  func$exit$annotation dq -01h                                   ; String constant (reference count)
               dq 4                                              ; Length
               db "exit"                                         ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h                             ; padding to align to 8-byte boundary
  func$len$annotation dq -01h                                    ; String constant (reference count)
               dq 3                                              ; Length
               db "len"                                          ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h                        ; padding to align to 8-byte boundary
  func$__debugger$annotation dq -01h                             ; String constant (reference count)
               dq 10                                             ; Length
               db "__debugger"                                   ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h, 00h                   ; padding to align to 8-byte boundary
  func$__readFromAddress$annotation dq -01h                      ; String constant (reference count)
               dq 17                                             ; Length
               db "__readFromAddress"                            ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  func$__writeToAddress$annotation dq -01h                       ; String constant (reference count)
               dq 16                                             ; Length
               db "__writeToAddress"                             ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h, 00h         ; padding to align to 8-byte boundary
  func$__incref$annotation dq -01h                               ; String constant (reference count)
               dq 8                                              ; Length
               db "__incref"                                     ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h, 00h         ; padding to align to 8-byte boundary
  parameterCountCheckFailureMessage dq -01h                      ; String constant (reference count)
               dq 88                                             ; Length
               db "error: function call received the wrong number of parameters (expected %d, received %d)", 0ah ; line 2135 column 25 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h, 00h         ; padding to align to 8-byte boundary
  parameterTypeCheckFailureMessage dq -01h                       ; String constant (reference count)
               dq 71                                             ; Length
               db "error: type mismatch for function %s parameter %d, expected %s, got %s", 0ah ; line 2140 column 25 in file syd-compiler.syd
               db 00h                                            ; padding to align to 8-byte boundary
  returnValueTypeCheckFailureMessage dq -01h                     ; String constant (reference count)
               dq 68                                             ; Length
               db "error: type mismatch for function return value, expected %s, got %s", 0ah ; line 2145 column 25 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h                             ; padding to align to 8-byte boundary
  operandTypeCheckFailureMessage dq -01h                         ; String constant (reference count)
               dq 54                                             ; Length
               db "error: type mismatch for operand, expected %s, got %s", 0ah ; line 2150 column 25 in file syd-compiler.syd
               db 00h, 00h                                       ; padding to align to 8-byte boundary
  assignmentTypeCheckFailureMessage dq -01h                      ; String constant (reference count)
               dq 57                                             ; Length
               db "error: type mismatch for assignment, expected %s, got %s", 0ah ; line 2155 column 25 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  subscriptTypeCheckFailureMessage dq -01h                       ; String constant (reference count)
               dq 42                                             ; Length
               db "error: subscript index must be %s, got %s", 0ah ; line 2160 column 25 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h, 00h                   ; padding to align to 8-byte boundary
  forLoopIterableTypeCheckFailureMessage dq -01h                 ; String constant (reference count)
               dq 44                                             ; Length
               db "error: for loop iterable must be %s, got %s", 0ah ; line 2165 column 25 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h                             ; padding to align to 8-byte boundary
  subroutineCallTypeCheckFailureMessage dq -01h                  ; String constant (reference count)
               dq 53                                             ; Length
               db "error: function calls expect target to be %s, got %s", 0ah ; line 2170 column 25 in file syd-compiler.syd
               db 00h, 00h, 00h                                  ; padding to align to 8-byte boundary
  asOperatorFailureMessage dq -01h                               ; String constant (reference count)
               dq 58                                             ; Length
               db "error: type mismatch for as operator, expected %s, got %s", 0ah ; line 2175 column 25 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h, 00h                   ; padding to align to 8-byte boundary
  boundsFailureMessage dq -01h                                   ; String constant (reference count)
               dq 64                                             ; Length
               db "error: subscript index out of range (%d is not in range %d..%d)", 0ah ; line 2180 column 25 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h, 00h         ; padding to align to 8-byte boundary
  func$assert$annotation dq -01h                                 ; String constant (reference count)
               dq 6                                              ; Length
               db "assert"                                       ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h                                       ; padding to align to 8-byte boundary
  func$throw$annotation dq -01h                                  ; String constant (reference count)
               dq 5                                              ; Length
               db "throw"                                        ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h                                  ; padding to align to 8-byte boundary
  func$__getLastError$annotation dq -01h                         ; String constant (reference count)
               dq 14                                             ; Length
               db "__getLastError"                               ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h                                       ; padding to align to 8-byte boundary
  func$__getProcessHeap$annotation dq -01h                       ; String constant (reference count)
               dq 16                                             ; Length
               db "__getProcessHeap"                             ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h, 00h         ; padding to align to 8-byte boundary
  func$__heapAlloc$annotation dq -01h                            ; String constant (reference count)
               dq 11                                             ; Length
               db "__heapAlloc"                                  ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h                        ; padding to align to 8-byte boundary
  func$_alloc$annotation dq -01h                                 ; String constant (reference count)
               dq 6                                              ; Length
               db "_alloc"                                       ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h                                       ; padding to align to 8-byte boundary
  string       dq -01h                                           ; String constant (reference count)
               dq 14                                             ; Length
               db "Out of memory."                               ; line 48 column 26 in file runtime library
               db 00h, 00h                                       ; padding to align to 8-byte boundary
  func$__heapFree$annotation dq -01h                             ; String constant (reference count)
               dq 10                                             ; Length
               db "__heapFree"                                   ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h, 00h                   ; padding to align to 8-byte boundary
  func$_free$annotation dq -01h                                  ; String constant (reference count)
               dq 5                                              ; Length
               db "_free"                                        ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h                                  ; padding to align to 8-byte boundary
  string$1     dq -01h                                           ; String constant (reference count)
               dq 36                                             ; Length
               db "failed to free pointer, error code: "         ; line 59 column 50 in file runtime library
               db 00h, 00h, 00h, 00h                             ; padding to align to 8-byte boundary
  func$_moveBytes$annotation dq -01h                             ; String constant (reference count)
               dq 10                                             ; Length
               db "_moveBytes"                                   ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h, 00h                   ; padding to align to 8-byte boundary
  string$2     dq -01h                                           ; String constant (reference count)
               dq 51                                             ; Length
               db "_moveBytes expects positive number of bytes to copy" ; line 67 column 74 in file runtime library
               db 00h, 00h, 00h, 00h, 00h                        ; padding to align to 8-byte boundary
  string$3     dq -01h                                           ; String constant (reference count)
               dq 61                                             ; Length
               db "internal error: zero extra bytes but fromCursor is before end" ; line 86 column 90 in file runtime library
               db 00h, 00h, 00h                                  ; padding to align to 8-byte boundary
  string$4     dq -01h                                           ; String constant (reference count)
               dq 39                                             ; Length
               db "internal error: more than 7 extra bytes"      ; line 87 column 68 in file runtime library
               db 00h                                            ; padding to align to 8-byte boundary
  func$_fillQuadWords$annotation dq -01h                         ; String constant (reference count)
               dq 14                                             ; Length
               db "_fillQuadWords"                               ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h                                       ; padding to align to 8-byte boundary
  string$5     dq -01h                                           ; String constant (reference count)
               dq 55                                             ; Length
               db "_fillQuadWords expects positive number of bytes to fill" ; line 96 column 78 in file runtime library
               db 00h                                            ; padding to align to 8-byte boundary
  string$6     dq -01h                                           ; String constant (reference count)
               dq 68                                             ; Length
               db "_fillQuadWords expects number of bytes to fill to be a multiple of 8" ; line 97 column 96 in file runtime library
               db 00h, 00h, 00h, 00h                             ; padding to align to 8-byte boundary
  func$_blockListInit$annotation dq -01h                         ; String constant (reference count)
               dq 14                                             ; Length
               db "_blockListInit"                               ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h                                       ; padding to align to 8-byte boundary
  func$_growBlockList$annotation dq -01h                         ; String constant (reference count)
               dq 14                                             ; Length
               db "_growBlockList"                               ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h                                       ; padding to align to 8-byte boundary
  string$7     dq -01h                                           ; String constant (reference count)
               dq 43                                             ; Length
               db "_growBlockList called without _gcLocked set"  ; line 147 column 69 in file runtime library
               db 00h, 00h, 00h, 00h, 00h                        ; padding to align to 8-byte boundary
  func$_advanceToNextBlock$annotation dq -01h                    ; String constant (reference count)
               dq 19                                             ; Length
               db "_advanceToNextBlock"                          ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h                        ; padding to align to 8-byte boundary
  string$8     dq -01h                                           ; String constant (reference count)
               dq 48                                             ; Length
               db "_advanceToNextBlock called without _gcLocked set" ; line 160 column 74 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h, 00h         ; padding to align to 8-byte boundary
  func$_constructor$annotation dq -01h                           ; String constant (reference count)
               dq 12                                             ; Length
               db "_constructor"                                 ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h                             ; padding to align to 8-byte boundary
  string$9     dq -01h                                           ; String constant (reference count)
               dq 41                                             ; Length
               db "_constructor called without _gcLocked set"    ; line 181 column 67 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  string$10    dq -01h                                           ; String constant (reference count)
               dq 33                                             ; Length
               db "length cannot be bigger than size"            ; line 182 column 60 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  func$_mark$annotation dq -01h                                  ; String constant (reference count)
               dq 5                                              ; Length
               db "_mark"                                        ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h                                  ; padding to align to 8-byte boundary
  func$_garbageCollectorImplementation$annotation dq -01h        ; String constant (reference count)
               dq 31                                             ; Length
               db "_garbageCollectorImplementation"              ; line 1380 column 111 in file syd-compiler.syd
               db 00h                                            ; padding to align to 8-byte boundary
  string$11    dq -01h                                           ; String constant (reference count)
               dq 26                                             ; Length
               db "Reference count underflow."                   ; line 225 column 61 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h                   ; padding to align to 8-byte boundary
  func$_listConstructor$annotation dq -01h                       ; String constant (reference count)
               dq 16                                             ; Length
               db "_listConstructor"                             ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h, 00h         ; padding to align to 8-byte boundary
  func$_growList$annotation dq -01h                              ; String constant (reference count)
               dq 9                                              ; Length
               db "_growList"                                    ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  func$append$annotation dq -01h                                 ; String constant (reference count)
               dq 6                                              ; Length
               db "append"                                       ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h                                       ; padding to align to 8-byte boundary
  func$current$annotation dq -01h                                ; String constant (reference count)
               dq 7                                              ; Length
               db "current"                                      ; line 1380 column 111 in file syd-compiler.syd
               db 00h                                            ; padding to align to 8-byte boundary
  func$next$annotation dq -01h                                   ; String constant (reference count)
               dq 4                                              ; Length
               db "next"                                         ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h                             ; padding to align to 8-byte boundary
  func$iterator$annotation dq -01h                               ; String constant (reference count)
               dq 8                                              ; Length
               db "iterator"                                     ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h, 00h         ; padding to align to 8-byte boundary
  string$12    dq -01h                                           ; String constant (reference count)
               dq 40                                             ; Length
               db "iterables are only implemented for lists"     ; line 334 column 77 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h, 00h         ; padding to align to 8-byte boundary
  func$copy$annotation dq -01h                                   ; String constant (reference count)
               dq 4                                              ; Length
               db "copy"                                         ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h                             ; padding to align to 8-byte boundary
  func$first$annotation dq -01h                                  ; String constant (reference count)
               dq 5                                              ; Length
               db "first"                                        ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h                                  ; padding to align to 8-byte boundary
  func$last$annotation dq -01h                                   ; String constant (reference count)
               dq 4                                              ; Length
               db "last"                                         ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h                             ; padding to align to 8-byte boundary
  func$single$annotation dq -01h                                 ; String constant (reference count)
               dq 6                                              ; Length
               db "single"                                       ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h                                       ; padding to align to 8-byte boundary
  string$13    dq -01h                                           ; String constant (reference count)
               dq 57                                             ; Length
               db "single() called with Iterable with more than one element", 0ah ; line 381 column 72 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  func$_stringByteLength$annotation dq -01h                      ; String constant (reference count)
               dq 17                                             ; Length
               db "_stringByteLength"                            ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  func$concat$annotation dq -01h                                 ; String constant (reference count)
               dq 6                                              ; Length
               db "concat"                                       ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h                                       ; padding to align to 8-byte boundary
  string$14    dq -01h                                           ; String constant (reference count)
               dq 24                                             ; Length
               db "negative length detected"                     ; line 402 column 48 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h, 00h         ; padding to align to 8-byte boundary
  string$15    dq -01h                                           ; String constant (reference count)
               dq 38                                             ; Length
               db "absurd length detected (as exit code)", 0ah   ; line 404 column 53 in file runtime library
               db 00h, 00h                                       ; padding to align to 8-byte boundary
  func$digitToStr$annotation dq -01h                             ; String constant (reference count)
               dq 10                                             ; Length
               db "digitToStr"                                   ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h, 00h                   ; padding to align to 8-byte boundary
  string$16    dq -01h                                           ; String constant (reference count)
               dq 1                                              ; Length
               db "0"                                            ; line 427 column 14 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  string$17    dq -01h                                           ; String constant (reference count)
               dq 1                                              ; Length
               db "1"                                            ; line 430 column 14 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  string$18    dq -01h                                           ; String constant (reference count)
               dq 1                                              ; Length
               db "2"                                            ; line 433 column 14 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  string$19    dq -01h                                           ; String constant (reference count)
               dq 1                                              ; Length
               db "3"                                            ; line 436 column 14 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  string$20    dq -01h                                           ; String constant (reference count)
               dq 1                                              ; Length
               db "4"                                            ; line 439 column 14 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  string$21    dq -01h                                           ; String constant (reference count)
               dq 1                                              ; Length
               db "5"                                            ; line 442 column 14 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  string$22    dq -01h                                           ; String constant (reference count)
               dq 1                                              ; Length
               db "6"                                            ; line 445 column 14 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  string$23    dq -01h                                           ; String constant (reference count)
               dq 1                                              ; Length
               db "7"                                            ; line 448 column 14 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  string$24    dq -01h                                           ; String constant (reference count)
               dq 1                                              ; Length
               db "8"                                            ; line 451 column 14 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  string$25    dq -01h                                           ; String constant (reference count)
               dq 1                                              ; Length
               db "9"                                            ; line 454 column 14 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  string$26    dq -01h                                           ; String constant (reference count)
               dq 56                                             ; Length
               db "Invalid digit passed to digitToStr (digit as exit code)", 0ah ; line 456 column 69 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h, 00h         ; padding to align to 8-byte boundary
  func$intToStr$annotation dq -01h                               ; String constant (reference count)
               dq 8                                              ; Length
               db "intToStr"                                     ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h, 00h         ; padding to align to 8-byte boundary
  string$27    dq -01h                                           ; String constant (reference count)
               dq 1                                              ; Length
               db "-"                                            ; line 465 column 21 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  string$28    dq -01h                                           ; String constant (reference count)
               dq 0                                              ; Length
  func$_joinOffset$annotation dq -01h                            ; String constant (reference count)
               dq 11                                             ; Length
               db "_joinOffset"                                  ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h                        ; padding to align to 8-byte boundary
  func$join$annotation dq -01h                                   ; String constant (reference count)
               dq 4                                              ; Length
               db "join"                                         ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h                             ; padding to align to 8-byte boundary
  func$_stringify$annotation dq -01h                             ; String constant (reference count)
               dq 10                                             ; Length
               db "_stringify"                                   ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h, 00h                   ; padding to align to 8-byte boundary
  string$29    dq -01h                                           ; String constant (reference count)
               dq 4                                              ; Length
               db "true"                                         ; line 498 column 19 in file runtime library
               db 00h, 00h, 00h, 00h                             ; padding to align to 8-byte boundary
  string$30    dq -01h                                           ; String constant (reference count)
               dq 5                                              ; Length
               db "false"                                        ; line 500 column 18 in file runtime library
               db 00h, 00h, 00h                                  ; padding to align to 8-byte boundary
  string$31    dq -01h                                           ; String constant (reference count)
               dq 4                                              ; Length
               db "null"                                         ; line 503 column 17 in file runtime library
               db 00h, 00h, 00h, 00h                             ; padding to align to 8-byte boundary
  string$32    dq -01h                                           ; String constant (reference count)
               dq 11                                             ; Length
               db "<function ("                                  ; line 511 column 31 in file runtime library
               db 00h, 00h, 00h, 00h, 00h                        ; padding to align to 8-byte boundary
  string$33    dq -01h                                           ; String constant (reference count)
               dq 2                                              ; Length
               db ")>"                                           ; line 511 column 63 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h                   ; padding to align to 8-byte boundary
  string$34    dq -01h                                           ; String constant (reference count)
               dq 1                                              ; Length
               db "["                                            ; line 514 column 21 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  string$35    dq -01h                                           ; String constant (reference count)
               dq 2                                              ; Length
               db ", "                                           ; line 514 column 51 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h                   ; padding to align to 8-byte boundary
  string$36    dq -01h                                           ; String constant (reference count)
               dq 1                                              ; Length
               db "]"                                            ; line 514 column 57 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  string$37    dq -01h                                           ; String constant (reference count)
               dq 12                                             ; Length
               db "<__ListData>"                                 ; line 528 column 25 in file runtime library
               db 00h, 00h, 00h, 00h                             ; padding to align to 8-byte boundary
  string$38    dq -01h                                           ; String constant (reference count)
               dq 28                                             ; Length
               db "value cannot be stringified", 0ah             ; line 530 column 41 in file runtime library
               db 00h, 00h, 00h, 00h                             ; padding to align to 8-byte boundary
  func$print$annotation dq -01h                                  ; String constant (reference count)
               dq 5                                              ; Length
               db "print"                                        ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h                                  ; padding to align to 8-byte boundary
  string$39    dq -01h                                           ; String constant (reference count)
               dq 1                                              ; Length
               db " "                                            ; line 539 column 17 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  func$_println$annotation dq -01h                               ; String constant (reference count)
               dq 8                                              ; Length
               db "_println"                                     ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h, 00h         ; padding to align to 8-byte boundary
  string$40    dq -01h                                           ; String constant (reference count)
               dq 1                                              ; Length
               db 0ah                                            ; line 558 column 14 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  func$chr$annotation dq -01h                                    ; String constant (reference count)
               dq 3                                              ; Length
               db "chr"                                          ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h                        ; padding to align to 8-byte boundary
  string$41    dq -01h                                           ; String constant (reference count)
               dq 23                                             ; Length
               db "chr is not implemented", 0ah                  ; line 567 column 36 in file runtime library
               db 00h                                            ; padding to align to 8-byte boundary
  func$_joinListOffset$annotation dq -01h                        ; String constant (reference count)
               dq 15                                             ; Length
               db "_joinListOffset"                              ; line 1380 column 111 in file syd-compiler.syd
               db 00h                                            ; padding to align to 8-byte boundary
  func$joinList$annotation dq -01h                               ; String constant (reference count)
               dq 8                                              ; Length
               db "joinList"                                     ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h, 00h         ; padding to align to 8-byte boundary
  func$stringTimes$annotation dq -01h                            ; String constant (reference count)
               dq 11                                             ; Length
               db "stringTimes"                                  ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h                        ; padding to align to 8-byte boundary
  string$42    dq -01h                                           ; String constant (reference count)
               dq 31                                             ; Length
               db "stringTimes is not implemented", 0ah          ; line 588 column 44 in file runtime library
               db 00h                                            ; padding to align to 8-byte boundary
  func$charsOf$annotation dq -01h                                ; String constant (reference count)
               dq 7                                              ; Length
               db "charsOf"                                      ; line 1380 column 111 in file syd-compiler.syd
               db 00h                                            ; padding to align to 8-byte boundary
  string$43    dq -01h                                           ; String constant (reference count)
               dq 27                                             ; Length
               db "charsOf is not implemented", 0ah              ; line 594 column 40 in file runtime library
               db 00h, 00h, 00h, 00h, 00h                        ; padding to align to 8-byte boundary
  func$scalarValues$annotation dq -01h                           ; String constant (reference count)
               dq 12                                             ; Length
               db "scalarValues"                                 ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h                             ; padding to align to 8-byte boundary
  string$44    dq -01h                                           ; String constant (reference count)
               dq 32                                             ; Length
               db "scalarValues is not implemented", 0ah         ; line 600 column 45 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h, 00h         ; padding to align to 8-byte boundary
  func$hex$annotation dq -01h                                    ; String constant (reference count)
               dq 3                                              ; Length
               db "hex"                                          ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h                        ; padding to align to 8-byte boundary
  string$45    dq -01h                                           ; String constant (reference count)
               dq 23                                             ; Length
               db "hex is not implemented", 0ah                  ; line 606 column 36 in file runtime library
               db 00h                                            ; padding to align to 8-byte boundary
  func$readFile$annotation dq -01h                               ; String constant (reference count)
               dq 8                                              ; Length
               db "readFile"                                     ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h, 00h         ; padding to align to 8-byte boundary
  string$46    dq -01h                                           ; String constant (reference count)
               dq 28                                             ; Length
               db "readFile is not implemented", 0ah             ; line 612 column 41 in file runtime library
               db 00h, 00h, 00h, 00h                             ; padding to align to 8-byte boundary
  func$stderr$annotation dq -01h                                 ; String constant (reference count)
               dq 6                                              ; Length
               db "stderr"                                       ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h                                       ; padding to align to 8-byte boundary
  string$47    dq -01h                                           ; String constant (reference count)
               dq 26                                             ; Length
               db "stderr is not implemented", 0ah               ; line 618 column 39 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h                   ; padding to align to 8-byte boundary
  func$_debugDescribeBlock$annotation dq -01h                    ; String constant (reference count)
               dq 19                                             ; Length
               db "_debugDescribeBlock"                          ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h                        ; padding to align to 8-byte boundary
  string$48    dq -01h                                           ; String constant (reference count)
               dq 7                                              ; Length
               db ". type "                                      ; line 640 column 57 in file runtime library
               db 00h                                            ; padding to align to 8-byte boundary
  string$49    dq -01h                                           ; String constant (reference count)
               dq 9                                              ; Length
               db ": block #"                                    ; line 640 column 98 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  string$50    dq -01h                                           ; String constant (reference count)
               dq 2                                              ; Length
               db " ("                                           ; line 640 column 123 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h                   ; padding to align to 8-byte boundary
  string$51    dq -01h                                           ; String constant (reference count)
               dq 25                                             ; Length
               db " fields, referenced from "                    ; line 640 column 172 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h              ; padding to align to 8-byte boundary
  string$52    dq -01h                                           ; String constant (reference count)
               dq 7                                              ; Length
               db " roots)"                                      ; line 640 column 205 in file runtime library
               db 00h                                            ; padding to align to 8-byte boundary
  string$53    dq -01h                                           ; String constant (reference count)
               dq 2                                              ; Length
               db "  "                                           ; line 641 column 59 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h                   ; padding to align to 8-byte boundary
  string$54    dq -01h                                           ; String constant (reference count)
               dq 2                                              ; Length
               db ": "                                           ; line 643 column 91 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h                   ; padding to align to 8-byte boundary
  func$_debugDumpBlockList$annotation dq -01h                    ; String constant (reference count)
               dq 19                                             ; Length
               db "_debugDumpBlockList"                          ; line 1380 column 111 in file syd-compiler.syd
               db 00h, 00h, 00h, 00h, 00h                        ; padding to align to 8-byte boundary
  string$55    dq -01h                                           ; String constant (reference count)
               dq 12                                             ; Length
               db "Block list ("                                 ; line 652 column 31 in file runtime library
               db 00h, 00h, 00h, 00h                             ; padding to align to 8-byte boundary
  string$56    dq -01h                                           ; String constant (reference count)
               dq 8                                              ; Length
               db " out of "                                     ; line 652 column 73 in file runtime library
               db 00h, 00h, 00h, 00h, 00h, 00h, 00h, 00h         ; padding to align to 8-byte boundary
  string$57    dq -01h                                           ; String constant (reference count)
               dq 14                                             ; Length
               db " live blocks):"                               ; line 652 column 142 in file runtime library
               db 00h, 00h                                       ; padding to align to 8-byte boundary
  string$58    dq -01h                                           ; String constant (reference count)
               dq 3                                              ; Length
               db "  #"                                          ; line 660 column 26 in file runtime library
               db 00h, 00h, 00h, 00h, 00h                        ; padding to align to 8-byte boundary
  string$59    dq -01h                                           ; String constant (reference count)
               dq 6                                              ; Length
               db " roots"                                       ; line 660 column 132 in file runtime library
               db 00h, 00h                                       ; padding to align to 8-byte boundary
  string$60    dq -01h                                           ; String constant (reference count)
               dq 4                                              ; Length
               db "    "                                         ; line 661 column 41 in file runtime library
               db 00h, 00h, 00h, 00h                             ; padding to align to 8-byte boundary
  string$61    dq -01h                                           ; String constant (reference count)
               dq 3                                              ; Length
               db "One"                                          ; line 8 column 20 in file temp.syd
               db 00h, 00h, 00h, 00h, 00h                        ; padding to align to 8-byte boundary
  string$62    dq -01h                                           ; String constant (reference count)
               dq 3                                              ; Length
               db "Two"                                          ; line 9 column 20 in file temp.syd
               db 00h, 00h, 00h, 00h, 00h                        ; padding to align to 8-byte boundary
  string$63    dq -01h                                           ; String constant (reference count)
               dq 5                                              ; Length
               db "Three"                                        ; line 10 column 22 in file temp.syd
               db 00h, 00h, 00h                                  ; padding to align to 8-byte boundary
  string$64    dq -01h                                           ; String constant (reference count)
               dq 4                                              ; Length
               db "Four"                                         ; line 11 column 21 in file temp.syd
               db 00h, 00h, 00h, 00h                             ; padding to align to 8-byte boundary
  string$65    dq -01h                                           ; String constant (reference count)
               dq 4                                              ; Length
               db "Five"                                         ; line 12 column 21 in file temp.syd
               db 00h, 00h, 00h, 00h                             ; padding to align to 8-byte boundary
  string$66    dq -01h                                           ; String constant (reference count)
               dq 4                                              ; Length
               db "Line"                                         ; line 14 column 16 in file temp.syd
               db 00h, 00h, 00h, 00h                             ; padding to align to 8-byte boundary

.data


_BSS segment
  printlnType dq ?                                               ; dynamic type of println variable
  printlnValue dq ?                                              ; println variable
  _heapHandleType dq ?                                           ; dynamic type of _heapHandle variable
  _heapHandleValue dq ?                                          ; _heapHandle variable
  _blockCountType dq ?                                           ; dynamic type of _blockCount variable
  _blockCountValue dq ?                                          ; _blockCount variable
  _garbageCollectorType dq ?                                     ; dynamic type of _garbageCollector variable
  _garbageCollectorValue dq ?                                    ; _garbageCollector variable
  _gcLockedType dq ?                                             ; dynamic type of _gcLocked variable
  _gcLockedValue dq ?                                            ; _gcLocked variable
  _blockListStartType dq ?                                       ; dynamic type of _blockListStart variable
  _blockListStartValue dq ?                                      ; _blockListStart variable
  _blockListEndType dq ?                                         ; dynamic type of _blockListEnd variable
  _blockListEndValue dq ?                                        ; _blockListEnd variable
  _blockListNextType dq ?                                        ; dynamic type of _blockListNext variable
  _blockListNextValue dq ?                                       ; _blockListNext variable
  _debugLiveBlocksType dq ?                                      ; dynamic type of _debugLiveBlocks variable
  _debugLiveBlocksValue dq ?                                     ; _debugLiveBlocks variable
  _blockEntrySizeType dq ?                                       ; dynamic type of _blockEntrySize variable
  _blockEntrySizeValue dq ?                                      ; _blockEntrySize variable
  _gcBlockHeaderRefCountType dq ?                                ; dynamic type of _gcBlockHeaderRefCount variable
  _gcBlockHeaderRefCountValue dq ?                               ; _gcBlockHeaderRefCount variable
  _gcBlockHeaderLengthType dq ?                                  ; dynamic type of _gcBlockHeaderLength variable
  _gcBlockHeaderLengthValue dq ?                                 ; _gcBlockHeaderLength variable
  _gcBlockHeaderScratchSpaceType dq ?                            ; dynamic type of _gcBlockHeaderScratchSpace variable
  _gcBlockHeaderScratchSpaceValue dq ?                           ; _gcBlockHeaderScratchSpace variable
  _gcBlockHeaderEntryPointerType dq ?                            ; dynamic type of _gcBlockHeaderEntryPointer variable
  _gcBlockHeaderEntryPointerValue dq ?                           ; _gcBlockHeaderEntryPointer variable
  _gcBlockDataType dq ?                                          ; dynamic type of _gcBlockData variable
  _gcBlockDataValue dq ?                                         ; _gcBlockData variable
  _currentTagType dq ?                                           ; dynamic type of _currentTag variable
  _currentTagValue dq ?                                          ; _currentTag variable

.code

public main
decrefString:
  ; Prolog
  push rbp                                                       ; save non-volatile registers
  sub rsp, 018h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 020h]                                ; set up frame pointer
  ; Body
  cmp qword ptr [rcx], 000h                                      ; compare value dereferenced to 0 (integer)
  jl decrefString$end                                            ; skip string decref block for string constants
  dec qword ptr [rcx]                                            ; decrement value dereferenced
  jnz decrefString$end                                           ; decrement reference count of value
  mov r10, rcx                                                   ; copy value of value to pointer
  ; Call _free with 1 arguments
  push r10                                                       ; value of argument #1 (value cast to integer)
  push 01fh                                                      ; type of argument #1 (Integer'31)
  lea rax, qword ptr [rsp + 018h]                                ; load address of return value's value
  push rax                                                       ; internal argument 6: pointer to return value slot's value
  lea rax, qword ptr [rsp + 018h]                                ; load address of return value's type
  push rax                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call func$_free                                                ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  decrefString$end:                                              ; end of function
  ; Epilog
  add rsp, 018h                                                  ; free space for stack
  pop rbp                                                        ; restore non-volatile registers
  ret                                                            ; return from compiler-internal function

decrefMaybeGCOrString:
  ; Prolog
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  sub rsp, 018h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 040h]                                ; set up frame pointer
  ; Body
  mov r10, rdx                                                   ; store value's type in testByte value slot
  mov qword ptr [rsp + 008h], rdx                                ; move value's type out of rdx
  mov rax, r10                                                   ; move testByte to testByte
  mov rbx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rbx                                                        ; adjust to the relative start of that type's entry in the type table
  mov rsi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rsi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that value is GarbageCollectable
  jnc decrefMaybeGCOrString$string                               ; valueskip GC decref block if the value is not GarbageCollectable
  dec qword ptr [rcx]                                            ; decref GarbageCollectable reference count of value
  jmp decrefMaybeGCOrString$end                                  ; return
  decrefMaybeGCOrString$string:                                  ; string decref
  cmp qword ptr [rsp + 008h], 020h                               ; compare type of value to String
  jne decrefMaybeGCOrString$end                                  ; skip string decref block if the value is not a String
  cmp qword ptr [rcx], 000h                                      ; compare value dereferenced to 0 (integer)
  jl decrefMaybeGCOrString$end                                   ; skip string decref block for string constants
  dec qword ptr [rcx]                                            ; decrement value dereferenced
  jnz decrefMaybeGCOrString$end                                  ; decrement reference count of value
  mov rdi, rcx                                                   ; copy value of value to pointer
  ; Call _free with 1 arguments
  push rdi                                                       ; value of argument #1 (value cast to integer)
  push 01fh                                                      ; type of argument #1 (Integer'31)
  lea r12, qword ptr [rsp + 018h]                                ; load address of return value's value
  push r12                                                       ; internal argument 6: pointer to return value slot's value
  lea r12, qword ptr [rsp + 018h]                                ; load address of return value's type
  push r12                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call func$_free                                                ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  decrefMaybeGCOrString$end:                                     ; end of function
  ; Epilog
  add rsp, 018h                                                  ; free space for stack
  pop rbp                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  ret                                                            ; return from compiler-internal function

decrefMaybeString:
  ; Prolog
  push rbp                                                       ; save non-volatile registers
  sub rsp, 018h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 020h]                                ; set up frame pointer
  ; Body
  cmp rdx, 020h                                                  ; compare type of value to String
  jne decrefMaybeString$end                                      ; skip string decref block if the value is not a String
  cmp qword ptr [rcx], 000h                                      ; compare value dereferenced to 0 (integer)
  jl decrefMaybeString$end                                       ; skip string decref block for string constants
  dec qword ptr [rcx]                                            ; decrement value dereferenced
  jnz decrefMaybeString$end                                      ; decrement reference count of value
  mov r10, rcx                                                   ; copy value of value to pointer
  ; Call _free with 1 arguments
  push r10                                                       ; value of argument #1 (value cast to integer)
  push 01fh                                                      ; type of argument #1 (Integer'31)
  lea rax, qword ptr [rsp + 018h]                                ; load address of return value's value
  push rax                                                       ; internal argument 6: pointer to return value slot's value
  lea rax, qword ptr [rsp + 018h]                                ; load address of return value's type
  push rax                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call func$_free                                                ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  decrefMaybeString$end:                                         ; end of function
  ; Epilog
  add rsp, 018h                                                  ; free space for stack
  pop rbp                                                        ; restore non-volatile registers
  ret                                                            ; return from compiler-internal function

decrefMaybeGC:
  ; Prolog
  push rbp                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  sub rsp, 008h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 020h]                                ; set up frame pointer
  ; Body
  mov r10, rdx                                                   ; store value's type in testByte value slot
  mov rax, r10                                                   ; move testByte to testByte
  mov rbx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rbx                                                        ; adjust to the relative start of that type's entry in the type table
  mov rsi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rsi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that value is GarbageCollectable
  jnc decrefMaybeGC$end                                          ; valueskip GC decref block if the value is not GarbageCollectable
  dec qword ptr [rcx]                                            ; decref GarbageCollectable reference count of value
  decrefMaybeGC$end:                                             ; end of function
  ; Epilog
  add rsp, 008h                                                  ; free space for stack
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  ret                                                            ; return from compiler-internal function

main:
  ; runtime library
  ; ===============
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 028h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 068h]                                ; set up frame pointer
  ; Line 25: Integer _heapHandle = __getProcessHeap();
  ; Call __getProcessHeap with 0 arguments
  lea rsi, qword ptr [rsp + 018h]                                ; load address of return value's value
  push rsi                                                       ; internal argument 6: pointer to return value slot's value
  lea rsi, qword ptr [rsp + 018h]                                ; load address of return value's type
  push rsi                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 000h                                                  ; internal argument 1: number of actual arguments
  call func$__getProcessHeap                                     ; jump to subroutine
  add rsp, 030h                                                  ; release shadow space and arguments (result in stack pointer)
  cmp qword ptr [rsp + 010h], 000h                               ; compare type of __getProcessHeap return value to <sentinel>
  jne runtimeLibrary$GetprocessheapReturnValue$TypeMatch         ; skip next block if __getProcessHeap return value is not sentinel
    ; Error handling block for __getProcessHeap return value
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  runtimeLibrary$GetprocessheapReturnValue$TypeMatch:            ; after block
  mov r11, qword ptr [rsp + 018h]                                ; indirect through r11 because operand pair (qword ptr _heapHandleValue, stack operand #1) is not allowed with mov
  mov qword ptr _heapHandleValue, r11                            ; value initialization of variable declaration for _heapHandle variable (__getProcessHeap return value)
  mov r11, qword ptr [rsp + 010h]                                ; indirect through r11 because operand pair (qword ptr _heapHandleType, stack operand #2) is not allowed with mov
  mov qword ptr _heapHandleType, r11                             ; type initialization of variable declaration for _heapHandle variable
  ; Line 29: Integer _blockCount = 0;
  mov qword ptr _blockCountValue, 000h                           ; value initialization of variable declaration for _blockCount variable (0)
  mov qword ptr _blockCountType, 01fh                            ; type initialization of variable declaration for _blockCount variable (Integer'31)
  ; Line 121: Integer _gcLocked = 0;
  mov qword ptr _gcLockedValue, 000h                             ; value initialization of variable declaration for _gcLocked variable (0)
  mov qword ptr _gcLockedType, 01fh                              ; type initialization of variable declaration for _gcLocked variable (Integer'31)
  ; Line 125: Integer _debugLiveBlocks = 0;
  mov qword ptr _debugLiveBlocksValue, 000h                      ; value initialization of variable declaration for _debugLiveBlocks variable (0)
  mov qword ptr _debugLiveBlocksType, 01fh                       ; type initialization of variable declaration for _debugLiveBlocks variable (Integer'31)
  ; Line 127: Integer _blockEntrySize = 8;
  mov qword ptr _blockEntrySizeValue, 008h                       ; value initialization of variable declaration for _blockEntrySize variable (8)
  mov qword ptr _blockEntrySizeType, 01fh                        ; type initialization of variable declaration for _blockEntrySize variable (Integer'31)
  ; Line 128: Integer _gcBlockHeaderRefCount = 0 * 8;
  mov qword ptr _gcBlockHeaderRefCountValue, 000h                ; value initialization of variable declaration for _gcBlockHeaderRefCount variable (* operator result)
  mov qword ptr _gcBlockHeaderRefCountType, 01fh                 ; type initialization of variable declaration for _gcBlockHeaderRefCount variable (Integer'31)
  ; Line 129: Integer _gcBlockHeaderLength = 1 * 8;
  mov qword ptr _gcBlockHeaderLengthValue, 008h                  ; value initialization of variable declaration for _gcBlockHeaderLength variable (* operator result)
  mov qword ptr _gcBlockHeaderLengthType, 01fh                   ; type initialization of variable declaration for _gcBlockHeaderLength variable (Integer'31)
  ; Line 130: Integer _gcBlockHeaderScratchSpace = 2 * 8;
  mov qword ptr _gcBlockHeaderScratchSpaceValue, 010h            ; value initialization of variable declaration for _gcBlockHeaderScratchSpace variable (* operator result)
  mov qword ptr _gcBlockHeaderScratchSpaceType, 01fh             ; type initialization of variable declaration for _gcBlockHeaderScratchSpace variable (Integer'31)
  ; Line 131: Integer _gcBlockHeaderEntryPointer = 3 * 8;
  mov qword ptr _gcBlockHeaderEntryPointerValue, 018h            ; value initialization of variable declaration for _gcBlockHeaderEntryPointer variable (* operator result)
  mov qword ptr _gcBlockHeaderEntryPointerType, 01fh             ; type initialization of variable declaration for _gcBlockHeaderEntryPointer variable (Integer'31)
  ; Line 132: Integer _gcBlockData = 4 * 8;
  mov qword ptr _gcBlockDataValue, 020h                          ; value initialization of variable declaration for _gcBlockData variable (* operator result)
  mov qword ptr _gcBlockDataType, 01fh                           ; type initialization of variable declaration for _gcBlockData variable (Integer'31)
  ; Line 144: _blockListInit(1024 /* 0x400 */);
  ; Call _blockListInit with 1 arguments
  push 000000400h                                                ; value of argument #1 (1024 /* 0x400 */)
  push 01fh                                                      ; type of argument #1 (Integer'31)
  lea rdi, qword ptr [rsp + 028h]                                ; load address of return value's value
  push rdi                                                       ; internal argument 6: pointer to return value slot's value
  lea rdi, qword ptr [rsp + 028h]                                ; load address of return value's type
  push rdi                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call func$_blockListInit                                       ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 212: Integer _currentTag = 0;
  mov qword ptr _currentTagValue, 000h                           ; value initialization of variable declaration for _currentTag variable (0)
  mov qword ptr _currentTagType, 01fh                            ; type initialization of variable declaration for _currentTag variable (Integer'31)
  ; Line 247: _garbageCollector = _garbageCollectorImplementation;
  mov r11, func$_garbageCollectorImplementation                  ; indirect through r11 because operand pair (qword ptr _garbageCollectorValue, func$_garbageCollectorImplementation) is not allowed with mov
  mov qword ptr _garbageCollectorValue, r11                      ; store value
  mov qword ptr _garbageCollectorType, 004h                      ; store type (NullFunction()'4)
  ; Line 560: println = _println;
  mov r11, func$_println                                         ; indirect through r11 because operand pair (qword ptr printlnValue, func$_println) is not allowed with mov
  mov qword ptr printlnValue, r11                                ; store value
  mov qword ptr printlnType, 01bh                                ; store type (NullFunction(Anything...)'27)
  ; Epilog
  add rsp, 028h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers

  ; temp.syd
  ; ========
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 0e8h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 0128h]                               ; set up frame pointer
  ; Line 7: StringList n12345 = []:String;
  ; Call _listConstructor with 2 arguments
  push 001h                                                      ; value of argument #2 (1 (integer))
  push 01fh                                                      ; type of argument #2 (Integer'31)
  push 022h                                                      ; value of argument #1 (code of StringList)
  push 01fh                                                      ; type of argument #1 (Integer'31)
  lea r10, qword ptr [rsp + 0f8h]                                ; load address of return value's value
  push r10                                                       ; internal argument 6: pointer to return value slot's value
  lea r10, qword ptr [rsp + 0f8h]                                ; load address of return value's type
  push r10                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 002h                                                  ; internal argument 1: number of actual arguments
  call func$_listConstructor                                     ; jump to subroutine
  add rsp, 050h                                                  ; release shadow space and arguments (result in stack pointer)
  mov rax, qword ptr [rsp + 0d8h]                                ; copy list literal's value over to slot with better static type
  mov rbx, qword ptr [rsp + 0d0h]                                ; copy list literal's dynamic type over to slot with better static type
  cmp rbx, 000h                                                  ; compare type of list literal to <sentinel>
  jne tempSyd$listLiteral$TypeMatch                              ; skip next block if list literal is not sentinel
    ; Error handling block for list literal
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rsi, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push rsi                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rdi, qword ptr [rsp + 0d8h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 0d8h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 0f8h], rax                              ; move list literal's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r12, qword ptr [rsp + 0d8h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 0d8h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 0b8h]                              ; restoring slots to previous scope state
  tempSyd$listLiteral$TypeMatch:                                 ; after block
  mov r13, rax                                                   ; value initialization of variable declaration for n12345 variable (list literal)
  mov r14, rbx                                                   ; type initialization of variable declaration for n12345 variable
  ; increment reference count for n12345 variable if necessary
  mov r15, r14                                                   ; store n12345 variable's type in testByte value slot
  mov rax, r15                                                   ; move testByte to testByte
  mov r10, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r10                                                        ; adjust to the relative start of that type's entry in the type table
  mov rbx, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rbx                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc tempSyd$AfterGCIncref                                      ; if not a GarbageCollectable, skip incref
    inc qword ptr [r13]                                          ; increment reference count of n12345 variable
  tempSyd$AfterGCIncref:                                         ; after GarbageCollectable incref
  ; Line 8: append(n12345, 'One');
  mov rsi, r13                                                   ; make a copy of n12345's value in case it changes before we use it
  mov rdi, r14                                                   ; make a copy of n12345's type in case it changes before we use it
  ; increment reference count for copy of n12345 if necessary
  mov r12, rdi                                                   ; store copy of n12345's type in testByte value slot
  mov rax, r12                                                   ; move testByte to testByte
  mov r9, 002h                                                   ; read operand of mul (type table width in bytes) 
  mul r9                                                         ; adjust to the relative start of that type's entry in the type table
  mov r8, offset typeTable                                       ; read second operand of + (type table pointer)
  add rax, r8                                                    ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc tempSyd$AfterGCIncref$1                                    ; if not a GarbageCollectable, skip incref
    inc qword ptr [rsi]                                          ; increment reference count of copy of n12345
  tempSyd$AfterGCIncref$1:                                       ; after GarbageCollectable incref
  ; Call append with 2 arguments
  mov qword ptr [rsp + 0c8h], r14                                ; move n12345 variable's type out of r14
  mov r14, offset string$61                                      ; reading string for push
  push r14                                                       ; value of argument #2 (string)
  push 020h                                                      ; type of argument #2 (String'32)
  push rsi                                                       ; value of argument #1 (copy of n12345)
  push rdi                                                       ; type of argument #1
  lea r15, qword ptr [rsp + 0e0h]                                ; load address of return value's value
  push r15                                                       ; internal argument 6: pointer to return value slot's value
  lea r15, qword ptr [rsp + 0e0h]                                ; load address of return value's type
  push r15                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 002h                                                  ; internal argument 1: number of actual arguments
  call func$append                                               ; jump to subroutine
  add rsp, 050h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 9: append(n12345, 'Two');
  mov r10, r13                                                   ; make a copy of n12345's value in case it changes before we use it
  mov rbx, qword ptr [rsp + 0c8h]                                ; make a copy of n12345's type in case it changes before we use it
  ; increment reference count for copy of n12345 if necessary
  mov qword ptr [rsp + 0c0h], rsi                                ; move copy of n12345's value out of rsi
  mov rsi, rbx                                                   ; store copy of n12345's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov qword ptr [rsp + 0b8h], rdi                                ; move copy of n12345's type out of rdi
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc tempSyd$AfterGCIncref$2                                    ; if not a GarbageCollectable, skip incref
    inc qword ptr [r10]                                          ; increment reference count of copy of n12345
  tempSyd$AfterGCIncref$2:                                       ; after GarbageCollectable incref
  ; Call append with 2 arguments
  mov qword ptr [rsp + 0b0h], r10                                ; move copy of n12345's value out of r10
  mov r10, offset string$62                                      ; reading string for push
  push r10                                                       ; value of argument #2 (string)
  push 020h                                                      ; type of argument #2 (String'32)
  push qword ptr [rsp + 0c0h]                                    ; value of argument #1 (copy of n12345)
  push rbx                                                       ; type of argument #1
  mov qword ptr [rsp + 0c0h], rbx                                ; move copy of n12345's type out of rbx
  lea rbx, qword ptr [rsp + 0c8h]                                ; load address of return value's value
  push rbx                                                       ; internal argument 6: pointer to return value slot's value
  lea rbx, qword ptr [rsp + 0c0h]                                ; load address of return value's type
  push rbx                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 002h                                                  ; internal argument 1: number of actual arguments
  call func$append                                               ; jump to subroutine
  add rsp, 050h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 10: append(n12345, 'Three');
  mov rsi, r13                                                   ; make a copy of n12345's value in case it changes before we use it
  mov rax, qword ptr [rsp + 0c8h]                                ; make a copy of n12345's type in case it changes before we use it
  ; increment reference count for copy of n12345 if necessary
  mov rdi, rax                                                   ; store copy of n12345's type in testByte value slot
  mov qword ptr [rsp + 0a8h], rax                                ; move copy of n12345's type out of rax
  mov rax, rdi                                                   ; move testByte to testByte
  mov r12, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r12                                                        ; adjust to the relative start of that type's entry in the type table
  mov qword ptr [rsp + 098h], r13                                ; move n12345 variable's value out of r13
  mov r13, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r13                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc tempSyd$AfterGCIncref$3                                    ; if not a GarbageCollectable, skip incref
    inc qword ptr [rsi]                                          ; increment reference count of copy of n12345
  tempSyd$AfterGCIncref$3:                                       ; after GarbageCollectable incref
  ; Call append with 2 arguments
  mov rbx, offset string$63                                      ; reading string for push
  push rbx                                                       ; value of argument #2 (string)
  push 020h                                                      ; type of argument #2 (String'32)
  push rsi                                                       ; value of argument #1 (copy of n12345)
  push qword ptr [rsp + 0c0h]                                    ; type of argument #1
  mov qword ptr [rsp + 0a8h], rsi                                ; move copy of n12345's value out of rsi
  lea rsi, qword ptr [rsp + 0b0h]                                ; load address of return value's value
  push rsi                                                       ; internal argument 6: pointer to return value slot's value
  lea rsi, qword ptr [rsp + 0a8h]                                ; load address of return value's type
  push rsi                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 002h                                                  ; internal argument 1: number of actual arguments
  call func$append                                               ; jump to subroutine
  add rsp, 050h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 11: append(n12345, 'Four');
  mov rdi, qword ptr [rsp + 098h]                                ; make a copy of n12345's value in case it changes before we use it
  mov rax, qword ptr [rsp + 0c8h]                                ; make a copy of n12345's type in case it changes before we use it
  ; increment reference count for copy of n12345 if necessary
  mov r12, rax                                                   ; store copy of n12345's type in testByte value slot
  mov qword ptr [rsp + 090h], rax                                ; move copy of n12345's type out of rax
  mov rax, r12                                                   ; move testByte to testByte
  mov r13, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r13                                                        ; adjust to the relative start of that type's entry in the type table
  mov r14, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r14                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc tempSyd$AfterGCIncref$4                                    ; if not a GarbageCollectable, skip incref
    inc qword ptr [rdi]                                          ; increment reference count of copy of n12345
  tempSyd$AfterGCIncref$4:                                       ; after GarbageCollectable incref
  ; Call append with 2 arguments
  mov rsi, offset string$64                                      ; reading string for push
  push rsi                                                       ; value of argument #2 (string)
  push 020h                                                      ; type of argument #2 (String'32)
  push rdi                                                       ; value of argument #1 (copy of n12345)
  push qword ptr [rsp + 0a8h]                                    ; type of argument #1
  mov qword ptr [rsp + 098h], rdi                                ; move copy of n12345's value out of rdi
  lea rdi, qword ptr [rsp + 0a0h]                                ; load address of return value's value
  push rdi                                                       ; internal argument 6: pointer to return value slot's value
  lea rdi, qword ptr [rsp + 098h]                                ; load address of return value's type
  push rdi                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 002h                                                  ; internal argument 1: number of actual arguments
  call func$append                                               ; jump to subroutine
  add rsp, 050h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 12: append(n12345, 'Five');
  mov r12, qword ptr [rsp + 098h]                                ; make a copy of n12345's value in case it changes before we use it
  mov rax, qword ptr [rsp + 0c8h]                                ; make a copy of n12345's type in case it changes before we use it
  ; increment reference count for copy of n12345 if necessary
  mov r13, rax                                                   ; store copy of n12345's type in testByte value slot
  mov qword ptr [rsp + 080h], rax                                ; move copy of n12345's type out of rax
  mov rax, r13                                                   ; move testByte to testByte
  mov r14, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r14                                                        ; adjust to the relative start of that type's entry in the type table
  mov r15, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r15                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc tempSyd$AfterGCIncref$5                                    ; if not a GarbageCollectable, skip incref
    inc qword ptr [r12]                                          ; increment reference count of copy of n12345
  tempSyd$AfterGCIncref$5:                                       ; after GarbageCollectable incref
  ; Call append with 2 arguments
  mov rdi, offset string$65                                      ; reading string for push
  push rdi                                                       ; value of argument #2 (string)
  push 020h                                                      ; type of argument #2 (String'32)
  push r12                                                       ; value of argument #1 (copy of n12345)
  push qword ptr [rsp + 098h]                                    ; type of argument #1
  mov qword ptr [rsp + 088h], r12                                ; move copy of n12345's value out of r12
  lea r12, qword ptr [rsp + 090h]                                ; load address of return value's value
  push r12                                                       ; internal argument 6: pointer to return value slot's value
  lea r12, qword ptr [rsp + 088h]                                ; load address of return value's type
  push r12                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 002h                                                  ; internal argument 1: number of actual arguments
  call func$append                                               ; jump to subroutine
  add rsp, 050h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 13: for (foo in n12345) { ...
  mov r13, qword ptr [rsp + 098h]                                ; make a copy of n12345's value in case it changes before we use it
  mov rax, qword ptr [rsp + 0c8h]                                ; make a copy of n12345's type in case it changes before we use it
  ; increment reference count for copy of n12345 if necessary
  mov r14, rax                                                   ; store copy of n12345's type in testByte value slot
  mov qword ptr [rsp + 070h], rax                                ; move copy of n12345's type out of rax
  mov rax, r14                                                   ; move testByte to testByte
  mov r15, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r15                                                        ; adjust to the relative start of that type's entry in the type table
  mov r10, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r10                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc tempSyd$AfterGCIncref$6                                    ; if not a GarbageCollectable, skip incref
    inc qword ptr [r13]                                          ; increment reference count of copy of n12345
  tempSyd$AfterGCIncref$6:                                       ; after GarbageCollectable incref
  cmp qword ptr [rsp + 070h], 000h                               ; compare type of copy of n12345 to <sentinel>
  jne tempSyd$n12345$TypeMatch                                   ; skip next block if copy of n12345 is not sentinel
    ; Error handling block for n12345
    int 3                                                        ; call debugger
    ;  - print(subscriptTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rbx, offset subscriptTypeCheckFailureMessage             ; reading subscriptTypeCheckFailureMessage for push
    push rbx                                                     ; value of argument #1 (subscriptTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rsi, qword ptr [rsp + 070h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 070h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rdi, qword ptr [rsp + 070h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 070h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  tempSyd$n12345$TypeMatch:                                      ; after block
  ; Call iterator with 1 arguments
  push r13                                                       ; value of argument #1 (copy of n12345)
  push qword ptr [rsp + 078h]                                    ; type of argument #1
  lea r12, qword ptr [rsp + 070h]                                ; load address of return value's value
  push r12                                                       ; internal argument 6: pointer to return value slot's value
  lea r12, qword ptr [rsp + 070h]                                ; load address of return value's type
  push r12                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call func$iterator                                             ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  tempSyd$for$top:                                               ; top of for
    ; Call next with 1 arguments
    push qword ptr [rsp + 060h]                                  ; value of argument #1 (iterator return value)
    push qword ptr [rsp + 060h]                                  ; type of argument #1
    mov qword ptr [rsp + 058h], r13                              ; move copy of n12345's value out of r13
    lea r13, qword ptr [rsp + 060h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 058h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$next                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    cmp qword ptr [rsp + 050h], 000h                             ; compare next return value to false
    jne tempSyd$for$body                                         ; for loop condition
    mov r13, qword ptr [rsp + 048h]                              ; restoring slots to previous scope state
    jmp tempSyd$for$bottom                                       ; break out of for
    tempSyd$for$body:                                            ; start of for
    ; Call current with 1 arguments
    push qword ptr [rsp + 060h]                                  ; value of argument #1 (iterator return value)
    push qword ptr [rsp + 060h]                                  ; type of argument #1
    lea r14, qword ptr [rsp + 060h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 058h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$current                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 050h]                              ; value initialization of for loop variable foo
    mov r15, qword ptr [rsp + 040h]                              ; type initialization of for loop variable foo
    ; increment reference count for foo variable if necessary
    mov r10, r15                                                 ; store foo variable's type in testByte value slot
    mov qword ptr [rsp + 038h], rax                              ; move foo variable's value out of rax
    mov rax, r10                                                 ; move testByte to testByte
    mov rbx, 002h                                                ; read operand of mul (type table width in bytes) 
    mul rbx                                                      ; adjust to the relative start of that type's entry in the type table
    mov rsi, offset typeTable                                    ; read second operand of + (type table pointer)
    add rax, rsi                                                 ; finally offset all of that by the start of the type table itself (result in testByte)
    bt qword ptr [rax], 007h                                     ; check that possibly GarbageCollectable value is GarbageCollectable
    jnc tempSyd$for$AfterGCIncref                                ; if not a GarbageCollectable, skip incref
      mov rdi, qword ptr [rsp + 038h]                            ; read slot into register for dereferencing
      inc qword ptr [rdi]                                        ; increment reference count of foo variable
      mov qword ptr [rsp + 038h], rdi                            ; restoring slots to previous scope state
    tempSyd$for$AfterGCIncref:                                   ; after GarbageCollectable incref
    cmp r15, 020h                                                ; compare type of foo variable to String
    jne tempSyd$for$AfterStringIncref                            ; if not a String, skip incref
      mov r12, qword ptr [rsp + 038h]                            ; get foo variable into register to dereference it
      mov r13, qword ptr [r12]                                   ; dereference string to get to reference count
      cmp r13, 0                                                 ; compare string reference count to 0
      jns tempSyd$for$StringIncref                               ; if reference count is negative (constant strings), skip incref
      mov qword ptr [rsp + 038h], r12                            ; restoring slots to previous scope state
      jmp tempSyd$for$AfterStringIncref                          ; skip incref for string constants
      tempSyd$for$StringIncref:                                  ; real String
        inc qword ptr [r12]                                      ; increment reference count of foo variable
      mov qword ptr [rsp + 038h], r12                            ; restoring slots to previous scope state
    tempSyd$for$AfterStringIncref:                               ; after String incref
    ; Line 14: println('Line', foo);
    mov r14, qword ptr printlnValue                              ; make a copy of println's value in case it changes before we use it
    mov r9, qword ptr printlnType                                ; make a copy of println's type in case it changes before we use it
    mov r8, qword ptr [rsp + 038h]                               ; make a copy of foo's value in case it changes before we use it
    mov rdx, r15                                                 ; make a copy of foo's type in case it changes before we use it
    ; increment reference count for copy of foo if necessary
    mov rcx, rdx                                                 ; store copy of foo's type in testByte value slot
    mov qword ptr [rsp + 030h], rdx                              ; move copy of foo's type out of rdx
    mov rax, rcx                                                 ; move testByte to testByte
    mov qword ptr [rsp + 028h], r15                              ; move foo variable's type out of r15
    mov r15, 002h                                                ; read operand of mul (type table width in bytes) 
    mul r15                                                      ; adjust to the relative start of that type's entry in the type table
    mov r10, offset typeTable                                    ; read second operand of + (type table pointer)
    add rax, r10                                                 ; finally offset all of that by the start of the type table itself (result in testByte)
    bt qword ptr [rax], 007h                                     ; check that possibly GarbageCollectable value is GarbageCollectable
    jnc tempSyd$for$AfterGCIncref$1                              ; if not a GarbageCollectable, skip incref
      inc qword ptr [r8]                                         ; increment reference count of copy of foo
    tempSyd$for$AfterGCIncref$1:                                 ; after GarbageCollectable incref
    cmp qword ptr [rsp + 030h], 020h                             ; compare type of copy of foo to String
    jne tempSyd$for$AfterStringIncref$1                          ; if not a String, skip incref
      mov rbx, qword ptr [r8]                                    ; dereference string to get to reference count
      cmp rbx, 0                                                 ; compare string reference count to 0
      jns tempSyd$for$StringIncref$1                             ; if reference count is negative (constant strings), skip incref
      jmp tempSyd$for$AfterStringIncref$1                        ; skip incref for string constants
      tempSyd$for$StringIncref$1:                                ; real String
        inc qword ptr [r8]                                       ; increment reference count of copy of foo
    tempSyd$for$AfterStringIncref$1:                             ; after String incref
    cmp r9, 000h                                                 ; compare type of copy of println to <sentinel>
    jne tempSyd$for$copyOfPrintln$TypeMatch                      ; skip next block if copy of println is not sentinel
      ; Error handling block for copy of println
      int 3                                                      ; call debugger
      ;  - print(subroutineCallTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rsi, offset subroutineCallTypeCheckFailureMessage      ; reading subroutineCallTypeCheckFailureMessage for push
      push rsi                                                   ; value of argument #1 (subroutineCallTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rdi, qword ptr [rsp + 030h]                            ; load address of return value's value
      push rdi                                                   ; internal argument 6: pointer to return value slot's value
      lea rdi, qword ptr [rsp + 030h]                            ; load address of return value's type
      push rdi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov qword ptr [rsp + 050h], r9                             ; move copy of println's type out of r9
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov qword ptr [rsp + 048h], r8                             ; move copy of foo's value out of r8
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r12, qword ptr [rsp + 030h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 030h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov r9, qword ptr [rsp + 010h]                             ; restoring slots to previous scope state
      mov r8, qword ptr [rsp + 008h]                             ; restoring slots to previous scope state
    tempSyd$for$copyOfPrintln$TypeMatch:                         ; after block
    ; Call copy of println with 2 arguments
    push r8                                                      ; value of argument #2 (copy of foo)
    push qword ptr [rsp + 038h]                                  ; type of argument #2
    mov r13, offset string$66                                    ; reading string for push
    push r13                                                     ; value of argument #1 (string)
    push 020h                                                    ; type of argument #1 (String'32)
    mov qword ptr [rsp + 038h], r14                              ; move copy of println's value out of r14
    lea r14, qword ptr [rsp + 040h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov qword ptr [rsp + 058h], r9                               ; move copy of println's type out of r9
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov qword ptr [rsp + 050h], r8                               ; move copy of foo's value out of r8
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 002h                                                ; internal argument 1: number of actual arguments
    call qword ptr [rsp + 068h]                                  ; jump to subroutine
    add rsp, 050h                                                ; release shadow space and arguments (result in stack pointer)
    ; Decrement reference count for copy of foo (static type: Whatever) via decrefMaybeGCOrString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, qword ptr [rsp + 050h]                              ; arg #2: copy of foo's type
    mov rcx, qword ptr [rsp + 020h]                              ; arg #1: copy of foo's value
    call decrefMaybeGCOrString                                   ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    ; Decrement reference count for foo variable (static type: Whatever) via decrefMaybeGCOrString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, qword ptr [rsp + 048h]                              ; arg #2: foo variable's type
    mov rcx, qword ptr [rsp + 058h]                              ; arg #1: foo variable's value
    call decrefMaybeGCOrString                                   ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    ; Decrement reference count for current return value (static type: Whatever) via decrefMaybeGCOrString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, qword ptr [rsp + 060h]                              ; arg #2: current return value's type
    mov rcx, qword ptr [rsp + 070h]                              ; arg #1: current return value's value
    call decrefMaybeGCOrString                                   ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    mov r13, qword ptr [rsp + 048h]                              ; restoring slots to previous scope state
    jmp tempSyd$for$top                                          ; return to top of for
  tempSyd$for$bottom:                                            ; bottom of for
  ; Line 16: println(n12345);
  mov rax, qword ptr printlnValue                                ; make a copy of println's value in case it changes before we use it
  mov r15, qword ptr printlnType                                 ; make a copy of println's type in case it changes before we use it
  mov r10, qword ptr [rsp + 098h]                                ; make a copy of n12345's value in case it changes before we use it
  mov rbx, qword ptr [rsp + 0c8h]                                ; make a copy of n12345's type in case it changes before we use it
  ; increment reference count for copy of n12345 if necessary
  mov rsi, rbx                                                   ; store copy of n12345's type in testByte value slot
  mov qword ptr [rsp + 050h], rax                                ; move copy of println's value out of rax
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc tempSyd$AfterGCIncref$7                                    ; if not a GarbageCollectable, skip incref
    inc qword ptr [r10]                                          ; increment reference count of copy of n12345
  tempSyd$AfterGCIncref$7:                                       ; after GarbageCollectable incref
  cmp r15, 000h                                                  ; compare type of copy of println to <sentinel>
  jne tempSyd$copyOfPrintln$TypeMatch                            ; skip next block if copy of println is not sentinel
    ; Error handling block for copy of println
    int 3                                                        ; call debugger
    ;  - print(subroutineCallTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 048h], r13                              ; move copy of n12345's value out of r13
    mov r13, offset subroutineCallTypeCheckFailureMessage        ; reading subroutineCallTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (subroutineCallTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 050h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 050h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 070h], r10                              ; move copy of n12345's value out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 048h], r15                              ; move copy of println's type out of r15
    lea r15, qword ptr [rsp + 050h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 040h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r15, qword ptr [rsp + 038h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 030h]                              ; restoring slots to previous scope state
    mov r13, qword ptr [rsp + 048h]                              ; restoring slots to previous scope state
  tempSyd$copyOfPrintln$TypeMatch:                               ; after block
  ; Call copy of println with 1 arguments
  push r10                                                       ; value of argument #1 (copy of n12345)
  push rbx                                                       ; type of argument #1
  mov qword ptr [rsp + 050h], r10                                ; move copy of n12345's value out of r10
  lea r10, qword ptr [rsp + 058h]                                ; load address of return value's value
  push r10                                                       ; internal argument 6: pointer to return value slot's value
  lea r10, qword ptr [rsp + 050h]                                ; load address of return value's type
  push r10                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call qword ptr [rsp + 090h]                                    ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 17: println(len(n12345));
  mov qword ptr [rsp + 050h], rbx                                ; move copy of n12345's type out of rbx
  mov rbx, qword ptr printlnValue                                ; make a copy of println's value in case it changes before we use it
  mov rsi, qword ptr printlnType                                 ; make a copy of println's type in case it changes before we use it
  mov rax, qword ptr [rsp + 098h]                                ; make a copy of n12345's value in case it changes before we use it
  mov rdi, qword ptr [rsp + 0c8h]                                ; make a copy of n12345's type in case it changes before we use it
  ; increment reference count for copy of n12345 if necessary
  mov r12, rdi                                                   ; store copy of n12345's type in testByte value slot
  mov qword ptr [rsp + 048h], rax                                ; move copy of n12345's value out of rax
  mov rax, r12                                                   ; move testByte to testByte
  mov qword ptr [rsp + 038h], r13                                ; move copy of n12345's value out of r13
  mov r13, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r13                                                        ; adjust to the relative start of that type's entry in the type table
  mov r14, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r14                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc tempSyd$AfterGCIncref$8                                    ; if not a GarbageCollectable, skip incref
    mov r15, qword ptr [rsp + 048h]                              ; read slot into register for dereferencing
    inc qword ptr [r15]                                          ; increment reference count of copy of n12345
    mov qword ptr [rsp + 048h], r15                              ; restoring slots to previous scope state
  tempSyd$AfterGCIncref$8:                                       ; after GarbageCollectable incref
  ; Call len with 1 arguments
  push qword ptr [rsp + 048h]                                    ; value of argument #1 (copy of n12345)
  push rdi                                                       ; type of argument #1
  mov qword ptr [rsp + 038h], rsi                                ; move copy of println's type out of rsi
  lea rsi, qword ptr [rsp + 040h]                                ; load address of return value's value
  push rsi                                                       ; internal argument 6: pointer to return value slot's value
  lea rsi, qword ptr [rsp + 038h]                                ; load address of return value's type
  push rsi                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call func$len                                                  ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  cmp qword ptr [rsp + 028h], 000h                               ; compare type of copy of println to <sentinel>
  jne tempSyd$copyOfPrintln$TypeMatch$1                          ; skip next block if copy of println is not sentinel
    ; Error handling block for copy of println
    int 3                                                        ; call debugger
    ;  - print(subroutineCallTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 018h], rdi                              ; move copy of n12345's type out of rdi
    mov rdi, offset subroutineCallTypeCheckFailureMessage        ; reading subroutineCallTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (subroutineCallTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 020h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rax, qword ptr [rsp + 020h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rdi, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
  tempSyd$copyOfPrintln$TypeMatch$1:                             ; after block
  ; Call copy of println with 1 arguments
  push qword ptr [rsp + 030h]                                    ; value of argument #1 (len return value)
  push qword ptr [rsp + 028h]                                    ; type of argument #1
  lea r13, qword ptr [rsp + 040h]                                ; load address of return value's value
  push r13                                                       ; internal argument 6: pointer to return value slot's value
  lea r13, qword ptr [rsp + 038h]                                ; load address of return value's type
  push r13                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call rbx                                                       ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Terminate application - call exit(0)
  ; Call exit with 1 arguments
  push 000h                                                      ; value of argument #1 (0 (integer))
  push 01fh                                                      ; type of argument #1 (Integer'31)
  lea r14, qword ptr [rsp + 040h]                                ; load address of return value's value
  push r14                                                       ; internal argument 6: pointer to return value slot's value
  lea r14, qword ptr [rsp + 040h]                                ; load address of return value's type
  push r14                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call func$exit                                                 ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Decrement reference count for copy of n12345 (static type: StringList'34) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, rdi                                                   ; arg #2: copy of n12345's type
  mov rcx, qword ptr [rsp + 068h]                                ; arg #1: copy of n12345's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of n12345 (static type: StringList'34) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 0b0h]                                ; arg #2: copy of n12345's type
  mov rcx, qword ptr [rsp + 098h]                                ; arg #1: copy of n12345's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of n12345 (static type: StringList'34) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 070h]                                ; arg #2: copy of n12345's type
  mov rcx, qword ptr [rsp + 060h]                                ; arg #1: copy of n12345's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of n12345 (static type: StringList'34) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 0c8h]                                ; arg #2: copy of n12345's type
  mov rcx, qword ptr [rsp + 0a8h]                                ; arg #1: copy of n12345's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of n12345 (static type: StringList'34) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 0c0h]                                ; arg #2: copy of n12345's type
  mov rcx, qword ptr [rsp + 0d0h]                                ; arg #1: copy of n12345's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for iterator return value (static type: WhateverIterator'41) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 078h]                                ; arg #2: iterator return value's type
  mov rcx, qword ptr [rsp + 080h]                                ; arg #1: iterator return value's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of n12345 (static type: StringList'34) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 0d8h]                                ; arg #2: copy of n12345's type
  mov rcx, qword ptr [rsp + 0e0h]                                ; arg #1: copy of n12345's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for n12345 variable (static type: StringList'34) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 0e8h]                                ; arg #2: n12345 variable's type
  mov rcx, qword ptr [rsp + 0b8h]                                ; arg #1: n12345 variable's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of n12345 (static type: StringList'34) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 090h]                                ; arg #2: copy of n12345's type
  mov rcx, qword ptr [rsp + 058h]                                ; arg #1: copy of n12345's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for _listConstructor return value (static type: WhateverList'40) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 0f0h]                                ; arg #2: _listConstructor return value's type
  mov rcx, qword ptr [rsp + 0f8h]                                ; arg #1: _listConstructor return value's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of n12345 (static type: StringList'34) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 0a0h]                                ; arg #2: copy of n12345's type
  mov rcx, qword ptr [rsp + 088h]                                ; arg #1: copy of n12345's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Epilog
  add rsp, 0e8h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers

  ; End of global scope
  ret                                                            ; exit application

; __print
dq func$__print$annotation
func$__print:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 018h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 058h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 001h                                                  ; compare parameter count of __print to 1 (integer)
  je func$__print$parameterCountCheck$continuation               ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 018h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 018h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 018h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 018h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$__print$parameterCountCheck$continuation:                 ; end of parameter count check
  ; Check type of parameter 0, message to print to console (expecting String)
  mov rsi, qword ptr [rbp + 038h]                                ; store message to print to console's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 003h                                       ; check that message to print to console is String
  jc func$__print$messageToPrintToConsole$TypeMatch              ; skip next block if the type matches
    ; Error handling block for message to print to console
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$__print$messageToPrintToConsole$TypeMatch:                ; after block
  ; Calling GetStdHandle
  sub rsp, 020h                                                  ; allocate shadow space
  mov rcx, -00bh                                                 ; argument #1: STD_OUTPUT_HANDLE
  call GetStdHandle                                              ; handle returned in rax
  add rsp, 020h                                                  ; release shadow space (result in stack pointer)
  ; Calling WriteConsoleA
  push 000h                                                      ; argument #5: Reserved, must be NULL (lpReserved)
  sub rsp, 020h                                                  ; allocate shadow space
  lea r9, qword ptr [rsp + 030h]                                 ; argument #4: Number of characters written (lpNumberOfCharsWritten)
  mov r10, qword ptr [rbp + 040h]                                ; get message to print to console into register to dereference it
  mov r8, qword ptr [r10 + 008h]                                 ; argument #3: Length of buffer (nNumberOfCharsToWrite), from string structure
  mov rdx, qword ptr [rbp + 040h]                                ; assign value of message to print to console to value of x64 calling convention arg #2
  add rdx, 010h                                                  ; argument #2: Pointer to buffer to write (*lpBuffer) (result in x64 calling convention arg #2)
  mov rcx, rax                                                   ; argument #1: Handle from GetStdHandle (hConsoleOutput)
  call WriteConsoleA                                             ; returns Booleanean representing success in rax
  add rsp, 028h                                                  ; release shadow space (result in stack pointer)
  ; Implicit return from __print
  mov r12, qword ptr [rbp + 030h]                                ; get pointer to return value of __print into register to dereference it
  mov qword ptr [r12], 000h                                      ; __print return value
  mov r13, qword ptr [rbp + 028h]                                ; get pointer to return value type of __print into register to dereference it
  mov qword ptr [r13], 01dh                                      ; type of __print return value (Null'29)
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 018h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; exit
dq func$exit$annotation
func$exit:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 018h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 058h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 001h                                                  ; compare parameter count of exit to 1 (integer)
  je func$exit$parameterCountCheck$continuation                  ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 018h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 018h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 018h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 018h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$exit$parameterCountCheck$continuation:                    ; end of parameter count check
  ; Check type of parameter 0, exit code parameter (expecting Integer)
  mov rsi, qword ptr [rbp + 038h]                                ; store exit code parameter's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that exit code parameter is Integer
  jc func$exit$exitCodeParameter$TypeMatch                       ; skip next block if the type matches
    ; Error handling block for exit code parameter
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$exit$exitCodeParameter$TypeMatch:                         ; after block
  ; Calling ExitProcess
  sub rsp, 020h                                                  ; allocate shadow space
  mov rcx, qword ptr [rbp + 040h]                                ; exit code
  call ExitProcess                                               ; process should terminate at this point
  add rsp, 020h                                                  ; release shadow space, just in case (result in stack pointer)
  ; Implicit return from exit
  mov rax, qword ptr [rbp + 030h]                                ; get pointer to return value of exit into register to dereference it
  mov qword ptr [rax], 000h                                      ; exit return value
  mov rdi, qword ptr [rbp + 028h]                                ; get pointer to return value type of exit into register to dereference it
  mov qword ptr [rdi], 01dh                                      ; type of exit return value (Null'29)
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 018h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; len
dq func$len$annotation
func$len:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 018h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 058h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 001h                                                  ; compare parameter count of len to 1 (integer)
  je func$len$parameterCountCheck$continuation                   ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 018h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 018h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 018h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 018h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$len$parameterCountCheck$continuation:                     ; end of parameter count check
  ; Check type of parameter 0, list (expecting WhateverReadOnlyList)
  mov rsi, qword ptr [rbp + 038h]                                ; store list's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  add rax, 001h                                                  ; adjust to the byte containing the bit to check against (result in testByte)
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 000h                                       ; check that list is WhateverReadOnlyList
  jc func$len$list$TypeMatch                                     ; skip next block if the type matches
    ; Error handling block for list
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$len$list$TypeMatch:                                       ; after block
  mov r10, qword ptr [rbp + 040h]                                ; get list into register to dereference it
  mov rbx, qword ptr [r10 + 038h]                                ; list data is the second field in its block
  mov rsi, qword ptr [rbx + 008h]                                ; list length is a field in the list data
  mov r13, qword ptr [rbp + 030h]                                ; get pointer to return value of len into register to dereference it
  mov qword ptr [r13], rsi                                       ; len return value
  mov r14, qword ptr [rbp + 028h]                                ; get pointer to return value type of len into register to dereference it
  mov qword ptr [r14], 01fh                                      ; type of len return value (Integer'31)
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 018h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; __readFromAddress
dq func$__readFromAddress$annotation
func$__readFromAddress:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 018h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 058h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 001h                                                  ; compare parameter count of __readFromAddress to 1 (integer)
  je func$__readFromAddress$parameterCountCheck$continuation     ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 018h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 018h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 018h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 018h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$__readFromAddress$parameterCountCheck$continuation:       ; end of parameter count check
  ; Check type of parameter 0, address (expecting Integer)
  mov rsi, qword ptr [rbp + 038h]                                ; store address's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that address is Integer
  jc func$__readFromAddress$address$TypeMatch                    ; skip next block if the type matches
    ; Error handling block for address
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$__readFromAddress$address$TypeMatch:                      ; after block
  ; Implicit return from __readFromAddress
  mov r10, 01dh                                                  ; store null's type in testByte value slot
  mov rax, r10                                                   ; move testByte to testByte
  mov rbx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rbx                                                        ; adjust to the relative start of that type's entry in the type table
  mov rsi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rsi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that __readFromAddress return value is Integer
  jc func$__readFromAddress$ReadfromaddressReturnValue$TypeMatch ; skip next block if the type matches
    ; Error handling block for __readFromAddress return value
    int 3                                                        ; call debugger
    ;  - print(returnValueTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset returnValueTypeCheckFailureMessage           ; reading returnValueTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (returnValueTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$__readFromAddress$ReadfromaddressReturnValue$TypeMatch:   ; after block
  mov r14, qword ptr [rbp + 030h]                                ; get pointer to return value of __readFromAddress into register to dereference it
  mov qword ptr [r14], 000h                                      ; __readFromAddress return value
  mov r15, qword ptr [rbp + 028h]                                ; get pointer to return value type of __readFromAddress into register to dereference it
  mov qword ptr [r15], 01dh                                      ; type of __readFromAddress return value (Null'29)
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 018h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; __writeToAddress
dq func$__writeToAddress$annotation
func$__writeToAddress:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 018h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 058h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 002h                                                  ; compare parameter count of __writeToAddress to 2 (integer)
  je func$__writeToAddress$parameterCountCheck$continuation      ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 018h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 018h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 018h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 018h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$__writeToAddress$parameterCountCheck$continuation:        ; end of parameter count check
  ; Check type of parameter 0, address (expecting Integer)
  mov rsi, qword ptr [rbp + 038h]                                ; store address's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that address is Integer
  jc func$__writeToAddress$address$TypeMatch                     ; skip next block if the type matches
    ; Error handling block for address
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$__writeToAddress$address$TypeMatch:                       ; after block
  ; Check type of parameter 1, value (expecting Integer)
  mov r10, qword ptr [rbp + 048h]                                ; store value's type in testByte value slot
  mov rax, r10                                                   ; move testByte to testByte
  mov rbx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rbx                                                        ; adjust to the relative start of that type's entry in the type table
  mov rsi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rsi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that value is Integer
  jc func$__writeToAddress$value$TypeMatch                       ; skip next block if the type matches
    ; Error handling block for value
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$__writeToAddress$value$TypeMatch:                         ; after block
  ; Implicit return from __writeToAddress
  mov rax, qword ptr [rbp + 030h]                                ; get pointer to return value of __writeToAddress into register to dereference it
  mov qword ptr [rax], 000h                                      ; __writeToAddress return value
  mov rbx, qword ptr [rbp + 028h]                                ; get pointer to return value type of __writeToAddress into register to dereference it
  mov qword ptr [rbx], 01dh                                      ; type of __writeToAddress return value (Null'29)
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 018h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; __incref
dq func$__incref$annotation
func$__incref:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 018h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 058h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 001h                                                  ; compare parameter count of __incref to 1 (integer)
  je func$__incref$parameterCountCheck$continuation              ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 018h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 018h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 018h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 018h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$__incref$parameterCountCheck$continuation:                ; end of parameter count check
  ; Check type of parameter 0, value (expecting Anything)
  mov rsi, qword ptr [rbp + 038h]                                ; store value's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 006h                                       ; check that value is Anything
  jc func$__incref$value$TypeMatch                               ; skip next block if the type matches
    ; Error handling block for value
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$__incref$value$TypeMatch:                                 ; after block
  ; Implicit return from __incref
  mov rax, qword ptr [rbp + 030h]                                ; get pointer to return value of __incref into register to dereference it
  mov qword ptr [rax], 000h                                      ; __incref return value
  mov rdi, qword ptr [rbp + 028h]                                ; get pointer to return value type of __incref into register to dereference it
  mov qword ptr [rdi], 01dh                                      ; type of __incref return value (Null'29)
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 018h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; assert
dq func$assert$annotation
func$assert:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 018h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 058h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 002h                                                  ; compare parameter count of assert to 2 (integer)
  je func$assert$parameterCountCheck$continuation                ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 018h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 018h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 018h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 018h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$assert$parameterCountCheck$continuation:                  ; end of parameter count check
  ; Check type of parameter 0, condition (expecting Boolean)
  mov rsi, qword ptr [rbp + 038h]                                ; store condition's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 001h                                       ; check that condition is Boolean
  jc func$assert$condition$TypeMatch                             ; skip next block if the type matches
    ; Error handling block for condition
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$assert$condition$TypeMatch:                               ; after block
  ; Check type of parameter 1, message (expecting String)
  mov r10, qword ptr [rbp + 048h]                                ; store message's type in testByte value slot
  mov rax, r10                                                   ; move testByte to testByte
  mov rbx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rbx                                                        ; adjust to the relative start of that type's entry in the type table
  mov rsi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rsi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 003h                                       ; check that message is String
  jc func$assert$message$TypeMatch                               ; skip next block if the type matches
    ; Error handling block for message
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$assert$message$TypeMatch:                                 ; after block
  ; Line 7: if (!condition) { ...
  cmp qword ptr [rbp + 038h], 000h                               ; compare type of condition to <sentinel>
  jne func$assert$condition$TypeMatch$1                          ; skip next block if condition is not sentinel
    ; Error handling block for condition
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r14, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r14                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$assert$condition$TypeMatch$1:                             ; after block
  xor rax, rax                                                   ; zero ! unary operator result to put the boolean in
  cmp qword ptr [rbp + 040h], 000h                               ; ! unary operator
  sete al                                                        ; put result in ! unary operator result
  mov rbx, 01eh                                                  ; ! unary operator result is a Boolean'30
  cmp rax, 000h                                                  ; compare ! unary operator result to false
  je func$assert$if$continuation                                 ; !condition
    ; Line 8: println(message);
    mov rsi, qword ptr printlnValue                              ; make a copy of println's value in case it changes before we use it
    mov rdi, qword ptr printlnType                               ; make a copy of println's type in case it changes before we use it
    cmp rdi, 000h                                                ; compare type of copy of println to <sentinel>
    jne func$assert$assert$if$copyOfPrintln$TypeMatch            ; skip next block if copy of println is not sentinel
      ; Error handling block for copy of println
      int 3                                                      ; call debugger
      ;  - print(subroutineCallTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r12, offset subroutineCallTypeCheckFailureMessage      ; reading subroutineCallTypeCheckFailureMessage for push
      push r12                                                   ; value of argument #1 (subroutineCallTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r13, qword ptr [rsp + 018h]                            ; load address of return value's value
      push r13                                                   ; internal argument 6: pointer to return value slot's value
      lea r13, qword ptr [rsp + 018h]                            ; load address of return value's type
      push r13                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r14, qword ptr [rsp + 018h]                            ; load address of return value's value
      push r14                                                   ; internal argument 6: pointer to return value slot's value
      lea r14, qword ptr [rsp + 018h]                            ; load address of return value's type
      push r14                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
    func$assert$assert$if$copyOfPrintln$TypeMatch:               ; after block
    ; Call copy of println with 1 arguments
    push qword ptr [rbp + 050h]                                  ; value of argument #1 (message)
    push qword ptr [rbp + 048h]                                  ; type of argument #1
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call rsi                                                     ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ; Line 9: exit(1);
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1)
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rsi, qword ptr [rsp + 018h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 018h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$assert$if$continuation:                                   ; end of if
  ; Implicit return from assert
  mov r14, qword ptr [rbp + 030h]                                ; get pointer to return value of assert into register to dereference it
  mov qword ptr [r14], 000h                                      ; assert return value
  mov r15, qword ptr [rbp + 028h]                                ; get pointer to return value type of assert into register to dereference it
  mov qword ptr [r15], 01dh                                      ; type of assert return value (Null'29)
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 018h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; __getLastError
dq func$__getLastError$annotation
func$__getLastError:
  ; Prolog
  push r14                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  sub rsp, 020h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 058h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 000h                                                  ; compare parameter count of __getLastError to 0 (integer)
  je func$__getLastError$parameterCountCheck$continuation        ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 020h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 020h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$__getLastError$parameterCountCheck$continuation:          ; end of parameter count check
  ; Calling GetLastError
  sub rsp, 020h                                                  ; allocate shadow space
  call GetLastError                                              ; calls GetLastError from kernel32.lib
  add rsp, 020h                                                  ; release shadow space and arguments if there were more than four (result in stack pointer)
  mov r13, qword ptr [rbp + 030h]                                ; get pointer to return value of __getLastError into register to dereference it
  mov qword ptr [r13], rax                                       ; __getLastError return value
  mov r14, qword ptr [rbp + 028h]                                ; get pointer to return value type of __getLastError into register to dereference it
  mov qword ptr [r14], 01fh                                      ; type of __getLastError return value (Integer'31)
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 020h                                                  ; free space for stack
  pop r13                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r14                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; __getProcessHeap
dq func$__getProcessHeap$annotation
func$__getProcessHeap:
  ; Prolog
  push r14                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  sub rsp, 020h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 058h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 000h                                                  ; compare parameter count of __getProcessHeap to 0 (integer)
  je func$__getProcessHeap$parameterCountCheck$continuation      ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 020h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 020h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$__getProcessHeap$parameterCountCheck$continuation:        ; end of parameter count check
  ; Calling GetProcessHeap
  sub rsp, 020h                                                  ; allocate shadow space
  call GetProcessHeap                                            ; calls GetProcessHeap from kernel32.lib
  add rsp, 020h                                                  ; release shadow space and arguments if there were more than four (result in stack pointer)
  mov r13, qword ptr [rbp + 030h]                                ; get pointer to return value of __getProcessHeap into register to dereference it
  mov qword ptr [r13], rax                                       ; __getProcessHeap return value
  mov r14, qword ptr [rbp + 028h]                                ; get pointer to return value type of __getProcessHeap into register to dereference it
  mov qword ptr [r14], 01fh                                      ; type of __getProcessHeap return value (Integer'31)
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 020h                                                  ; free space for stack
  pop r13                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r14                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; __heapAlloc
dq func$__heapAlloc$annotation
func$__heapAlloc:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 020h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 060h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 003h                                                  ; compare parameter count of __heapAlloc to 3 (integer)
  je func$__heapAlloc$parameterCountCheck$continuation           ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 020h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 020h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$__heapAlloc$parameterCountCheck$continuation:             ; end of parameter count check
  ; Check type of parameter 0, hHeap (expecting Integer)
  mov rsi, qword ptr [rbp + 038h]                                ; store hHeap's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that hHeap is Integer
  jc func$__heapAlloc$hheap$TypeMatch                            ; skip next block if the type matches
    ; Error handling block for hHeap
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 020h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 020h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$__heapAlloc$hheap$TypeMatch:                              ; after block
  ; Check type of parameter 1, dwFlags (expecting Integer)
  mov r10, qword ptr [rbp + 048h]                                ; store dwFlags's type in testByte value slot
  mov rax, r10                                                   ; move testByte to testByte
  mov rbx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rbx                                                        ; adjust to the relative start of that type's entry in the type table
  mov rsi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rsi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that dwFlags is Integer
  jc func$__heapAlloc$dwflags$TypeMatch                          ; skip next block if the type matches
    ; Error handling block for dwFlags
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 020h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 020h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$__heapAlloc$dwflags$TypeMatch:                            ; after block
  ; Check type of parameter 2, dwBytes (expecting Integer)
  mov r14, qword ptr [rbp + 058h]                                ; store dwBytes's type in testByte value slot
  mov rax, r14                                                   ; move testByte to testByte
  mov r15, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r15                                                        ; adjust to the relative start of that type's entry in the type table
  mov r10, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r10                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that dwBytes is Integer
  jc func$__heapAlloc$dwbytes$TypeMatch                          ; skip next block if the type matches
    ; Error handling block for dwBytes
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rbx, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push rbx                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rsi, qword ptr [rsp + 020h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rdi, qword ptr [rsp + 020h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$__heapAlloc$dwbytes$TypeMatch:                            ; after block
  ; Calling HeapAlloc
  sub rsp, 020h                                                  ; allocate shadow space
  mov r8, qword ptr [rbp + 060h]                                 ; argument #3
  mov rdx, qword ptr [rbp + 050h]                                ; argument #2
  mov rcx, qword ptr [rbp + 040h]                                ; argument #1
  call HeapAlloc                                                 ; calls HeapAlloc from kernel32.lib
  add rsp, 020h                                                  ; release shadow space and arguments if there were more than four (result in stack pointer)
  mov r15, qword ptr [rbp + 030h]                                ; get pointer to return value of __heapAlloc into register to dereference it
  mov qword ptr [r15], rax                                       ; __heapAlloc return value
  mov r10, qword ptr [rbp + 028h]                                ; get pointer to return value type of __heapAlloc into register to dereference it
  mov qword ptr [r10], 01fh                                      ; type of __heapAlloc return value (Integer'31)
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 020h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; _alloc
dq func$_alloc$annotation
func$_alloc:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 038h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 078h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 001h                                                  ; compare parameter count of _alloc to 1 (integer)
  je func$_alloc$parameterCountCheck$continuation                ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_alloc$parameterCountCheck$continuation:                  ; end of parameter count check
  ; Check type of parameter 0, size (expecting Integer)
  mov rsi, qword ptr [rbp + 038h]                                ; store size's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that size is Integer
  jc func$_alloc$size$TypeMatch                                  ; skip next block if the type matches
    ; Error handling block for size
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_alloc$size$TypeMatch:                                    ; after block
  ; Line 37: Integer pointer = __heapAlloc(_heapHandle, 0, size);
  mov r10, qword ptr _heapHandleValue                            ; make a copy of _heapHandle's value in case it changes before we use it
  mov rbx, qword ptr _heapHandleType                             ; make a copy of _heapHandle's type in case it changes before we use it
  ; Call __heapAlloc with 3 arguments
  push qword ptr [rbp + 040h]                                    ; value of argument #3 (size)
  push qword ptr [rbp + 038h]                                    ; type of argument #3
  push 000h                                                      ; value of argument #2 (0)
  push 01fh                                                      ; type of argument #2 (Integer'31)
  push r10                                                       ; value of argument #1 (copy of _heapHandle)
  push rbx                                                       ; type of argument #1
  lea r12, qword ptr [rsp + 058h]                                ; load address of return value's value
  push r12                                                       ; internal argument 6: pointer to return value slot's value
  lea r12, qword ptr [rsp + 058h]                                ; load address of return value's type
  push r12                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 003h                                                  ; internal argument 1: number of actual arguments
  call func$__heapAlloc                                          ; jump to subroutine
  add rsp, 060h                                                  ; release shadow space and arguments (result in stack pointer)
  cmp qword ptr [rsp + 020h], 000h                               ; compare type of __heapAlloc return value to <sentinel>
  jne func$_alloc$HeapallocReturnValue$TypeMatch                 ; skip next block if __heapAlloc return value is not sentinel
    ; Error handling block for __heapAlloc return value
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_alloc$HeapallocReturnValue$TypeMatch:                    ; after block
  mov r10, qword ptr [rsp + 028h]                                ; value initialization of variable declaration for pointer variable (__heapAlloc return value)
  mov rbx, qword ptr [rsp + 020h]                                ; type initialization of variable declaration for pointer variable
  ; Line 38: if (pointer > 0) { ...
  mov rsi, r10                                                   ; make a copy of pointer's value in case it changes before we use it
  mov rax, rbx                                                   ; make a copy of pointer's type in case it changes before we use it
  cmp rax, 000h                                                  ; compare type of copy of pointer to <sentinel>
  jne func$_alloc$pointer$TypeMatch                              ; skip next block if copy of pointer is not sentinel
    ; Error handling block for pointer
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 058h], r10                              ; move pointer variable's value out of r10
    mov qword ptr [rsp + 050h], rax                              ; move copy of pointer's type out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 010h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
  func$_alloc$pointer$TypeMatch:                                 ; after block
  mov qword ptr [rsp + 028h], rbx                                ; move pointer variable's type out of rbx
  xor rbx, rbx                                                   ; clear > operator result
  cmp rsi, 000h                                                  ; compare copy of pointer with 0
  setg bl                                                        ; store result in > operator result
  cmp rbx, 000h                                                  ; compare > operator result to false
  je func$_alloc$if$continuation                                 ; pointer > 0
    ; Line 39: _blockCount += 1;
    mov rsi, qword ptr _blockCountValue                          ; make a copy of _blockCount's value in case it changes before we use it
    mov rax, qword ptr _blockCountType                           ; make a copy of _blockCount's type in case it changes before we use it
    cmp rax, 000h                                                ; compare type of copy of _blockCount to <sentinel>
    jne func$_alloc$Alloc$if$copyOfBlockcount$TypeMatch          ; skip next block if copy of _blockCount is not sentinel
      ; Error handling block for copy of _blockCount
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rdi, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rdi                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r12, qword ptr [rsp + 030h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 030h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 050h], r10                            ; move pointer variable's value out of r10
      mov qword ptr [rsp + 048h], rax                            ; move copy of _blockCount's type out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r13, qword ptr [rsp + 030h]                            ; load address of return value's value
      push r13                                                   ; internal argument 6: pointer to return value slot's value
      lea r13, qword ptr [rsp + 030h]                            ; load address of return value's type
      push r13                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 008h]                            ; restoring slots to previous scope state
      mov r10, qword ptr [rsp + 010h]                            ; restoring slots to previous scope state
    func$_alloc$Alloc$if$copyOfBlockcount$TypeMatch:             ; after block
    mov rbx, rsi                                                 ; assign value of copy of _blockCount to value of += operator result
    add rbx, 001h                                                ; += operator
    mov qword ptr _blockCountValue, rbx                          ; store value
    mov qword ptr _blockCountType, 01fh                          ; store type (Integer'31)
    ; Line 40: return pointer;
    mov r12, r10                                                 ; make a copy of pointer's value in case it changes before we use it
    mov r13, qword ptr [rsp + 028h]                              ; make a copy of pointer's type in case it changes before we use it
    cmp r13, 000h                                                ; compare type of copy of pointer to <sentinel>
    jne func$_alloc$Alloc$if$AllocReturnValue$TypeMatch          ; skip next block if copy of pointer is not sentinel
      ; Error handling block for _alloc return value
      int 3                                                      ; call debugger
      ;  - print(returnValueTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r14, offset returnValueTypeCheckFailureMessage         ; reading returnValueTypeCheckFailureMessage for push
      push r14                                                   ; value of argument #1 (returnValueTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r15, qword ptr [rsp + 030h]                            ; load address of return value's value
      push r15                                                   ; internal argument 6: pointer to return value slot's value
      lea r15, qword ptr [rsp + 030h]                            ; load address of return value's type
      push r15                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 050h], r10                            ; move pointer variable's value out of r10
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r10, qword ptr [rsp + 030h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 030h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov r10, qword ptr [rsp + 010h]                            ; restoring slots to previous scope state
    func$_alloc$Alloc$if$AllocReturnValue$TypeMatch:             ; after block
    mov rbx, qword ptr [rbp + 030h]                              ; get pointer to return value of _alloc into register to dereference it
    mov qword ptr [rbx], r12                                     ; _alloc return value
    mov rsi, qword ptr [rbp + 028h]                              ; get pointer to return value type of _alloc into register to dereference it
    mov qword ptr [rsi], r13                                     ; type of _alloc return value
    jmp func$_alloc$epilog                                       ; return
  func$_alloc$if$continuation:                                   ; end of if
  ; Line 42: _garbageCollector();
  mov rax, qword ptr _garbageCollectorValue                      ; make a copy of _garbageCollector's value in case it changes before we use it
  mov rdi, qword ptr _garbageCollectorType                       ; make a copy of _garbageCollector's type in case it changes before we use it
  cmp rdi, 000h                                                  ; compare type of copy of _garbageCollector to <sentinel>
  jne func$_alloc$copyOfGarbagecollector$TypeMatch               ; skip next block if copy of _garbageCollector is not sentinel
    ; Error handling block for copy of _garbageCollector
    int 3                                                        ; call debugger
    ;  - print(subroutineCallTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r12, offset subroutineCallTypeCheckFailureMessage        ; reading subroutineCallTypeCheckFailureMessage for push
    push r12                                                     ; value of argument #1 (subroutineCallTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r13, qword ptr [rsp + 030h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 030h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 050h], r10                              ; move pointer variable's value out of r10
    mov qword ptr [rsp + 048h], rax                              ; move copy of _garbageCollector's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r14, qword ptr [rsp + 030h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 030h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 008h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 010h]                              ; restoring slots to previous scope state
  func$_alloc$copyOfGarbagecollector$TypeMatch:                  ; after block
  ; Call copy of _garbageCollector with 0 arguments
  lea r15, qword ptr [rsp + 020h]                                ; load address of return value's value
  push r15                                                       ; internal argument 6: pointer to return value slot's value
  lea r15, qword ptr [rsp + 020h]                                ; load address of return value's type
  push r15                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 000h                                                  ; internal argument 1: number of actual arguments
  mov qword ptr [rsp + 040h], r10                                ; move pointer variable's value out of r10
  mov qword ptr [rsp + 038h], rax                                ; move copy of _garbageCollector's value out of rax
  call qword ptr [rsp + 038h]                                    ; jump to subroutine
  add rsp, 030h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 43: pointer = __heapAlloc(_heapHandle, 0, size);
  mov r10, qword ptr _heapHandleValue                            ; make a copy of _heapHandle's value in case it changes before we use it
  mov rbx, qword ptr _heapHandleType                             ; make a copy of _heapHandle's type in case it changes before we use it
  ; Call __heapAlloc with 3 arguments
  push qword ptr [rbp + 040h]                                    ; value of argument #3 (size)
  push qword ptr [rbp + 038h]                                    ; type of argument #3
  push 000h                                                      ; value of argument #2 (0)
  push 01fh                                                      ; type of argument #2 (Integer'31)
  push r10                                                       ; value of argument #1 (copy of _heapHandle)
  push rbx                                                       ; type of argument #1
  lea r12, qword ptr [rsp + 050h]                                ; load address of return value's value
  push r12                                                       ; internal argument 6: pointer to return value slot's value
  lea r12, qword ptr [rsp + 050h]                                ; load address of return value's type
  push r12                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 003h                                                  ; internal argument 1: number of actual arguments
  call func$__heapAlloc                                          ; jump to subroutine
  add rsp, 060h                                                  ; release shadow space and arguments (result in stack pointer)
  cmp qword ptr [rsp + 018h], 000h                               ; compare type of __heapAlloc return value to <sentinel>
  jne func$_alloc$HeapallocReturnValue$TypeMatch$1               ; skip next block if __heapAlloc return value is not sentinel
    ; Error handling block for __heapAlloc return value
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_alloc$HeapallocReturnValue$TypeMatch$1:                  ; after block
  mov r11, qword ptr [rsp + 020h]                                ; indirect through r11 because operand pair (stack operand #4, stack operand #2) is not allowed with mov
  mov qword ptr [rsp + 010h], r11                                ; store value
  mov r11, qword ptr [rsp + 018h]                                ; indirect through r11 because operand pair (stack operand #1, stack operand #3) is not allowed with mov
  mov qword ptr [rsp + 028h], r11                                ; store type
  ; Line 44: if (pointer > 0) { ...
  mov r10, qword ptr [rsp + 010h]                                ; make a copy of pointer's value in case it changes before we use it
  mov rbx, qword ptr [rsp + 028h]                                ; make a copy of pointer's type in case it changes before we use it
  cmp rbx, 000h                                                  ; compare type of copy of pointer to <sentinel>
  jne func$_alloc$pointer$TypeMatch$1                            ; skip next block if copy of pointer is not sentinel
    ; Error handling block for pointer
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rsi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rsi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 030h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 030h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 048h], r10                              ; move copy of pointer's value out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rdi, qword ptr [rsp + 030h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 030h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 008h]                              ; restoring slots to previous scope state
  func$_alloc$pointer$TypeMatch$1:                               ; after block
  xor r15, r15                                                   ; clear > operator result
  cmp r10, 000h                                                  ; compare copy of pointer with 0
  setg r15b                                                      ; store result in > operator result
  cmp r15, 000h                                                  ; compare > operator result to false
  je func$_alloc$if$continuation$1                               ; pointer > 0
    ; Line 45: _blockCount += 1;
    mov r10, qword ptr _blockCountValue                          ; make a copy of _blockCount's value in case it changes before we use it
    mov rbx, qword ptr _blockCountType                           ; make a copy of _blockCount's type in case it changes before we use it
    cmp rbx, 000h                                                ; compare type of copy of _blockCount to <sentinel>
    jne func$_alloc$Alloc$if$1$copyOfBlockcount$TypeMatch        ; skip next block if copy of _blockCount is not sentinel
      ; Error handling block for copy of _blockCount
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rsi, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rsi                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rax, qword ptr [rsp + 030h]                            ; load address of return value's value
      push rax                                                   ; internal argument 6: pointer to return value slot's value
      lea rax, qword ptr [rsp + 030h]                            ; load address of return value's type
      push rax                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 048h], r10                            ; move copy of _blockCount's value out of r10
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea rdi, qword ptr [rsp + 030h]                            ; load address of return value's value
      push rdi                                                   ; internal argument 6: pointer to return value slot's value
      lea rdi, qword ptr [rsp + 030h]                            ; load address of return value's type
      push rdi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov r10, qword ptr [rsp + 008h]                            ; restoring slots to previous scope state
    func$_alloc$Alloc$if$1$copyOfBlockcount$TypeMatch:           ; after block
    mov r15, r10                                                 ; assign value of copy of _blockCount to value of += operator result
    add r15, 001h                                                ; += operator
    mov qword ptr _blockCountValue, r15                          ; store value
    mov qword ptr _blockCountType, 01fh                          ; store type (Integer'31)
    ; Line 46: return pointer;
    mov rax, qword ptr [rsp + 010h]                              ; make a copy of pointer's value in case it changes before we use it
    mov rdi, qword ptr [rsp + 028h]                              ; make a copy of pointer's type in case it changes before we use it
    cmp rdi, 000h                                                ; compare type of copy of pointer to <sentinel>
    jne func$_alloc$Alloc$if$1$AllocReturnValue$TypeMatch        ; skip next block if copy of pointer is not sentinel
      ; Error handling block for _alloc return value
      int 3                                                      ; call debugger
      ;  - print(returnValueTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r12, offset returnValueTypeCheckFailureMessage         ; reading returnValueTypeCheckFailureMessage for push
      push r12                                                   ; value of argument #1 (returnValueTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r13, qword ptr [rsp + 030h]                            ; load address of return value's value
      push r13                                                   ; internal argument 6: pointer to return value slot's value
      lea r13, qword ptr [rsp + 030h]                            ; load address of return value's type
      push r13                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 048h], rax                            ; move copy of pointer's value out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r14, qword ptr [rsp + 030h]                            ; load address of return value's value
      push r14                                                   ; internal argument 6: pointer to return value slot's value
      lea r14, qword ptr [rsp + 030h]                            ; load address of return value's type
      push r14                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 008h]                            ; restoring slots to previous scope state
    func$_alloc$Alloc$if$1$AllocReturnValue$TypeMatch:           ; after block
    mov r15, qword ptr [rbp + 030h]                              ; get pointer to return value of _alloc into register to dereference it
    mov qword ptr [r15], rax                                     ; _alloc return value
    mov r10, qword ptr [rbp + 028h]                              ; get pointer to return value type of _alloc into register to dereference it
    mov qword ptr [r10], rdi                                     ; type of _alloc return value
    jmp func$_alloc$epilog                                       ; return
  func$_alloc$if$continuation$1:                                 ; end of if
  ; Line 48: println('Out of memory.');
  mov rbx, qword ptr printlnValue                                ; make a copy of println's value in case it changes before we use it
  mov rsi, qword ptr printlnType                                 ; make a copy of println's type in case it changes before we use it
  cmp rsi, 000h                                                  ; compare type of copy of println to <sentinel>
  jne func$_alloc$copyOfPrintln$TypeMatch                        ; skip next block if copy of println is not sentinel
    ; Error handling block for copy of println
    int 3                                                        ; call debugger
    ;  - print(subroutineCallTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rax, offset subroutineCallTypeCheckFailureMessage        ; reading subroutineCallTypeCheckFailureMessage for push
    push rax                                                     ; value of argument #1 (subroutineCallTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rdi, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r12, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_alloc$copyOfPrintln$TypeMatch:                           ; after block
  ; Call copy of println with 1 arguments
  mov r13, offset string                                         ; reading string for push
  push r13                                                       ; value of argument #1 (string)
  push 020h                                                      ; type of argument #1 (String'32)
  lea r14, qword ptr [rsp + 038h]                                ; load address of return value's value
  push r14                                                       ; internal argument 6: pointer to return value slot's value
  lea r14, qword ptr [rsp + 038h]                                ; load address of return value's type
  push r14                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call rbx                                                       ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 49: exit(1);
  ; Call exit with 1 arguments
  push 001h                                                      ; value of argument #1 (1)
  push 01fh                                                      ; type of argument #1 (Integer'31)
  lea rsi, qword ptr [rsp + 038h]                                ; load address of return value's value
  push rsi                                                       ; internal argument 6: pointer to return value slot's value
  lea rsi, qword ptr [rsp + 038h]                                ; load address of return value's type
  push rsi                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call func$exit                                                 ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Implicit return from _alloc
  mov rax, 01dh                                                  ; store null's type in testByte value slot
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that _alloc return value is Integer
  jc func$_alloc$AllocReturnValue$TypeMatch                      ; skip next block if the type matches
    ; Error handling block for _alloc return value
    int 3                                                        ; call debugger
    ;  - print(returnValueTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset returnValueTypeCheckFailureMessage           ; reading returnValueTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (returnValueTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_alloc$AllocReturnValue$TypeMatch:                        ; after block
  mov r10, qword ptr [rbp + 030h]                                ; get pointer to return value of _alloc into register to dereference it
  mov qword ptr [r10], 000h                                      ; _alloc return value
  mov rbx, qword ptr [rbp + 028h]                                ; get pointer to return value type of _alloc into register to dereference it
  mov qword ptr [rbx], 01dh                                      ; type of _alloc return value (Null'29)
  func$_alloc$epilog: 
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 038h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; __heapFree
dq func$__heapFree$annotation
func$__heapFree:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 020h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 060h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 003h                                                  ; compare parameter count of __heapFree to 3 (integer)
  je func$__heapFree$parameterCountCheck$continuation            ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 020h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 020h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$__heapFree$parameterCountCheck$continuation:              ; end of parameter count check
  ; Check type of parameter 0, hHeap (expecting Integer)
  mov rsi, qword ptr [rbp + 038h]                                ; store hHeap's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that hHeap is Integer
  jc func$__heapFree$hheap$TypeMatch                             ; skip next block if the type matches
    ; Error handling block for hHeap
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 020h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 020h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$__heapFree$hheap$TypeMatch:                               ; after block
  ; Check type of parameter 1, dwFlags (expecting Integer)
  mov r10, qword ptr [rbp + 048h]                                ; store dwFlags's type in testByte value slot
  mov rax, r10                                                   ; move testByte to testByte
  mov rbx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rbx                                                        ; adjust to the relative start of that type's entry in the type table
  mov rsi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rsi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that dwFlags is Integer
  jc func$__heapFree$dwflags$TypeMatch                           ; skip next block if the type matches
    ; Error handling block for dwFlags
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 020h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 020h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$__heapFree$dwflags$TypeMatch:                             ; after block
  ; Check type of parameter 2, lpMem (expecting Integer)
  mov r14, qword ptr [rbp + 058h]                                ; store lpMem's type in testByte value slot
  mov rax, r14                                                   ; move testByte to testByte
  mov r15, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r15                                                        ; adjust to the relative start of that type's entry in the type table
  mov r10, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r10                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that lpMem is Integer
  jc func$__heapFree$lpmem$TypeMatch                             ; skip next block if the type matches
    ; Error handling block for lpMem
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rbx, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push rbx                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rsi, qword ptr [rsp + 020h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rdi, qword ptr [rsp + 020h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$__heapFree$lpmem$TypeMatch:                               ; after block
  ; Calling HeapFree
  sub rsp, 020h                                                  ; allocate shadow space
  mov r8, qword ptr [rbp + 060h]                                 ; argument #3
  mov rdx, qword ptr [rbp + 050h]                                ; argument #2
  mov rcx, qword ptr [rbp + 040h]                                ; argument #1
  call HeapFree                                                  ; calls HeapFree from kernel32.lib
  add rsp, 020h                                                  ; release shadow space and arguments if there were more than four (result in stack pointer)
  mov r15, qword ptr [rbp + 030h]                                ; get pointer to return value of __heapFree into register to dereference it
  mov qword ptr [r15], rax                                       ; __heapFree return value
  mov r10, qword ptr [rbp + 028h]                                ; get pointer to return value type of __heapFree into register to dereference it
  mov qword ptr [r10], 01fh                                      ; type of __heapFree return value (Integer'31)
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 020h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; _free
dq func$_free$annotation
func$_free:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 028h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 068h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 001h                                                  ; compare parameter count of _free to 1 (integer)
  je func$_free$parameterCountCheck$continuation                 ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 028h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 028h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 028h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 028h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_free$parameterCountCheck$continuation:                   ; end of parameter count check
  ; Check type of parameter 0, pointer (expecting Integer)
  mov rsi, qword ptr [rbp + 038h]                                ; store pointer's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that pointer is Integer
  jc func$_free$pointer$TypeMatch                                ; skip next block if the type matches
    ; Error handling block for pointer
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_free$pointer$TypeMatch:                                  ; after block
  ; Line 57: _blockCount -= 1;
  mov r10, qword ptr _blockCountValue                            ; make a copy of _blockCount's value in case it changes before we use it
  mov rbx, qword ptr _blockCountType                             ; make a copy of _blockCount's type in case it changes before we use it
  cmp rbx, 000h                                                  ; compare type of copy of _blockCount to <sentinel>
  jne func$_free$copyOfBlockcount$TypeMatch                      ; skip next block if copy of _blockCount is not sentinel
    ; Error handling block for copy of _blockCount
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rsi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rsi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 028h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 028h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 048h], r10                              ; move copy of _blockCount's value out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rdi, qword ptr [rsp + 028h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 028h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 008h]                              ; restoring slots to previous scope state
  func$_free$copyOfBlockcount$TypeMatch:                         ; after block
  mov r15, r10                                                   ; assign value of copy of _blockCount to value of -= operator result
  sub r15, 001h                                                  ; -= operator
  mov qword ptr _blockCountValue, r15                            ; store value
  mov qword ptr _blockCountType, 01fh                            ; store type (Integer'31)
  ; Line 58: if (__heapFree(_heapHandle, 0, pointer) == 0) { ...
  mov rax, qword ptr _heapHandleValue                            ; make a copy of _heapHandle's value in case it changes before we use it
  mov rdi, qword ptr _heapHandleType                             ; make a copy of _heapHandle's type in case it changes before we use it
  ; Call __heapFree with 3 arguments
  push qword ptr [rbp + 040h]                                    ; value of argument #3 (pointer)
  push qword ptr [rbp + 038h]                                    ; type of argument #3
  push 000h                                                      ; value of argument #2 (0)
  push 01fh                                                      ; type of argument #2 (Integer'31)
  push rax                                                       ; value of argument #1 (copy of _heapHandle)
  push rdi                                                       ; type of argument #1
  lea r15, qword ptr [rsp + 048h]                                ; load address of return value's value
  push r15                                                       ; internal argument 6: pointer to return value slot's value
  lea r15, qword ptr [rsp + 048h]                                ; load address of return value's type
  push r15                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 003h                                                  ; internal argument 1: number of actual arguments
  call func$__heapFree                                           ; jump to subroutine
  add rsp, 060h                                                  ; release shadow space and arguments (result in stack pointer)
  xor r10, r10                                                   ; zero value result of == (testing __heapFree return value and 0) to put the boolean in
  cmp qword ptr [rsp + 018h], 000h                               ; values equal?
  sete r10b                                                      ; put result in value result of == (testing __heapFree return value and 0)
  mov rbx, 01eh                                                  ; value result of == (testing __heapFree return value and 0) is a Boolean'30
  xor rsi, rsi                                                   ; zero type result of == (testing __heapFree return value and 0) to put the boolean in
  cmp qword ptr [rsp + 010h], 01fh                               ; types equal?
  sete sil                                                       ; put result in type result of == (testing __heapFree return value and 0)
  mov rax, 01eh                                                  ; type result of == (testing __heapFree return value and 0) is a Boolean'30
  mov rdi, r10                                                   ; assign value of value result of == (testing __heapFree return value and 0) to value of == operator result
  and rdi, rsi                                                   ; && type temp and value temp
  cmp rdi, 000h                                                  ; compare == operator result to false
  je func$_free$if$continuation                                  ; __heapFree(_heapHandle, 0, pointer) == 0
    ; Line 59: println('failed to free pointer, error code: ', __getLastError()...
    mov r12, qword ptr printlnValue                              ; make a copy of println's value in case it changes before we use it
    mov r13, qword ptr printlnType                               ; make a copy of println's type in case it changes before we use it
    ; Call __getLastError with 0 arguments
    lea rbx, qword ptr [rsp + 018h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 018h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 000h                                                ; internal argument 1: number of actual arguments
    call func$__getLastError                                     ; jump to subroutine
    add rsp, 030h                                                ; release shadow space and arguments (result in stack pointer)
    cmp r13, 000h                                                ; compare type of copy of println to <sentinel>
    jne func$_free$Free$if$copyOfPrintln$TypeMatch               ; skip next block if copy of println is not sentinel
      ; Error handling block for copy of println
      int 3                                                      ; call debugger
      ;  - print(subroutineCallTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rsi, offset subroutineCallTypeCheckFailureMessage      ; reading subroutineCallTypeCheckFailureMessage for push
      push rsi                                                   ; value of argument #1 (subroutineCallTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rax, qword ptr [rsp + 018h]                            ; load address of return value's value
      push rax                                                   ; internal argument 6: pointer to return value slot's value
      lea rax, qword ptr [rsp + 018h]                            ; load address of return value's type
      push rax                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea rdi, qword ptr [rsp + 018h]                            ; load address of return value's value
      push rdi                                                   ; internal argument 6: pointer to return value slot's value
      lea rdi, qword ptr [rsp + 018h]                            ; load address of return value's type
      push rdi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
    func$_free$Free$if$copyOfPrintln$TypeMatch:                  ; after block
    ; Call copy of println with 2 arguments
    push qword ptr [rsp + 018h]                                  ; value of argument #2 (__getLastError return value)
    push qword ptr [rsp + 018h]                                  ; type of argument #2
    mov qword ptr [rsp + 028h], r12                              ; move copy of println's value out of r12
    mov r12, offset string$1                                     ; reading string for push
    push r12                                                     ; value of argument #1 (string)
    push 020h                                                    ; type of argument #1 (String'32)
    mov qword ptr [rsp + 028h], r13                              ; move copy of println's type out of r13
    lea r13, qword ptr [rsp + 030h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 002h                                                ; internal argument 1: number of actual arguments
    call qword ptr [rsp + 068h]                                  ; jump to subroutine
    add rsp, 050h                                                ; release shadow space and arguments (result in stack pointer)
    ; Line 60: exit(1);
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1)
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 028h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 028h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_free$if$continuation:                                    ; end of if
  ; Implicit return from _free
  mov r12, qword ptr [rbp + 030h]                                ; get pointer to return value of _free into register to dereference it
  mov qword ptr [r12], 000h                                      ; _free return value
  mov r13, qword ptr [rbp + 028h]                                ; get pointer to return value type of _free into register to dereference it
  mov qword ptr [r13], 01dh                                      ; type of _free return value (Null'29)
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 028h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; _moveBytes
dq func$_moveBytes$annotation
func$_moveBytes:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 080h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 0c0h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 003h                                                  ; compare parameter count of _moveBytes to 3 (integer)
  je func$_moveBytes$parameterCountCheck$continuation            ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 080h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 080h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 080h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 080h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_moveBytes$parameterCountCheck$continuation:              ; end of parameter count check
  ; Check type of parameter 0, from (expecting Integer)
  mov rsi, qword ptr [rbp + 038h]                                ; store from's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that from is Integer
  jc func$_moveBytes$from$TypeMatch                              ; skip next block if the type matches
    ; Error handling block for from
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 080h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 080h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 080h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 080h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_moveBytes$from$TypeMatch:                                ; after block
  ; Check type of parameter 1, to (expecting Integer)
  mov r10, qword ptr [rbp + 048h]                                ; store to's type in testByte value slot
  mov rax, r10                                                   ; move testByte to testByte
  mov rbx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rbx                                                        ; adjust to the relative start of that type's entry in the type table
  mov rsi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rsi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that to is Integer
  jc func$_moveBytes$to$TypeMatch                                ; skip next block if the type matches
    ; Error handling block for to
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 080h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 080h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 080h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 080h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_moveBytes$to$TypeMatch:                                  ; after block
  ; Check type of parameter 2, length (expecting Integer)
  mov r14, qword ptr [rbp + 058h]                                ; store length's type in testByte value slot
  mov rax, r14                                                   ; move testByte to testByte
  mov r15, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r15                                                        ; adjust to the relative start of that type's entry in the type table
  mov r10, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r10                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that length is Integer
  jc func$_moveBytes$length$TypeMatch                            ; skip next block if the type matches
    ; Error handling block for length
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rbx, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push rbx                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rsi, qword ptr [rsp + 080h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 080h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rdi, qword ptr [rsp + 080h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 080h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_moveBytes$length$TypeMatch:                              ; after block
  ; Line 67: assert(length > 0, '_moveBytes expects positive number of bytes ...
  cmp qword ptr [rbp + 058h], 000h                               ; compare type of length to <sentinel>
  jne func$_moveBytes$length$TypeMatch$1                         ; skip next block if length is not sentinel
    ; Error handling block for length
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r12, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r12                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r13, qword ptr [rsp + 080h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 080h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r14, qword ptr [rsp + 080h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 080h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_moveBytes$length$TypeMatch$1:                            ; after block
  xor rbx, rbx                                                   ; clear > operator result
  cmp qword ptr [rbp + 060h], 000h                               ; compare length with 0
  setg bl                                                        ; store result in > operator result
  ; Call assert with 2 arguments
  mov r13, offset string$2                                       ; reading string for push
  push r13                                                       ; value of argument #2 (string)
  push 020h                                                      ; type of argument #2 (String'32)
  push rbx                                                       ; value of argument #1 (> operator result)
  push 01eh                                                      ; type of argument #1 (Boolean'30)
  lea r14, qword ptr [rsp + 090h]                                ; load address of return value's value
  push r14                                                       ; internal argument 6: pointer to return value slot's value
  lea r14, qword ptr [rsp + 090h]                                ; load address of return value's type
  push r14                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 002h                                                  ; internal argument 1: number of actual arguments
  call func$assert                                               ; jump to subroutine
  add rsp, 050h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 68: Integer fromCursor = from;
  cmp qword ptr [rbp + 038h], 000h                               ; compare type of from to <sentinel>
  jne func$_moveBytes$from$TypeMatch$1                           ; skip next block if from is not sentinel
    ; Error handling block for from
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rax, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push rax                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r15, qword ptr [rsp + 080h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 080h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 080h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 080h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_moveBytes$from$TypeMatch$1:                              ; after block
  mov rbx, qword ptr [rbp + 040h]                                ; value initialization of variable declaration for fromCursor variable (from)
  mov rsi, qword ptr [rbp + 038h]                                ; type initialization of variable declaration for fromCursor variable
  ; Line 69: Integer toCursor = to;
  cmp qword ptr [rbp + 048h], 000h                               ; compare type of to to <sentinel>
  jne func$_moveBytes$to$TypeMatch$1                             ; skip next block if to is not sentinel
    ; Error handling block for to
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 080h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 080h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 080h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 080h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_moveBytes$to$TypeMatch$1:                                ; after block
  mov r14, qword ptr [rbp + 050h]                                ; value initialization of variable declaration for toCursor variable (to)
  mov rax, qword ptr [rbp + 048h]                                ; type initialization of variable declaration for toCursor variable
  ; Line 70: Integer end = from + length / 8 * 8;
  cmp qword ptr [rbp + 058h], 000h                               ; compare type of length to <sentinel>
  jne func$_moveBytes$length$TypeMatch$2                         ; skip next block if length is not sentinel
    ; Error handling block for length
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r15, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r15                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r10, qword ptr [rsp + 080h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 080h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 0a0h], rax                              ; move toCursor variable's type out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 078h], rbx                              ; move fromCursor variable's value out of rbx
    lea rbx, qword ptr [rsp + 080h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 070h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 060h]                              ; restoring slots to previous scope state
    mov rbx, qword ptr [rsp + 068h]                              ; restoring slots to previous scope state
  func$_moveBytes$length$TypeMatch$2:                            ; after block
  mov qword ptr [rsp + 070h], rax                                ; move toCursor variable's type out of rax
  mov rax, qword ptr [rbp + 060h]                                ; assign value of length to value of / operator result
  cqo                                                            ; zero-extend dividend
  mov r13, 008h                                                  ; read operand of div (8) 
  idiv r13                                                       ; compute (length) / (8) (result, / operator result, is in rax)
  imul r12, rax, 008h                                            ; compute (/ operator result) * (8) (result in * operator result)
  cmp qword ptr [rbp + 038h], 000h                               ; compare type of from to <sentinel>
  jne func$_moveBytes$from$TypeMatch$2                           ; skip next block if from is not sentinel
    ; Error handling block for from
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rax, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rax                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r13, qword ptr [rsp + 078h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 078h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 070h], r14                              ; move toCursor variable's value out of r14
    lea r14, qword ptr [rsp + 078h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 070h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r14, qword ptr [rsp + 060h]                              ; restoring slots to previous scope state
  func$_moveBytes$from$TypeMatch$2:                              ; after block
  mov qword ptr [rsp + 068h], rsi                                ; move fromCursor variable's type out of rsi
  mov rsi, qword ptr [rbp + 040h]                                ; assign value of from to value of + operator result
  add rsi, r12                                                   ; compute (from) + (* operator result) (result in + operator result)
  mov r13, rsi                                                   ; value initialization of variable declaration for end variable (+ operator result)
  mov qword ptr [rsp + 060h], r14                                ; move toCursor variable's value out of r14
  mov r14, 01fh                                                  ; type initialization of variable declaration for end variable (Integer'31)
  func$_moveBytes$while$top:                                     ; top of while
    mov r15, rbx                                                 ; make a copy of fromCursor's value in case it changes before we use it
    mov r10, qword ptr [rsp + 068h]                              ; make a copy of fromCursor's type in case it changes before we use it
    mov qword ptr [rsp + 058h], rbx                              ; move fromCursor variable's value out of rbx
    mov rbx, r13                                                 ; make a copy of end's value in case it changes before we use it
    mov rsi, r14                                                 ; make a copy of end's type in case it changes before we use it
    cmp r10, 000h                                                ; compare type of copy of fromCursor to <sentinel>
    jne func$_moveBytes$while$fromcursor$TypeMatch               ; skip next block if copy of fromCursor is not sentinel
      ; Error handling block for fromCursor
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rdi, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rdi                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r12, qword ptr [rsp + 060h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 060h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 080h], r10                            ; move copy of fromCursor's type out of r10
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea rax, qword ptr [rsp + 060h]                            ; load address of return value's value
      push rax                                                   ; internal argument 6: pointer to return value slot's value
      lea rax, qword ptr [rsp + 060h]                            ; load address of return value's type
      push rax                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov r10, qword ptr [rsp + 040h]                            ; restoring slots to previous scope state
    func$_moveBytes$while$fromcursor$TypeMatch:                  ; after block
    cmp rsi, 000h                                                ; compare type of copy of end to <sentinel>
    jne func$_moveBytes$while$end$TypeMatch                      ; skip next block if copy of end is not sentinel
      ; Error handling block for end
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov qword ptr [rsp + 050h], r13                            ; move end variable's value out of r13
      mov r13, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push r13                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      mov qword ptr [rsp + 050h], r14                            ; move end variable's type out of r14
      lea r14, qword ptr [rsp + 058h]                            ; load address of return value's value
      push r14                                                   ; internal argument 6: pointer to return value slot's value
      lea r14, qword ptr [rsp + 050h]                            ; load address of return value's type
      push r14                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 070h], r10                            ; move copy of fromCursor's type out of r10
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      mov qword ptr [rsp + 048h], r15                            ; move copy of fromCursor's value out of r15
      lea r15, qword ptr [rsp + 058h]                            ; load address of return value's value
      push r15                                                   ; internal argument 6: pointer to return value slot's value
      lea r15, qword ptr [rsp + 040h]                            ; load address of return value's type
      push r15                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov r14, qword ptr [rsp + 040h]                            ; restoring slots to previous scope state
      mov r15, qword ptr [rsp + 038h]                            ; restoring slots to previous scope state
      mov r10, qword ptr [rsp + 030h]                            ; restoring slots to previous scope state
      mov r13, qword ptr [rsp + 050h]                            ; restoring slots to previous scope state
    func$_moveBytes$while$end$TypeMatch:                         ; after block
    xor r10, r10                                                 ; clear < operator result
    cmp r15, rbx                                                 ; compare copy of fromCursor with copy of end
    setl r10b                                                    ; store result in < operator result
    cmp r10, 000h                                                ; compare < operator result to false
    jne func$_moveBytes$while$body                               ; while condition
    mov rbx, qword ptr [rsp + 058h]                              ; restoring slots to previous scope state
    jmp func$_moveBytes$while$bottom                             ; break out of while
    func$_moveBytes$while$body:                                  ; start of while
    ; Line 75: Integer value = __readFromAddress(fromCursor);
    mov rbx, qword ptr [rsp + 058h]                              ; make a copy of fromCursor's value in case it changes before we use it
    mov rsi, qword ptr [rsp + 068h]                              ; make a copy of fromCursor's type in case it changes before we use it
    ; Call __readFromAddress with 1 arguments
    mov qword ptr [rsp + 050h], r13                              ; move end variable's value out of r13
    mov r13, qword ptr [rbx]                                     ; dereference first argument of __readFromAddress
    mov rbx, r13                                                 ; value initialization of variable declaration for value variable (dereferenced copy of fromCursor)
    mov rsi, 01fh                                                ; type initialization of variable declaration for value variable (Integer'31)
    ; Line 76: __writeToAddress(toCursor, value);
    mov rdi, qword ptr [rsp + 060h]                              ; make a copy of toCursor's value in case it changes before we use it
    mov r12, qword ptr [rsp + 070h]                              ; make a copy of toCursor's type in case it changes before we use it
    mov rax, rbx                                                 ; make a copy of value's value in case it changes before we use it
    mov r13, rsi                                                 ; make a copy of value's type in case it changes before we use it
    ; Call __writeToAddress with 2 arguments
    mov qword ptr [rdi], rax                                     ; __writeToAddress
    ; Line 77: fromCursor += 8;
    mov rbx, qword ptr [rsp + 058h]                              ; make a copy of fromCursor's value in case it changes before we use it
    mov rsi, qword ptr [rsp + 068h]                              ; make a copy of fromCursor's type in case it changes before we use it
    cmp rsi, 000h                                                ; compare type of copy of fromCursor to <sentinel>
    jne func$_moveBytes$while$copyOfFromcursor$TypeMatch         ; skip next block if copy of fromCursor is not sentinel
      ; Error handling block for copy of fromCursor
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rdi, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rdi                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r12, qword ptr [rsp + 058h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 058h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea rax, qword ptr [rsp + 058h]                            ; load address of return value's value
      push rax                                                   ; internal argument 6: pointer to return value slot's value
      lea rax, qword ptr [rsp + 058h]                            ; load address of return value's type
      push rax                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
    func$_moveBytes$while$copyOfFromcursor$TypeMatch:            ; after block
    mov r10, rbx                                                 ; assign value of copy of fromCursor to value of += operator result
    add r10, 008h                                                ; += operator
    mov qword ptr [rsp + 058h], r10                              ; store value
    mov qword ptr [rsp + 068h], 01fh                             ; store type (Integer'31)
    ; Line 78: toCursor += 8;
    mov r12, qword ptr [rsp + 060h]                              ; make a copy of toCursor's value in case it changes before we use it
    mov rax, qword ptr [rsp + 070h]                              ; make a copy of toCursor's type in case it changes before we use it
    cmp rax, 000h                                                ; compare type of copy of toCursor to <sentinel>
    jne func$_moveBytes$while$copyOfTocursor$TypeMatch           ; skip next block if copy of toCursor is not sentinel
      ; Error handling block for copy of toCursor
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r13, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push r13                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      mov qword ptr [rsp + 050h], r14                            ; move end variable's type out of r14
      lea r14, qword ptr [rsp + 058h]                            ; load address of return value's value
      push r14                                                   ; internal argument 6: pointer to return value slot's value
      lea r14, qword ptr [rsp + 050h]                            ; load address of return value's type
      push r14                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 070h], rax                            ; move copy of toCursor's type out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r15, qword ptr [rsp + 058h]                            ; load address of return value's value
      push r15                                                   ; internal argument 6: pointer to return value slot's value
      lea r15, qword ptr [rsp + 050h]                            ; load address of return value's type
      push r15                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 030h]                            ; restoring slots to previous scope state
      mov r14, qword ptr [rsp + 040h]                            ; restoring slots to previous scope state
    func$_moveBytes$while$copyOfTocursor$TypeMatch:              ; after block
    mov rdi, r12                                                 ; assign value of copy of toCursor to value of += operator result
    add rdi, 008h                                                ; += operator
    mov qword ptr [rsp + 060h], rdi                              ; store value
    mov qword ptr [rsp + 070h], 01fh                             ; store type (Integer'31)
    mov r13, qword ptr [rsp + 050h]                              ; restoring slots to previous scope state
    mov rbx, qword ptr [rsp + 058h]                              ; restoring slots to previous scope state
    jmp func$_moveBytes$while$top                                ; return to top of while
  func$_moveBytes$while$bottom:                                  ; bottom of while
  ; Line 80: end = from + length;
  cmp qword ptr [rbp + 038h], 000h                               ; compare type of from to <sentinel>
  jne func$_moveBytes$from$TypeMatch$3                           ; skip next block if from is not sentinel
    ; Error handling block for from
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 058h], r14                              ; move end variable's type out of r14
    mov r14, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r14                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r15, qword ptr [rsp + 060h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 060h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 060h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 060h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r14, qword ptr [rsp + 058h]                              ; restoring slots to previous scope state
  func$_moveBytes$from$TypeMatch$3:                              ; after block
  cmp qword ptr [rbp + 058h], 000h                               ; compare type of length to <sentinel>
  jne func$_moveBytes$length$TypeMatch$3                         ; skip next block if length is not sentinel
    ; Error handling block for length
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 058h], rbx                              ; move fromCursor variable's value out of rbx
    mov rbx, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rbx                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rsi, qword ptr [rsp + 060h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 060h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rdi, qword ptr [rsp + 060h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 060h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rbx, qword ptr [rsp + 058h]                              ; restoring slots to previous scope state
  func$_moveBytes$length$TypeMatch$3:                            ; after block
  mov r12, qword ptr [rbp + 040h]                                ; assign value of from to value of + operator result
  add r12, qword ptr [rbp + 060h]                                ; compute (from) + (length) (result in + operator result)
  mov r13, r12                                                   ; store value
  mov r14, 01fh                                                  ; store type (Integer'31)
  ; Line 82: if (fromCursor < end) { ...
  mov r15, rbx                                                   ; make a copy of fromCursor's value in case it changes before we use it
  mov r10, qword ptr [rsp + 068h]                                ; make a copy of fromCursor's type in case it changes before we use it
  mov qword ptr [rsp + 058h], rbx                                ; move fromCursor variable's value out of rbx
  mov rbx, r13                                                   ; make a copy of end's value in case it changes before we use it
  mov rsi, r14                                                   ; make a copy of end's type in case it changes before we use it
  cmp r10, 000h                                                  ; compare type of copy of fromCursor to <sentinel>
  jne func$_moveBytes$fromcursor$TypeMatch                       ; skip next block if copy of fromCursor is not sentinel
    ; Error handling block for fromCursor
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 060h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 060h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 080h], r10                              ; move copy of fromCursor's type out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rax, qword ptr [rsp + 060h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 060h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 040h]                              ; restoring slots to previous scope state
  func$_moveBytes$fromcursor$TypeMatch:                          ; after block
  cmp rsi, 000h                                                  ; compare type of copy of end to <sentinel>
  jne func$_moveBytes$end$TypeMatch                              ; skip next block if copy of end is not sentinel
    ; Error handling block for end
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 050h], r13                              ; move end variable's value out of r13
    mov r13, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    mov qword ptr [rsp + 050h], r14                              ; move end variable's type out of r14
    lea r14, qword ptr [rsp + 058h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 050h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 070h], r10                              ; move copy of fromCursor's type out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 048h], r15                              ; move copy of fromCursor's value out of r15
    lea r15, qword ptr [rsp + 058h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 040h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r14, qword ptr [rsp + 040h]                              ; restoring slots to previous scope state
    mov r15, qword ptr [rsp + 038h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 030h]                              ; restoring slots to previous scope state
    mov r13, qword ptr [rsp + 050h]                              ; restoring slots to previous scope state
  func$_moveBytes$end$TypeMatch:                                 ; after block
  xor r10, r10                                                   ; clear < operator result
  cmp r15, rbx                                                   ; compare copy of fromCursor with copy of end
  setl r10b                                                      ; store result in < operator result
  cmp r10, 000h                                                  ; compare < operator result to false
  je func$_moveBytes$if$continuation                             ; fromCursor < end
    ; Line 83: Integer newValue = __readFromAddress(fromCursor);
    mov rbx, qword ptr [rsp + 058h]                              ; make a copy of fromCursor's value in case it changes before we use it
    mov rsi, qword ptr [rsp + 068h]                              ; make a copy of fromCursor's type in case it changes before we use it
    ; Call __readFromAddress with 1 arguments
    mov qword ptr [rsp + 050h], r13                              ; move end variable's value out of r13
    mov r13, qword ptr [rbx]                                     ; dereference first argument of __readFromAddress
    mov rbx, r13                                                 ; value initialization of variable declaration for newValue variable (dereferenced copy of fromCursor)
    mov rsi, 01fh                                                ; type initialization of variable declaration for newValue variable (Integer'31)
    ; Line 84: Integer oldValue = __readFromAddress(toCursor);
    mov rdi, qword ptr [rsp + 060h]                              ; make a copy of toCursor's value in case it changes before we use it
    mov r12, qword ptr [rsp + 070h]                              ; make a copy of toCursor's type in case it changes before we use it
    ; Call __readFromAddress with 1 arguments
    mov r15, qword ptr [rdi]                                     ; dereference first argument of __readFromAddress
    mov rdi, r15                                                 ; value initialization of variable declaration for oldValue variable (dereferenced copy of toCursor)
    mov r12, 01fh                                                ; type initialization of variable declaration for oldValue variable (Integer'31)
    ; Line 85: Integer extraBytes = end - fromCursor;
    mov rax, qword ptr [rsp + 050h]                              ; make a copy of end's value in case it changes before we use it
    mov r13, r14                                                 ; make a copy of end's type in case it changes before we use it
    mov qword ptr [rsp + 048h], r14                              ; move end variable's type out of r14
    mov r14, qword ptr [rsp + 058h]                              ; make a copy of fromCursor's value in case it changes before we use it
    mov r15, qword ptr [rsp + 068h]                              ; make a copy of fromCursor's type in case it changes before we use it
    cmp r13, 000h                                                ; compare type of copy of end to <sentinel>
    jne func$_moveBytes$Movebytes$if$end$TypeMatch               ; skip next block if copy of end is not sentinel
      ; Error handling block for end
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r10, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push r10                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      mov qword ptr [rsp + 048h], rbx                            ; move newValue variable's value out of rbx
      lea rbx, qword ptr [rsp + 050h]                            ; load address of return value's value
      push rbx                                                   ; internal argument 6: pointer to return value slot's value
      lea rbx, qword ptr [rsp + 048h]                            ; load address of return value's type
      push rbx                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 068h], rax                            ; move copy of end's value out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      mov qword ptr [rsp + 040h], rsi                            ; move newValue variable's type out of rsi
      lea rsi, qword ptr [rsp + 050h]                            ; load address of return value's value
      push rsi                                                   ; internal argument 6: pointer to return value slot's value
      lea rsi, qword ptr [rsp + 038h]                            ; load address of return value's type
      push rsi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 028h]                            ; restoring slots to previous scope state
      mov rbx, qword ptr [rsp + 038h]                            ; restoring slots to previous scope state
      mov rsi, qword ptr [rsp + 030h]                            ; restoring slots to previous scope state
    func$_moveBytes$Movebytes$if$end$TypeMatch:                  ; after block
    cmp r15, 000h                                                ; compare type of copy of fromCursor to <sentinel>
    jne func$_moveBytes$Movebytes$if$fromcursor$TypeMatch        ; skip next block if copy of fromCursor is not sentinel
      ; Error handling block for fromCursor
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov qword ptr [rsp + 040h], rdi                            ; move oldValue variable's value out of rdi
      mov rdi, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rdi                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      mov qword ptr [rsp + 040h], r12                            ; move oldValue variable's type out of r12
      lea r12, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 040h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 060h], rax                            ; move copy of end's value out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea rax, qword ptr [rsp + 048h]                            ; load address of return value's value
      push rax                                                   ; internal argument 6: pointer to return value slot's value
      lea rax, qword ptr [rsp + 040h]                            ; load address of return value's type
      push rax                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 020h]                            ; restoring slots to previous scope state
      mov rdi, qword ptr [rsp + 040h]                            ; restoring slots to previous scope state
      mov r12, qword ptr [rsp + 030h]                            ; restoring slots to previous scope state
    func$_moveBytes$Movebytes$if$fromcursor$TypeMatch:           ; after block
    mov qword ptr [rsp + 040h], r13                              ; move copy of end's type out of r13
    mov r13, rax                                                 ; assign value of copy of end to value of - operator result
    sub r13, r14                                                 ; compute (copy of end) - (copy of fromCursor)
    mov qword ptr [rsp + 040h], rbx                              ; move newValue variable's value out of rbx
    mov rbx, r13                                                 ; value initialization of variable declaration for extraBytes variable (- operator result)
    mov qword ptr [rsp + 038h], rsi                              ; move newValue variable's type out of rsi
    mov rsi, 01fh                                                ; type initialization of variable declaration for extraBytes variable (Integer'31)
    ; Line 86: assert(extraBytes > 0, 'internal error: zero extra bytes but fro...
    mov qword ptr [rsp + 030h], rdi                              ; move oldValue variable's value out of rdi
    mov rdi, rbx                                                 ; make a copy of extraBytes's value in case it changes before we use it
    mov qword ptr [rsp + 028h], r12                              ; move oldValue variable's type out of r12
    mov r12, rsi                                                 ; make a copy of extraBytes's type in case it changes before we use it
    cmp r12, 000h                                                ; compare type of copy of extraBytes to <sentinel>
    jne func$_moveBytes$Movebytes$if$extrabytes$TypeMatch        ; skip next block if copy of extraBytes is not sentinel
      ; Error handling block for extraBytes
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rax, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rax                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r13, qword ptr [rsp + 030h]                            ; load address of return value's value
      push r13                                                   ; internal argument 6: pointer to return value slot's value
      lea r13, qword ptr [rsp + 030h]                            ; load address of return value's type
      push r13                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r14, qword ptr [rsp + 030h]                            ; load address of return value's value
      push r14                                                   ; internal argument 6: pointer to return value slot's value
      lea r14, qword ptr [rsp + 030h]                            ; load address of return value's type
      push r14                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
    func$_moveBytes$Movebytes$if$extrabytes$TypeMatch:           ; after block
    mov qword ptr [rsp + 020h], rsi                              ; move extraBytes variable's type out of rsi
    xor rsi, rsi                                                 ; clear > operator result
    cmp rdi, 000h                                                ; compare copy of extraBytes with 0
    setg sil                                                     ; store result in > operator result
    ; Call assert with 2 arguments
    mov r13, offset string$3                                     ; reading string for push
    push r13                                                     ; value of argument #2 (string)
    push 020h                                                    ; type of argument #2 (String'32)
    push rsi                                                     ; value of argument #1 (> operator result)
    push 01eh                                                    ; type of argument #1 (Boolean'30)
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 002h                                                ; internal argument 1: number of actual arguments
    call func$assert                                             ; jump to subroutine
    add rsp, 050h                                                ; release shadow space and arguments (result in stack pointer)
    ; Line 87: assert(extraBytes < 8, 'internal error: more than 7 extra bytes'...
    mov r15, rbx                                                 ; make a copy of extraBytes's value in case it changes before we use it
    mov r10, qword ptr [rsp + 020h]                              ; make a copy of extraBytes's type in case it changes before we use it
    cmp r10, 000h                                                ; compare type of copy of extraBytes to <sentinel>
    jne func$_moveBytes$Movebytes$if$extrabytes$TypeMatch$1      ; skip next block if copy of extraBytes is not sentinel
      ; Error handling block for extraBytes
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov qword ptr [rsp + 018h], rbx                            ; move extraBytes variable's value out of rbx
      mov rbx, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rbx                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rsi, qword ptr [rsp + 020h]                            ; load address of return value's value
      push rsi                                                   ; internal argument 6: pointer to return value slot's value
      lea rsi, qword ptr [rsp + 020h]                            ; load address of return value's type
      push rsi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 040h], r10                            ; move copy of extraBytes's type out of r10
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea rdi, qword ptr [rsp + 020h]                            ; load address of return value's value
      push rdi                                                   ; internal argument 6: pointer to return value slot's value
      lea rdi, qword ptr [rsp + 020h]                            ; load address of return value's type
      push rdi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rbx, qword ptr [rsp + 018h]                            ; restoring slots to previous scope state
      mov r10, qword ptr [rsp + 000h]                            ; restoring slots to previous scope state
    func$_moveBytes$Movebytes$if$extrabytes$TypeMatch$1:         ; after block
    xor r14, r14                                                 ; clear < operator result
    cmp r15, 008h                                                ; compare copy of extraBytes with 8
    setl r14b                                                    ; store result in < operator result
    ; Call assert with 2 arguments
    mov rsi, offset string$4                                     ; reading string for push
    push rsi                                                     ; value of argument #2 (string)
    push 020h                                                    ; type of argument #2 (String'32)
    push r14                                                     ; value of argument #1 (< operator result)
    push 01eh                                                    ; type of argument #1 (Boolean'30)
    lea rdi, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 002h                                                ; internal argument 1: number of actual arguments
    call func$assert                                             ; jump to subroutine
    add rsp, 050h                                                ; release shadow space and arguments (result in stack pointer)
    ; Line 88: Integer mask = -1 << extraBytes * 8;
    mov r12, rbx                                                 ; make a copy of extraBytes's value in case it changes before we use it
    mov rax, qword ptr [rsp + 020h]                              ; make a copy of extraBytes's type in case it changes before we use it
    cmp rax, 000h                                                ; compare type of copy of extraBytes to <sentinel>
    jne func$_moveBytes$Movebytes$if$extrabytes$TypeMatch$2      ; skip next block if copy of extraBytes is not sentinel
      ; Error handling block for extraBytes
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r13, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push r13                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r14, qword ptr [rsp + 030h]                            ; load address of return value's value
      push r14                                                   ; internal argument 6: pointer to return value slot's value
      lea r14, qword ptr [rsp + 030h]                            ; load address of return value's type
      push r14                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 050h], rax                            ; move copy of extraBytes's type out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r15, qword ptr [rsp + 030h]                            ; load address of return value's value
      push r15                                                   ; internal argument 6: pointer to return value slot's value
      lea r15, qword ptr [rsp + 030h]                            ; load address of return value's type
      push r15                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 010h]                            ; restoring slots to previous scope state
    func$_moveBytes$Movebytes$if$extrabytes$TypeMatch$2:         ; after block
    imul rdi, r12, 008h                                          ; compute (copy of extraBytes) * (8) (result in * operator result)
    mov rcx, rdi                                                 ; read <DynamicSlot:Integer'31 at [rdi]/[01fh] ("* operator result") (living: true)> into imm8 or cl forshl
    mov rbx, -001h                                               ; assign value of -1 to value of << operator result
    shl rbx, cl                                                  ; compute (-1) << (* operator result)
    mov rax, rbx                                                 ; value initialization of variable declaration for mask variable (<< operator result)
    mov r13, 01fh                                                ; type initialization of variable declaration for mask variable (Integer'31)
    ; Line 89: Integer finalValue = newValue & ~mask | oldValue & mask;
    mov r14, qword ptr [rsp + 040h]                              ; make a copy of newValue's value in case it changes before we use it
    mov r15, qword ptr [rsp + 038h]                              ; make a copy of newValue's type in case it changes before we use it
    mov r10, rax                                                 ; make a copy of mask's value in case it changes before we use it
    mov rbx, r13                                                 ; make a copy of mask's type in case it changes before we use it
    cmp rbx, 000h                                                ; compare type of copy of mask to <sentinel>
    jne func$_moveBytes$Movebytes$if$mask$TypeMatch              ; skip next block if copy of mask is not sentinel
      ; Error handling block for mask
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rsi, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rsi                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rdi, qword ptr [rsp + 050h]                            ; load address of return value's value
      push rdi                                                   ; internal argument 6: pointer to return value slot's value
      lea rdi, qword ptr [rsp + 050h]                            ; load address of return value's type
      push rdi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 060h], r10                            ; move copy of mask's value out of r10
      mov qword ptr [rsp + 058h], rax                            ; move mask variable's value out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r12, qword ptr [rsp + 050h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 050h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 018h]                            ; restoring slots to previous scope state
      mov r10, qword ptr [rsp + 020h]                            ; restoring slots to previous scope state
    func$_moveBytes$Movebytes$if$mask$TypeMatch:                 ; after block
    mov qword ptr [rsp + 040h], rax                              ; move mask variable's value out of rax
    mov rax, r10                                                 ; assign value of copy of mask to value of ~ unary operator result
    not rax                                                      ; ~ unary operator
    cmp r15, 000h                                                ; compare type of copy of newValue to <sentinel>
    jne func$_moveBytes$Movebytes$if$newvalue$TypeMatch          ; skip next block if copy of newValue is not sentinel
      ; Error handling block for newValue
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov qword ptr [rsp + 038h], r13                            ; move mask variable's type out of r13
      mov r13, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push r13                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      mov qword ptr [rsp + 028h], r14                            ; move copy of newValue's value out of r14
      lea r14, qword ptr [rsp + 030h]                            ; load address of return value's value
      push r14                                                   ; internal argument 6: pointer to return value slot's value
      lea r14, qword ptr [rsp + 028h]                            ; load address of return value's type
      push r14                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 048h], rax                            ; move ~ unary operator result's value out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      mov qword ptr [rsp + 020h], r15                            ; move copy of newValue's type out of r15
      lea r15, qword ptr [rsp + 030h]                            ; load address of return value's value
      push r15                                                   ; internal argument 6: pointer to return value slot's value
      lea r15, qword ptr [rsp + 018h]                            ; load address of return value's type
      push r15                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 008h]                            ; restoring slots to previous scope state
      mov r14, qword ptr [rsp + 018h]                            ; restoring slots to previous scope state
      mov r15, qword ptr [rsp + 010h]                            ; restoring slots to previous scope state
      mov r13, qword ptr [rsp + 038h]                            ; restoring slots to previous scope state
    func$_moveBytes$Movebytes$if$newvalue$TypeMatch:             ; after block
    mov rdi, r14                                                 ; assign value of copy of newValue to value of & operator result
    and rdi, rax                                                 ; compute (copy of newValue) & (~ unary operator result)
    mov r12, qword ptr [rsp + 030h]                              ; make a copy of oldValue's value in case it changes before we use it
    mov rax, qword ptr [rsp + 028h]                              ; make a copy of oldValue's type in case it changes before we use it
    mov qword ptr [rsp + 038h], r13                              ; move mask variable's type out of r13
    mov r13, qword ptr [rsp + 040h]                              ; make a copy of mask's value in case it changes before we use it
    mov r14, qword ptr [rsp + 038h]                              ; make a copy of mask's type in case it changes before we use it
    cmp rax, 000h                                                ; compare type of copy of oldValue to <sentinel>
    jne func$_moveBytes$Movebytes$if$oldvalue$TypeMatch          ; skip next block if copy of oldValue is not sentinel
      ; Error handling block for oldValue
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r15, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push r15                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r10, qword ptr [rsp + 050h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 050h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 070h], rax                            ; move copy of oldValue's type out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea rbx, qword ptr [rsp + 050h]                            ; load address of return value's value
      push rbx                                                   ; internal argument 6: pointer to return value slot's value
      lea rbx, qword ptr [rsp + 050h]                            ; load address of return value's type
      push rbx                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 030h]                            ; restoring slots to previous scope state
    func$_moveBytes$Movebytes$if$oldvalue$TypeMatch:             ; after block
    cmp r14, 000h                                                ; compare type of copy of mask to <sentinel>
    jne func$_moveBytes$Movebytes$if$mask$TypeMatch$1            ; skip next block if copy of mask is not sentinel
      ; Error handling block for mask
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rsi, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rsi                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      mov qword ptr [rsp + 048h], rdi                            ; move & operator result's value out of rdi
      lea rdi, qword ptr [rsp + 050h]                            ; load address of return value's value
      push rdi                                                   ; internal argument 6: pointer to return value slot's value
      lea rdi, qword ptr [rsp + 048h]                            ; load address of return value's type
      push rdi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 068h], rax                            ; move copy of oldValue's type out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      mov qword ptr [rsp + 040h], r12                            ; move copy of oldValue's value out of r12
      lea r12, qword ptr [rsp + 050h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 038h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 028h]                            ; restoring slots to previous scope state
      mov r12, qword ptr [rsp + 030h]                            ; restoring slots to previous scope state
      mov rdi, qword ptr [rsp + 038h]                            ; restoring slots to previous scope state
    func$_moveBytes$Movebytes$if$mask$TypeMatch$1:               ; after block
    mov qword ptr [rsp + 040h], rax                              ; move copy of oldValue's type out of rax
    mov rax, r12                                                 ; assign value of copy of oldValue to value of & operator result
    and rax, r13                                                 ; compute (copy of oldValue) & (copy of mask)
    mov qword ptr [rsp + 040h], rdi                              ; move & operator result's value out of rdi
    mov rdi, qword ptr [rsp + 040h]                              ; assign value of & operator result to value of | operator result
    or rdi, rax                                                  ; compute (& operator result) | (& operator result)
    mov r14, rdi                                                 ; value initialization of variable declaration for finalValue variable (| operator result)
    mov r15, 01fh                                                ; type initialization of variable declaration for finalValue variable (Integer'31)
    ; Line 90: __writeToAddress(toCursor, finalValue);
    mov r10, qword ptr [rsp + 060h]                              ; make a copy of toCursor's value in case it changes before we use it
    mov rbx, qword ptr [rsp + 070h]                              ; make a copy of toCursor's type in case it changes before we use it
    mov rsi, r14                                                 ; make a copy of finalValue's value in case it changes before we use it
    mov rdi, r15                                                 ; make a copy of finalValue's type in case it changes before we use it
    ; Call __writeToAddress with 2 arguments
    mov qword ptr [r10], rsi                                     ; __writeToAddress
    mov r13, qword ptr [rsp + 050h]                              ; restoring slots to previous scope state
    mov r14, qword ptr [rsp + 048h]                              ; restoring slots to previous scope state
  func$_moveBytes$if$continuation:                               ; end of if
  ; Implicit return from _moveBytes
  mov rbx, qword ptr [rbp + 030h]                                ; get pointer to return value of _moveBytes into register to dereference it
  mov qword ptr [rbx], 000h                                      ; _moveBytes return value
  mov rsi, qword ptr [rbp + 028h]                                ; get pointer to return value type of _moveBytes into register to dereference it
  mov qword ptr [rsi], 01dh                                      ; type of _moveBytes return value (Null'29)
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 080h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; _fillQuadWords
dq func$_fillQuadWords$annotation
func$_fillQuadWords:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 038h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 078h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 003h                                                  ; compare parameter count of _fillQuadWords to 3 (integer)
  je func$_fillQuadWords$parameterCountCheck$continuation        ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_fillQuadWords$parameterCountCheck$continuation:          ; end of parameter count check
  ; Check type of parameter 0, destination (expecting Integer)
  mov rsi, qword ptr [rbp + 038h]                                ; store destination's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that destination is Integer
  jc func$_fillQuadWords$destination$TypeMatch                   ; skip next block if the type matches
    ; Error handling block for destination
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_fillQuadWords$destination$TypeMatch:                     ; after block
  ; Check type of parameter 1, length (expecting Integer)
  mov r10, qword ptr [rbp + 048h]                                ; store length's type in testByte value slot
  mov rax, r10                                                   ; move testByte to testByte
  mov rbx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rbx                                                        ; adjust to the relative start of that type's entry in the type table
  mov rsi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rsi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that length is Integer
  jc func$_fillQuadWords$length$TypeMatch                        ; skip next block if the type matches
    ; Error handling block for length
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_fillQuadWords$length$TypeMatch:                          ; after block
  ; Check type of parameter 2, value (expecting Integer)
  mov r14, qword ptr [rbp + 058h]                                ; store value's type in testByte value slot
  mov rax, r14                                                   ; move testByte to testByte
  mov r15, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r15                                                        ; adjust to the relative start of that type's entry in the type table
  mov r10, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r10                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that value is Integer
  jc func$_fillQuadWords$value$TypeMatch                         ; skip next block if the type matches
    ; Error handling block for value
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rbx, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push rbx                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rsi, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rdi, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_fillQuadWords$value$TypeMatch:                           ; after block
  ; Line 96: assert(length > 0, '_fillQuadWords expects positive number of by...
  cmp qword ptr [rbp + 048h], 000h                               ; compare type of length to <sentinel>
  jne func$_fillQuadWords$length$TypeMatch$1                     ; skip next block if length is not sentinel
    ; Error handling block for length
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r12, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r12                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r13, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_fillQuadWords$length$TypeMatch$1:                        ; after block
  xor rbx, rbx                                                   ; clear > operator result
  cmp qword ptr [rbp + 050h], 000h                               ; compare length with 0
  setg bl                                                        ; store result in > operator result
  ; Call assert with 2 arguments
  mov r13, offset string$5                                       ; reading string for push
  push r13                                                       ; value of argument #2 (string)
  push 020h                                                      ; type of argument #2 (String'32)
  push rbx                                                       ; value of argument #1 (> operator result)
  push 01eh                                                      ; type of argument #1 (Boolean'30)
  lea r14, qword ptr [rsp + 048h]                                ; load address of return value's value
  push r14                                                       ; internal argument 6: pointer to return value slot's value
  lea r14, qword ptr [rsp + 048h]                                ; load address of return value's type
  push r14                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 002h                                                  ; internal argument 1: number of actual arguments
  call func$assert                                               ; jump to subroutine
  add rsp, 050h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 97: assert(length % 8 == 0, '_fillQuadWords expects number of bytes ...
  cmp qword ptr [rbp + 048h], 000h                               ; compare type of length to <sentinel>
  jne func$_fillQuadWords$length$TypeMatch$2                     ; skip next block if length is not sentinel
    ; Error handling block for length
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rax, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rax                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r15, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_fillQuadWords$length$TypeMatch$2:                        ; after block
  mov rax, qword ptr [rbp + 050h]                                ; put lhs of rdx division (<ParameterSlot:Integer'31 ("length")>) in rax
  cqo                                                            ; zero-extend dividend (rax into rdx:rax)
  mov r12, 008h                                                  ; read visible operand of div (<ImmediateIntegerSlot:Integer'31 ("8")>) 
  idiv r12                                                       ; compute (length) % (8) (result, % operator result, ends up in rdx)
  xor r13, r13                                                   ; zero value result of == (testing % operator result and 0) to put the boolean in
  cmp rdx, 000h                                                  ; values equal?
  sete r13b                                                      ; put result in value result of == (testing % operator result and 0)
  mov r14, 01eh                                                  ; value result of == (testing % operator result and 0) is a Boolean'30
  xor r15, r15                                                   ; zero type result of == (testing % operator result and 0) to put the boolean in
  mov r10, 01fh                                                  ; reading type of % operator result for comparison with type of 0
  cmp r10, 01fh                                                  ; types equal?
  sete r15b                                                      ; put result in type result of == (testing % operator result and 0)
  mov rbx, 01eh                                                  ; type result of == (testing % operator result and 0) is a Boolean'30
  mov rsi, r13                                                   ; assign value of value result of == (testing % operator result and 0) to value of == operator result
  and rsi, r15                                                   ; && type temp and value temp
  ; Call assert with 2 arguments
  mov r12, offset string$6                                       ; reading string for push
  push r12                                                       ; value of argument #2 (string)
  push 020h                                                      ; type of argument #2 (String'32)
  push rsi                                                       ; value of argument #1 (== operator result)
  push 01eh                                                      ; type of argument #1 (Boolean'30)
  lea r13, qword ptr [rsp + 048h]                                ; load address of return value's value
  push r13                                                       ; internal argument 6: pointer to return value slot's value
  lea r13, qword ptr [rsp + 048h]                                ; load address of return value's type
  push r13                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 002h                                                  ; internal argument 1: number of actual arguments
  call func$assert                                               ; jump to subroutine
  add rsp, 050h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 98: Integer cursor = destination;
  cmp qword ptr [rbp + 038h], 000h                               ; compare type of destination to <sentinel>
  jne func$_fillQuadWords$destination$TypeMatch$1                ; skip next block if destination is not sentinel
    ; Error handling block for destination
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r14, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push r14                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r15, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_fillQuadWords$destination$TypeMatch$1:                   ; after block
  mov rbx, qword ptr [rbp + 040h]                                ; value initialization of variable declaration for cursor variable (destination)
  mov rsi, qword ptr [rbp + 038h]                                ; type initialization of variable declaration for cursor variable
  ; Line 99: Integer end = destination + length;
  cmp qword ptr [rbp + 038h], 000h                               ; compare type of destination to <sentinel>
  jne func$_fillQuadWords$destination$TypeMatch$2                ; skip next block if destination is not sentinel
    ; Error handling block for destination
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r12, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_fillQuadWords$destination$TypeMatch$2:                   ; after block
  cmp qword ptr [rbp + 048h], 000h                               ; compare type of length to <sentinel>
  jne func$_fillQuadWords$length$TypeMatch$3                     ; skip next block if length is not sentinel
    ; Error handling block for length
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_fillQuadWords$length$TypeMatch$3:                        ; after block
  mov r10, qword ptr [rbp + 040h]                                ; assign value of destination to value of + operator result
  add r10, qword ptr [rbp + 050h]                                ; compute (destination) + (length) (result in + operator result)
  mov rax, r10                                                   ; value initialization of variable declaration for end variable (+ operator result)
  mov r12, 01fh                                                  ; type initialization of variable declaration for end variable (Integer'31)
  func$_fillQuadWords$while$top:                                 ; top of while
    mov r13, rbx                                                 ; make a copy of cursor's value in case it changes before we use it
    mov r14, rsi                                                 ; make a copy of cursor's type in case it changes before we use it
    mov r15, rax                                                 ; make a copy of end's value in case it changes before we use it
    mov r10, r12                                                 ; make a copy of end's type in case it changes before we use it
    cmp r14, 000h                                                ; compare type of copy of cursor to <sentinel>
    jne func$_fillQuadWords$while$cursor$TypeMatch               ; skip next block if copy of cursor is not sentinel
      ; Error handling block for cursor
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov qword ptr [rsp + 028h], rbx                            ; move cursor variable's value out of rbx
      mov rbx, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rbx                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      mov qword ptr [rsp + 028h], rsi                            ; move cursor variable's type out of rsi
      lea rsi, qword ptr [rsp + 030h]                            ; load address of return value's value
      push rsi                                                   ; internal argument 6: pointer to return value slot's value
      lea rsi, qword ptr [rsp + 028h]                            ; load address of return value's type
      push rsi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 048h], r10                            ; move copy of end's type out of r10
      mov qword ptr [rsp + 040h], rax                            ; move end variable's value out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea rdi, qword ptr [rsp + 030h]                            ; load address of return value's value
      push rdi                                                   ; internal argument 6: pointer to return value slot's value
      lea rdi, qword ptr [rsp + 028h]                            ; load address of return value's type
      push rdi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 000h]                            ; restoring slots to previous scope state
      mov rbx, qword ptr [rsp + 028h]                            ; restoring slots to previous scope state
      mov r10, qword ptr [rsp + 008h]                            ; restoring slots to previous scope state
      mov rsi, qword ptr [rsp + 018h]                            ; restoring slots to previous scope state
    func$_fillQuadWords$while$cursor$TypeMatch:                  ; after block
    cmp r10, 000h                                                ; compare type of copy of end to <sentinel>
    jne func$_fillQuadWords$while$end$TypeMatch                  ; skip next block if copy of end is not sentinel
      ; Error handling block for end
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov qword ptr [rsp + 028h], rax                            ; move end variable's value out of rax
      mov rax, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rax                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      mov qword ptr [rsp + 028h], r12                            ; move end variable's type out of r12
      lea r12, qword ptr [rsp + 030h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 028h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 048h], r10                            ; move copy of end's type out of r10
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      mov qword ptr [rsp + 020h], r13                            ; move copy of cursor's value out of r13
      lea r13, qword ptr [rsp + 030h]                            ; load address of return value's value
      push r13                                                   ; internal argument 6: pointer to return value slot's value
      lea r13, qword ptr [rsp + 018h]                            ; load address of return value's type
      push r13                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 028h]                            ; restoring slots to previous scope state
      mov r10, qword ptr [rsp + 008h]                            ; restoring slots to previous scope state
      mov r12, qword ptr [rsp + 018h]                            ; restoring slots to previous scope state
      mov r13, qword ptr [rsp + 010h]                            ; restoring slots to previous scope state
    func$_fillQuadWords$while$end$TypeMatch:                     ; after block
    xor r14, r14                                                 ; clear < operator result
    cmp r13, r15                                                 ; compare copy of cursor with copy of end
    setl r14b                                                    ; store result in < operator result
    cmp r14, 000h                                                ; compare < operator result to false
    jne func$_fillQuadWords$while$body                           ; while condition
    jmp func$_fillQuadWords$while$bottom                         ; break out of while
    func$_fillQuadWords$while$body:                              ; start of while
    ; Line 101: __writeToAddress(cursor, value);
    mov r15, rbx                                                 ; make a copy of cursor's value in case it changes before we use it
    mov r10, rsi                                                 ; make a copy of cursor's type in case it changes before we use it
    ; Call __writeToAddress with 2 arguments
    mov qword ptr [rsp + 028h], rax                              ; move end variable's value out of rax
    mov rax, qword ptr [rbp + 060h]                              ; read second operand of mov (value) for MoveToDerefInstruction
    mov qword ptr [r15], rax                                     ; __writeToAddress
    ; Line 102: cursor += 8;
    mov qword ptr [rsp + 020h], r12                              ; move end variable's type out of r12
    mov r12, rbx                                                 ; make a copy of cursor's value in case it changes before we use it
    mov r13, rsi                                                 ; make a copy of cursor's type in case it changes before we use it
    cmp r13, 000h                                                ; compare type of copy of cursor to <sentinel>
    jne func$_fillQuadWords$while$copyOfCursor$TypeMatch         ; skip next block if copy of cursor is not sentinel
      ; Error handling block for copy of cursor
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r14, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push r14                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r15, qword ptr [rsp + 028h]                            ; load address of return value's value
      push r15                                                   ; internal argument 6: pointer to return value slot's value
      lea r15, qword ptr [rsp + 028h]                            ; load address of return value's type
      push r15                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r10, qword ptr [rsp + 028h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 028h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
    func$_fillQuadWords$while$copyOfCursor$TypeMatch:            ; after block
    mov rax, r12                                                 ; assign value of copy of cursor to value of += operator result
    add rax, 008h                                                ; += operator
    mov rbx, rax                                                 ; store value
    mov rsi, 01fh                                                ; store type (Integer'31)
    mov rax, qword ptr [rsp + 028h]                              ; restoring slots to previous scope state
    mov r12, qword ptr [rsp + 020h]                              ; restoring slots to previous scope state
    jmp func$_fillQuadWords$while$top                            ; return to top of while
  func$_fillQuadWords$while$bottom:                              ; bottom of while
  ; Implicit return from _fillQuadWords
  mov rsi, qword ptr [rbp + 030h]                                ; get pointer to return value of _fillQuadWords into register to dereference it
  mov qword ptr [rsi], 000h                                      ; _fillQuadWords return value
  mov rdi, qword ptr [rbp + 028h]                                ; get pointer to return value type of _fillQuadWords into register to dereference it
  mov qword ptr [rdi], 01dh                                      ; type of _fillQuadWords return value (Null'29)
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 038h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; _blockListInit
dq func$_blockListInit$annotation
func$_blockListInit:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 038h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 078h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 001h                                                  ; compare parameter count of _blockListInit to 1 (integer)
  je func$_blockListInit$parameterCountCheck$continuation        ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_blockListInit$parameterCountCheck$continuation:          ; end of parameter count check
  ; Check type of parameter 0, initialCount (expecting Integer)
  mov rsi, qword ptr [rbp + 038h]                                ; store initialCount's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that initialCount is Integer
  jc func$_blockListInit$initialcount$TypeMatch                  ; skip next block if the type matches
    ; Error handling block for initialCount
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_blockListInit$initialcount$TypeMatch:                    ; after block
  ; Line 135: _gcLocked += 1;
  mov r10, qword ptr _gcLockedValue                              ; make a copy of _gcLocked's value in case it changes before we use it
  mov rbx, qword ptr _gcLockedType                               ; make a copy of _gcLocked's type in case it changes before we use it
  cmp rbx, 000h                                                  ; compare type of copy of _gcLocked to <sentinel>
  jne func$_blockListInit$copyOfGclocked$TypeMatch               ; skip next block if copy of _gcLocked is not sentinel
    ; Error handling block for copy of _gcLocked
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rsi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rsi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 058h], r10                              ; move copy of _gcLocked's value out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rdi, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
  func$_blockListInit$copyOfGclocked$TypeMatch:                  ; after block
  mov r15, r10                                                   ; assign value of copy of _gcLocked to value of += operator result
  add r15, 001h                                                  ; += operator
  mov qword ptr _gcLockedValue, r15                              ; store value
  mov qword ptr _gcLockedType, 01fh                              ; store type (Integer'31)
  ; Line 136: Integer initialSize = initialCount * _blockEntrySize;
  mov rax, qword ptr _blockEntrySizeValue                        ; make a copy of _blockEntrySize's value in case it changes before we use it
  mov rdi, qword ptr _blockEntrySizeType                         ; make a copy of _blockEntrySize's type in case it changes before we use it
  cmp qword ptr [rbp + 038h], 000h                               ; compare type of initialCount to <sentinel>
  jne func$_blockListInit$initialcount$TypeMatch$1               ; skip next block if initialCount is not sentinel
    ; Error handling block for initialCount
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r12, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r12                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r13, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 058h], rax                              ; move copy of _blockEntrySize's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
  func$_blockListInit$initialcount$TypeMatch$1:                  ; after block
  cmp rdi, 000h                                                  ; compare type of copy of _blockEntrySize to <sentinel>
  jne func$_blockListInit$Blockentrysize$TypeMatch               ; skip next block if copy of _blockEntrySize is not sentinel
    ; Error handling block for _blockEntrySize
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r15, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r15                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r10, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 058h], rax                              ; move copy of _blockEntrySize's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
  func$_blockListInit$Blockentrysize$TypeMatch:                  ; after block
  mov rsi, qword ptr [rbp + 040h]                                ; read left hand side operand of imul (initialCount), which is also the result
  imul rsi, rax                                                  ; compute (initialCount) * (copy of _blockEntrySize) (result in * operator result)
  mov r13, rsi                                                   ; value initialization of variable declaration for initialSize variable (* operator result)
  mov r14, 01fh                                                  ; type initialization of variable declaration for initialSize variable (Integer'31)
  ; Line 137: _blockListStart = _alloc(initialSize);
  mov r15, r13                                                   ; make a copy of initialSize's value in case it changes before we use it
  mov r10, r14                                                   ; make a copy of initialSize's type in case it changes before we use it
  ; Call _alloc with 1 arguments
  push r15                                                       ; value of argument #1 (copy of initialSize)
  push r10                                                       ; type of argument #1
  lea rdi, qword ptr [rsp + 038h]                                ; load address of return value's value
  push rdi                                                       ; internal argument 6: pointer to return value slot's value
  lea rdi, qword ptr [rsp + 038h]                                ; load address of return value's type
  push rdi                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call func$_alloc                                               ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  cmp qword ptr [rsp + 020h], 000h                               ; compare type of _alloc return value to <sentinel>
  jne func$_blockListInit$AllocReturnValue$TypeMatch             ; skip next block if _alloc return value is not sentinel
    ; Error handling block for _alloc return value
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r12, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push r12                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    mov qword ptr [rsp + 020h], r13                              ; move initialSize variable's value out of r13
    lea r13, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 018h], r14                              ; move initialSize variable's type out of r14
    lea r14, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r13, qword ptr [rsp + 010h]                              ; restoring slots to previous scope state
    mov r14, qword ptr [rsp + 008h]                              ; restoring slots to previous scope state
  func$_blockListInit$AllocReturnValue$TypeMatch:                ; after block
  mov r11, qword ptr [rsp + 028h]                                ; indirect through r11 because operand pair (qword ptr _blockListStartValue, stack operand #1) is not allowed with mov
  mov qword ptr _blockListStartValue, r11                        ; store value
  mov r11, qword ptr [rsp + 020h]                                ; indirect through r11 because operand pair (qword ptr _blockListStartType, stack operand #2) is not allowed with mov
  mov qword ptr _blockListStartType, r11                         ; store type
  ; Line 138: _blockListEnd = _blockListStart + initialSize;
  mov r15, qword ptr _blockListStartValue                        ; make a copy of _blockListStart's value in case it changes before we use it
  mov r10, qword ptr _blockListStartType                         ; make a copy of _blockListStart's type in case it changes before we use it
  mov rbx, r13                                                   ; make a copy of initialSize's value in case it changes before we use it
  mov rsi, r14                                                   ; make a copy of initialSize's type in case it changes before we use it
  cmp r10, 000h                                                  ; compare type of copy of _blockListStart to <sentinel>
  jne func$_blockListInit$Blockliststart$TypeMatch               ; skip next block if copy of _blockListStart is not sentinel
    ; Error handling block for _blockListStart
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rax, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rax                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rdi, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 058h], r10                              ; move copy of _blockListStart's type out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r12, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
  func$_blockListInit$Blockliststart$TypeMatch:                  ; after block
  cmp rsi, 000h                                                  ; compare type of copy of initialSize to <sentinel>
  jne func$_blockListInit$initialsize$TypeMatch                  ; skip next block if copy of initialSize is not sentinel
    ; Error handling block for initialSize
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 028h], r13                              ; move initialSize variable's value out of r13
    mov r13, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    mov qword ptr [rsp + 028h], r14                              ; move initialSize variable's type out of r14
    lea r14, qword ptr [rsp + 030h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 048h], r10                              ; move copy of _blockListStart's type out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 020h], r15                              ; move copy of _blockListStart's value out of r15
    lea r15, qword ptr [rsp + 030h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r14, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
    mov r15, qword ptr [rsp + 010h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 008h]                              ; restoring slots to previous scope state
    mov r13, qword ptr [rsp + 028h]                              ; restoring slots to previous scope state
  func$_blockListInit$initialsize$TypeMatch:                     ; after block
  mov qword ptr [rsp + 028h], r10                                ; move copy of _blockListStart's type out of r10
  mov r10, r15                                                   ; assign value of copy of _blockListStart to value of + operator result
  add r10, rbx                                                   ; compute (copy of _blockListStart) + (copy of initialSize) (result in + operator result)
  mov qword ptr _blockListEndValue, r10                          ; store value
  mov qword ptr _blockListEndType, 01fh                          ; store type (Integer'31)
  ; Line 139: _blockListNext = _blockListStart;
  mov rdi, qword ptr _blockListStartValue                        ; make a copy of _blockListStart's value in case it changes before we use it
  mov r12, qword ptr _blockListStartType                         ; make a copy of _blockListStart's type in case it changes before we use it
  cmp r12, 000h                                                  ; compare type of copy of _blockListStart to <sentinel>
  jne func$_blockListInit$copyOfBlockliststart$TypeMatch         ; skip next block if copy of _blockListStart is not sentinel
    ; Error handling block for copy of _blockListStart
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 028h], r13                              ; move initialSize variable's value out of r13
    mov r13, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    mov qword ptr [rsp + 028h], r14                              ; move initialSize variable's type out of r14
    lea r14, qword ptr [rsp + 030h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 030h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r13, qword ptr [rsp + 028h]                              ; restoring slots to previous scope state
    mov r14, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
  func$_blockListInit$copyOfBlockliststart$TypeMatch:            ; after block
  mov qword ptr _blockListNextValue, rdi                         ; store value
  mov qword ptr _blockListNextType, r12                          ; store type
  ; Line 140: _fillQuadWords(_blockListStart, initialSize, 0);
  mov r10, qword ptr _blockListStartValue                        ; make a copy of _blockListStart's value in case it changes before we use it
  mov rbx, qword ptr _blockListStartType                         ; make a copy of _blockListStart's type in case it changes before we use it
  mov rsi, r13                                                   ; make a copy of initialSize's value in case it changes before we use it
  mov rax, r14                                                   ; make a copy of initialSize's type in case it changes before we use it
  ; Call _fillQuadWords with 3 arguments
  push 000h                                                      ; value of argument #3 (0)
  push 01fh                                                      ; type of argument #3 (Integer'31)
  push rsi                                                       ; value of argument #2 (copy of initialSize)
  push rax                                                       ; type of argument #2
  push r10                                                       ; value of argument #1 (copy of _blockListStart)
  push rbx                                                       ; type of argument #1
  lea r14, qword ptr [rsp + 058h]                                ; load address of return value's value
  push r14                                                       ; internal argument 6: pointer to return value slot's value
  lea r14, qword ptr [rsp + 058h]                                ; load address of return value's type
  push r14                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 003h                                                  ; internal argument 1: number of actual arguments
  call func$_fillQuadWords                                       ; jump to subroutine
  add rsp, 060h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 141: _gcLocked -= 1;
  mov r15, qword ptr _gcLockedValue                              ; make a copy of _gcLocked's value in case it changes before we use it
  mov r10, qword ptr _gcLockedType                               ; make a copy of _gcLocked's type in case it changes before we use it
  cmp r10, 000h                                                  ; compare type of copy of _gcLocked to <sentinel>
  jne func$_blockListInit$copyOfGclocked$TypeMatch$1             ; skip next block if copy of _gcLocked is not sentinel
    ; Error handling block for copy of _gcLocked
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rbx, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rbx                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rsi, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 058h], r10                              ; move copy of _gcLocked's type out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rax, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
  func$_blockListInit$copyOfGclocked$TypeMatch$1:                ; after block
  mov r14, r15                                                   ; assign value of copy of _gcLocked to value of -= operator result
  sub r14, 001h                                                  ; -= operator
  mov qword ptr _gcLockedValue, r14                              ; store value
  mov qword ptr _gcLockedType, 01fh                              ; store type (Integer'31)
  ; Implicit return from _blockListInit
  mov r12, qword ptr [rbp + 030h]                                ; get pointer to return value of _blockListInit into register to dereference it
  mov qword ptr [r12], 000h                                      ; _blockListInit return value
  mov r13, qword ptr [rbp + 028h]                                ; get pointer to return value type of _blockListInit into register to dereference it
  mov qword ptr [r13], 01dh                                      ; type of _blockListInit return value (Null'29)
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 038h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; _growBlockList
dq func$_growBlockList$annotation
func$_growBlockList:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 058h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 098h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 000h                                                  ; compare parameter count of _growBlockList to 0 (integer)
  je func$_growBlockList$parameterCountCheck$continuation        ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 058h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 058h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_growBlockList$parameterCountCheck$continuation:          ; end of parameter count check
  ; Line 147: assert(_gcLocked > 0, '_growBlockList called without _gcLocked s...
  mov rsi, qword ptr _gcLockedValue                              ; make a copy of _gcLocked's value in case it changes before we use it
  mov rdi, qword ptr _gcLockedType                               ; make a copy of _gcLocked's type in case it changes before we use it
  cmp rdi, 000h                                                  ; compare type of copy of _gcLocked to <sentinel>
  jne func$_growBlockList$Gclocked$TypeMatch                     ; skip next block if copy of _gcLocked is not sentinel
    ; Error handling block for _gcLocked
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r12, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r12                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r13, qword ptr [rsp + 058h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 058h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r14, qword ptr [rsp + 058h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 058h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_growBlockList$Gclocked$TypeMatch:                        ; after block
  xor rbx, rbx                                                   ; clear > operator result
  cmp rsi, 000h                                                  ; compare copy of _gcLocked with 0
  setg bl                                                        ; store result in > operator result
  ; Call assert with 2 arguments
  mov r13, offset string$7                                       ; reading string for push
  push r13                                                       ; value of argument #2 (string)
  push 020h                                                      ; type of argument #2 (String'32)
  push rbx                                                       ; value of argument #1 (> operator result)
  push 01eh                                                      ; type of argument #1 (Boolean'30)
  lea r14, qword ptr [rsp + 068h]                                ; load address of return value's value
  push r14                                                       ; internal argument 6: pointer to return value slot's value
  lea r14, qword ptr [rsp + 068h]                                ; load address of return value's type
  push r14                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 002h                                                  ; internal argument 1: number of actual arguments
  call func$assert                                               ; jump to subroutine
  add rsp, 050h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 148: Integer oldLength = _blockListEnd - _blockListStart;
  mov r15, qword ptr _blockListEndValue                          ; make a copy of _blockListEnd's value in case it changes before we use it
  mov r10, qword ptr _blockListEndType                           ; make a copy of _blockListEnd's type in case it changes before we use it
  mov rax, qword ptr _blockListStartValue                        ; make a copy of _blockListStart's value in case it changes before we use it
  mov rbx, qword ptr _blockListStartType                         ; make a copy of _blockListStart's type in case it changes before we use it
  cmp r10, 000h                                                  ; compare type of copy of _blockListEnd to <sentinel>
  jne func$_growBlockList$Blocklistend$TypeMatch                 ; skip next block if copy of _blockListEnd is not sentinel
    ; Error handling block for _blockListEnd
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rsi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rsi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rdi, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 058h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 078h], r10                              ; move copy of _blockListEnd's type out of r10
    mov qword ptr [rsp + 070h], rax                              ; move copy of _blockListStart's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r12, qword ptr [rsp + 058h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 058h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 030h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 038h]                              ; restoring slots to previous scope state
  func$_growBlockList$Blocklistend$TypeMatch:                    ; after block
  cmp rbx, 000h                                                  ; compare type of copy of _blockListStart to <sentinel>
  jne func$_growBlockList$Blockliststart$TypeMatch               ; skip next block if copy of _blockListStart is not sentinel
    ; Error handling block for _blockListStart
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 058h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 058h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 078h], r10                              ; move copy of _blockListEnd's type out of r10
    mov qword ptr [rsp + 070h], rax                              ; move copy of _blockListStart's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 050h], r15                              ; move copy of _blockListEnd's value out of r15
    lea r15, qword ptr [rsp + 058h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 040h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 030h]                              ; restoring slots to previous scope state
    mov r15, qword ptr [rsp + 040h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 038h]                              ; restoring slots to previous scope state
  func$_growBlockList$Blockliststart$TypeMatch:                  ; after block
  mov qword ptr [rsp + 048h], r10                                ; move copy of _blockListEnd's type out of r10
  mov r10, r15                                                   ; assign value of copy of _blockListEnd to value of - operator result
  sub r10, rax                                                   ; compute (copy of _blockListEnd) - (copy of _blockListStart)
  mov rdi, r10                                                   ; value initialization of variable declaration for oldLength variable (- operator result)
  mov r12, 01fh                                                  ; type initialization of variable declaration for oldLength variable (Integer'31)
  ; Line 149: Integer newLength = oldLength * 2;
  mov r13, rdi                                                   ; make a copy of oldLength's value in case it changes before we use it
  mov r14, r12                                                   ; make a copy of oldLength's type in case it changes before we use it
  cmp r14, 000h                                                  ; compare type of copy of oldLength to <sentinel>
  jne func$_growBlockList$oldlength$TypeMatch                    ; skip next block if copy of oldLength is not sentinel
    ; Error handling block for oldLength
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r15, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r15                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r10, qword ptr [rsp + 058h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 058h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rax, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 058h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_growBlockList$oldlength$TypeMatch:                       ; after block
  mov qword ptr [rsp + 048h], r12                                ; move oldLength variable's type out of r12
  imul r12, r13, 002h                                            ; compute (copy of oldLength) * (2) (result in * operator result)
  mov r10, r12                                                   ; value initialization of variable declaration for newLength variable (* operator result)
  mov rax, 01fh                                                  ; type initialization of variable declaration for newLength variable (Integer'31)
  ; Line 150: Integer newBlock = _alloc(newLength);
  mov rbx, r10                                                   ; make a copy of newLength's value in case it changes before we use it
  mov rsi, rax                                                   ; make a copy of newLength's type in case it changes before we use it
  ; Call _alloc with 1 arguments
  push rbx                                                       ; value of argument #1 (copy of newLength)
  push rsi                                                       ; type of argument #1
  lea r14, qword ptr [rsp + 050h]                                ; load address of return value's value
  push r14                                                       ; internal argument 6: pointer to return value slot's value
  lea r14, qword ptr [rsp + 050h]                                ; load address of return value's type
  push r14                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  mov qword ptr [rsp + 070h], r10                                ; move newLength variable's value out of r10
  mov qword ptr [rsp + 068h], rax                                ; move newLength variable's type out of rax
  call func$_alloc                                               ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  cmp qword ptr [rsp + 038h], 000h                               ; compare type of _alloc return value to <sentinel>
  jne func$_growBlockList$AllocReturnValue$TypeMatch             ; skip next block if _alloc return value is not sentinel
    ; Error handling block for _alloc return value
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r15, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push r15                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r10, qword ptr [rsp + 030h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 030h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rax, qword ptr [rsp + 030h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 030h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_growBlockList$AllocReturnValue$TypeMatch:                ; after block
  mov rbx, qword ptr [rsp + 040h]                                ; value initialization of variable declaration for newBlock variable (_alloc return value)
  mov rsi, qword ptr [rsp + 038h]                                ; type initialization of variable declaration for newBlock variable
  ; Line 151: _moveBytes(_blockListStart, newBlock, oldLength);
  mov qword ptr [rsp + 040h], rdi                                ; move oldLength variable's value out of rdi
  mov rdi, qword ptr _blockListStartValue                        ; make a copy of _blockListStart's value in case it changes before we use it
  mov r12, qword ptr _blockListStartType                         ; make a copy of _blockListStart's type in case it changes before we use it
  mov r13, rbx                                                   ; make a copy of newBlock's value in case it changes before we use it
  mov r14, rsi                                                   ; make a copy of newBlock's type in case it changes before we use it
  mov r15, qword ptr [rsp + 040h]                                ; make a copy of oldLength's value in case it changes before we use it
  mov r10, qword ptr [rsp + 048h]                                ; make a copy of oldLength's type in case it changes before we use it
  ; Call _moveBytes with 3 arguments
  push r15                                                       ; value of argument #3 (copy of oldLength)
  push r10                                                       ; type of argument #3
  push r13                                                       ; value of argument #2 (copy of newBlock)
  push r14                                                       ; type of argument #2
  push rdi                                                       ; value of argument #1 (copy of _blockListStart)
  push r12                                                       ; type of argument #1
  mov qword ptr [rsp + 050h], rsi                                ; move newBlock variable's type out of rsi
  lea rsi, qword ptr [rsp + 068h]                                ; load address of return value's value
  push rsi                                                       ; internal argument 6: pointer to return value slot's value
  lea rsi, qword ptr [rsp + 050h]                                ; load address of return value's type
  push rsi                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 003h                                                  ; internal argument 1: number of actual arguments
  call func$_moveBytes                                           ; jump to subroutine
  add rsp, 060h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 152: _fillQuadWords(newBlock + oldLength, oldLength, 0);
  mov rdi, rbx                                                   ; make a copy of newBlock's value in case it changes before we use it
  mov r12, qword ptr [rsp + 020h]                                ; make a copy of newBlock's type in case it changes before we use it
  mov r13, qword ptr [rsp + 040h]                                ; make a copy of oldLength's value in case it changes before we use it
  mov r14, qword ptr [rsp + 048h]                                ; make a copy of oldLength's type in case it changes before we use it
  cmp r12, 000h                                                  ; compare type of copy of newBlock to <sentinel>
  jne func$_growBlockList$newblock$TypeMatch                     ; skip next block if copy of newBlock is not sentinel
    ; Error handling block for newBlock
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r15, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r15                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r10, qword ptr [rsp + 048h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 030h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rax, qword ptr [rsp + 048h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 030h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_growBlockList$newblock$TypeMatch:                        ; after block
  cmp r14, 000h                                                  ; compare type of copy of oldLength to <sentinel>
  jne func$_growBlockList$oldlength$TypeMatch$1                  ; skip next block if copy of oldLength is not sentinel
    ; Error handling block for oldLength
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 038h], rbx                              ; move newBlock variable's value out of rbx
    mov rbx, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rbx                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rsi, qword ptr [rsp + 028h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 028h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 020h], rdi                              ; move copy of newBlock's value out of rdi
    lea rdi, qword ptr [rsp + 028h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rbx, qword ptr [rsp + 038h]                              ; restoring slots to previous scope state
    mov rdi, qword ptr [rsp + 010h]                              ; restoring slots to previous scope state
  func$_growBlockList$oldlength$TypeMatch$1:                     ; after block
  mov qword ptr [rsp + 038h], r12                                ; move copy of newBlock's type out of r12
  mov r12, rdi                                                   ; assign value of copy of newBlock to value of + operator result
  add r12, r13                                                   ; compute (copy of newBlock) + (copy of oldLength) (result in + operator result)
  mov r13, qword ptr [rsp + 040h]                                ; make a copy of oldLength's value in case it changes before we use it
  mov r14, qword ptr [rsp + 048h]                                ; make a copy of oldLength's type in case it changes before we use it
  ; Call _fillQuadWords with 3 arguments
  push 000h                                                      ; value of argument #3 (0)
  push 01fh                                                      ; type of argument #3 (Integer'31)
  push r13                                                       ; value of argument #2 (copy of oldLength)
  push r14                                                       ; type of argument #2
  push r12                                                       ; value of argument #1 (+ operator result)
  push 01fh                                                      ; type of argument #1 (Integer'31)
  mov qword ptr [rsp + 048h], rbx                                ; move newBlock variable's value out of rbx
  lea rbx, qword ptr [rsp + 068h]                                ; load address of return value's value
  push rbx                                                       ; internal argument 6: pointer to return value slot's value
  lea rbx, qword ptr [rsp + 048h]                                ; load address of return value's type
  push rbx                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 003h                                                  ; internal argument 1: number of actual arguments
  call func$_fillQuadWords                                       ; jump to subroutine
  add rsp, 060h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 153: _free(_blockListStart);
  mov rsi, qword ptr _blockListStartValue                        ; make a copy of _blockListStart's value in case it changes before we use it
  mov rdi, qword ptr _blockListStartType                         ; make a copy of _blockListStart's type in case it changes before we use it
  ; Call _free with 1 arguments
  push rsi                                                       ; value of argument #1 (copy of _blockListStart)
  push rdi                                                       ; type of argument #1
  lea r15, qword ptr [rsp + 048h]                                ; load address of return value's value
  push r15                                                       ; internal argument 6: pointer to return value slot's value
  lea r15, qword ptr [rsp + 028h]                                ; load address of return value's type
  push r15                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call func$_free                                                ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 154: _blockListStart = newBlock;
  mov r10, qword ptr [rsp + 018h]                                ; make a copy of newBlock's value in case it changes before we use it
  mov rax, qword ptr [rsp + 020h]                                ; make a copy of newBlock's type in case it changes before we use it
  cmp rax, 000h                                                  ; compare type of copy of newBlock to <sentinel>
  jne func$_growBlockList$copyOfNewblock$TypeMatch               ; skip next block if copy of newBlock is not sentinel
    ; Error handling block for copy of newBlock
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rbx, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push rbx                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rsi, qword ptr [rsp + 048h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 028h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 048h], r10                              ; move copy of newBlock's value out of r10
    mov qword ptr [rsp + 040h], rax                              ; move copy of newBlock's type out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rdi, qword ptr [rsp + 048h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 028h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 000h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 008h]                              ; restoring slots to previous scope state
  func$_growBlockList$copyOfNewblock$TypeMatch:                  ; after block
  mov qword ptr _blockListStartValue, r10                        ; store value
  mov qword ptr _blockListStartType, rax                         ; store type
  ; Line 155: _blockListNext = newBlock + oldLength;
  mov r12, qword ptr [rsp + 018h]                                ; make a copy of newBlock's value in case it changes before we use it
  mov r13, qword ptr [rsp + 020h]                                ; make a copy of newBlock's type in case it changes before we use it
  mov r14, qword ptr [rsp + 040h]                                ; make a copy of oldLength's value in case it changes before we use it
  mov r15, qword ptr [rsp + 048h]                                ; make a copy of oldLength's type in case it changes before we use it
  cmp r13, 000h                                                  ; compare type of copy of newBlock to <sentinel>
  jne func$_growBlockList$newblock$TypeMatch$1                   ; skip next block if copy of newBlock is not sentinel
    ; Error handling block for newBlock
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 058h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 058h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_growBlockList$newblock$TypeMatch$1:                      ; after block
  cmp r15, 000h                                                  ; compare type of copy of oldLength to <sentinel>
  jne func$_growBlockList$oldlength$TypeMatch$2                  ; skip next block if copy of oldLength is not sentinel
    ; Error handling block for oldLength
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rsi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rsi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rdi, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 058h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 050h], r12                              ; move copy of newBlock's value out of r12
    lea r12, qword ptr [rsp + 058h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 050h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r12, qword ptr [rsp + 040h]                              ; restoring slots to previous scope state
  func$_growBlockList$oldlength$TypeMatch$2:                     ; after block
  mov qword ptr [rsp + 048h], r13                                ; move copy of newBlock's type out of r13
  mov r13, r12                                                   ; assign value of copy of newBlock to value of + operator result
  add r13, r14                                                   ; compute (copy of newBlock) + (copy of oldLength) (result in + operator result)
  mov qword ptr _blockListNextValue, r13                         ; store value
  mov qword ptr _blockListNextType, 01fh                         ; store type (Integer'31)
  ; Line 156: _blockListEnd = newBlock + newLength;
  mov rax, qword ptr [rsp + 018h]                                ; make a copy of newBlock's value in case it changes before we use it
  mov rbx, qword ptr [rsp + 020h]                                ; make a copy of newBlock's type in case it changes before we use it
  mov rsi, qword ptr [rsp + 030h]                                ; make a copy of newLength's value in case it changes before we use it
  mov rdi, qword ptr [rsp + 028h]                                ; make a copy of newLength's type in case it changes before we use it
  cmp rbx, 000h                                                  ; compare type of copy of newBlock to <sentinel>
  jne func$_growBlockList$newblock$TypeMatch$2                   ; skip next block if copy of newBlock is not sentinel
    ; Error handling block for newBlock
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r12, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r12                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r13, qword ptr [rsp + 058h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 058h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 078h], rax                              ; move copy of newBlock's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r14, qword ptr [rsp + 058h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 058h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 038h]                              ; restoring slots to previous scope state
  func$_growBlockList$newblock$TypeMatch$2:                      ; after block
  cmp rdi, 000h                                                  ; compare type of copy of newLength to <sentinel>
  jne func$_growBlockList$newlength$TypeMatch                    ; skip next block if copy of newLength is not sentinel
    ; Error handling block for newLength
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r15, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r15                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r10, qword ptr [rsp + 058h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 058h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 078h], rax                              ; move copy of newBlock's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rax, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 058h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 038h]                              ; restoring slots to previous scope state
  func$_growBlockList$newlength$TypeMatch:                       ; after block
  mov qword ptr [rsp + 048h], rbx                                ; move copy of newBlock's type out of rbx
  mov rbx, rax                                                   ; assign value of copy of newBlock to value of + operator result
  add rbx, rsi                                                   ; compute (copy of newBlock) + (copy of newLength) (result in + operator result)
  mov qword ptr _blockListEndValue, rbx                          ; store value
  mov qword ptr _blockListEndType, 01fh                          ; store type (Integer'31)
  ; Implicit return from _growBlockList
  mov r10, qword ptr [rbp + 030h]                                ; get pointer to return value of _growBlockList into register to dereference it
  mov qword ptr [r10], 000h                                      ; _growBlockList return value
  mov rax, qword ptr [rbp + 028h]                                ; get pointer to return value type of _growBlockList into register to dereference it
  mov qword ptr [rax], 01dh                                      ; type of _growBlockList return value (Null'29)
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 058h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; _advanceToNextBlock
dq func$_advanceToNextBlock$annotation
func$_advanceToNextBlock:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 038h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 078h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 000h                                                  ; compare parameter count of _advanceToNextBlock to 0 (integer)
  je func$_advanceToNextBlock$parameterCountCheck$continuation   ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_advanceToNextBlock$parameterCountCheck$continuation:     ; end of parameter count check
  ; Line 160: assert(_gcLocked > 0, '_advanceToNextBlock called without _gcLoc...
  mov rsi, qword ptr _gcLockedValue                              ; make a copy of _gcLocked's value in case it changes before we use it
  mov rdi, qword ptr _gcLockedType                               ; make a copy of _gcLocked's type in case it changes before we use it
  cmp rdi, 000h                                                  ; compare type of copy of _gcLocked to <sentinel>
  jne func$_advanceToNextBlock$Gclocked$TypeMatch                ; skip next block if copy of _gcLocked is not sentinel
    ; Error handling block for _gcLocked
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r12, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r12                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r13, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_advanceToNextBlock$Gclocked$TypeMatch:                   ; after block
  xor rbx, rbx                                                   ; clear > operator result
  cmp rsi, 000h                                                  ; compare copy of _gcLocked with 0
  setg bl                                                        ; store result in > operator result
  ; Call assert with 2 arguments
  mov r13, offset string$8                                       ; reading string for push
  push r13                                                       ; value of argument #2 (string)
  push 020h                                                      ; type of argument #2 (String'32)
  push rbx                                                       ; value of argument #1 (> operator result)
  push 01eh                                                      ; type of argument #1 (Boolean'30)
  lea r14, qword ptr [rsp + 048h]                                ; load address of return value's value
  push r14                                                       ; internal argument 6: pointer to return value slot's value
  lea r14, qword ptr [rsp + 048h]                                ; load address of return value's type
  push r14                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 002h                                                  ; internal argument 1: number of actual arguments
  call func$assert                                               ; jump to subroutine
  add rsp, 050h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 161: Integer last = _blockListNext;
  mov r15, qword ptr _blockListNextValue                         ; make a copy of _blockListNext's value in case it changes before we use it
  mov r10, qword ptr _blockListNextType                          ; make a copy of _blockListNext's type in case it changes before we use it
  cmp r10, 000h                                                  ; compare type of copy of _blockListNext to <sentinel>
  jne func$_advanceToNextBlock$copyOfBlocklistnext$TypeMatch     ; skip next block if copy of _blockListNext is not sentinel
    ; Error handling block for copy of _blockListNext
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rax, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push rax                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 058h], r10                              ; move copy of _blockListNext's type out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rsi, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
  func$_advanceToNextBlock$copyOfBlocklistnext$TypeMatch:        ; after block
  mov rdi, r15                                                   ; value initialization of variable declaration for last variable (copy of _blockListNext)
  mov r12, r10                                                   ; type initialization of variable declaration for last variable
  func$_advanceToNextBlock$while$top:                            ; top of while
    ; Line 163: _blockListNext += _blockEntrySize;
    mov r13, qword ptr _blockListNextValue                       ; make a copy of _blockListNext's value in case it changes before we use it
    mov r14, qword ptr _blockListNextType                        ; make a copy of _blockListNext's type in case it changes before we use it
    mov r15, qword ptr _blockEntrySizeValue                      ; make a copy of _blockEntrySize's value in case it changes before we use it
    mov r10, qword ptr _blockEntrySizeType                       ; make a copy of _blockEntrySize's type in case it changes before we use it
    cmp r14, 000h                                                ; compare type of copy of _blockListNext to <sentinel>
    jne func$_advanceToNextBlock$while$copyOfBlocklistnext$TypeMatch ; skip next block if copy of _blockListNext is not sentinel
      ; Error handling block for copy of _blockListNext
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rax, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rax                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rbx, qword ptr [rsp + 038h]                            ; load address of return value's value
      push rbx                                                   ; internal argument 6: pointer to return value slot's value
      lea rbx, qword ptr [rsp + 038h]                            ; load address of return value's type
      push rbx                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 058h], r10                            ; move copy of _blockEntrySize's type out of r10
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea rsi, qword ptr [rsp + 038h]                            ; load address of return value's value
      push rsi                                                   ; internal argument 6: pointer to return value slot's value
      lea rsi, qword ptr [rsp + 038h]                            ; load address of return value's type
      push rsi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov r10, qword ptr [rsp + 018h]                            ; restoring slots to previous scope state
    func$_advanceToNextBlock$while$copyOfBlocklistnext$TypeMatch:  ; after block
    cmp r10, 000h                                                ; compare type of copy of _blockEntrySize to <sentinel>
    jne func$_advanceToNextBlock$while$copyOfBlockentrysize$TypeMatch ; skip next block if copy of _blockEntrySize is not sentinel
      ; Error handling block for copy of _blockEntrySize
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov qword ptr [rsp + 028h], rdi                            ; move last variable's value out of rdi
      mov rdi, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rdi                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      mov qword ptr [rsp + 028h], r12                            ; move last variable's type out of r12
      lea r12, qword ptr [rsp + 030h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 028h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 048h], r10                            ; move copy of _blockEntrySize's type out of r10
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      mov qword ptr [rsp + 020h], r13                            ; move copy of _blockListNext's value out of r13
      lea r13, qword ptr [rsp + 030h]                            ; load address of return value's value
      push r13                                                   ; internal argument 6: pointer to return value slot's value
      lea r13, qword ptr [rsp + 018h]                            ; load address of return value's type
      push r13                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov r10, qword ptr [rsp + 008h]                            ; restoring slots to previous scope state
      mov rdi, qword ptr [rsp + 028h]                            ; restoring slots to previous scope state
      mov r12, qword ptr [rsp + 018h]                            ; restoring slots to previous scope state
      mov r13, qword ptr [rsp + 010h]                            ; restoring slots to previous scope state
    func$_advanceToNextBlock$while$copyOfBlockentrysize$TypeMatch:  ; after block
    mov qword ptr [rsp + 028h], r14                              ; move copy of _blockListNext's type out of r14
    mov r14, r13                                                 ; assign value of copy of _blockListNext to value of += operator result
    add r14, r15                                                 ; += operator
    mov qword ptr _blockListNextValue, r14                       ; store value
    mov qword ptr _blockListNextType, 01fh                       ; store type (Integer'31)
    ; Line 164: if (_blockListNext == last) { ...
    mov rbx, qword ptr _blockListNextValue                       ; make a copy of _blockListNext's value in case it changes before we use it
    mov rsi, qword ptr _blockListNextType                        ; make a copy of _blockListNext's type in case it changes before we use it
    mov qword ptr [rsp + 028h], rdi                              ; move last variable's value out of rdi
    mov rdi, qword ptr [rsp + 028h]                              ; make a copy of last's value in case it changes before we use it
    mov qword ptr [rsp + 020h], r12                              ; move last variable's type out of r12
    mov r12, qword ptr [rsp + 020h]                              ; make a copy of last's type in case it changes before we use it
    xor r13, r13                                                 ; zero value result of == (testing copy of _blockListNext and copy of last) to put the boolean in
    cmp rbx, rdi                                                 ; values equal?
    sete r13b                                                    ; put result in value result of == (testing copy of _blockListNext and copy of last)
    mov r14, 01eh                                                ; value result of == (testing copy of _blockListNext and copy of last) is a Boolean'30
    xor r15, r15                                                 ; zero type result of == (testing copy of _blockListNext and copy of last) to put the boolean in
    cmp rsi, r12                                                 ; types equal?
    sete r15b                                                    ; put result in type result of == (testing copy of _blockListNext and copy of last)
    mov r10, 01eh                                                ; type result of == (testing copy of _blockListNext and copy of last) is a Boolean'30
    mov rax, r13                                                 ; assign value of value result of == (testing copy of _blockListNext and copy of last) to value of == operator result
    and rax, r15                                                 ; && type temp and value temp
    cmp rax, 000h                                                ; compare == operator result to false
    je func$_advanceToNextBlock$while$if$continuation            ; _blockListNext == last
      ; Line 166: _growBlockList();
      ; Call _growBlockList with 0 arguments
      lea rsi, qword ptr [rsp + 018h]                            ; load address of return value's value
      push rsi                                                   ; internal argument 6: pointer to return value slot's value
      lea rsi, qword ptr [rsp + 018h]                            ; load address of return value's type
      push rsi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 000h                                              ; internal argument 1: number of actual arguments
      call func$_growBlockList                                   ; jump to subroutine
      add rsp, 030h                                              ; release shadow space and arguments (result in stack pointer)
      ; Line 167: return;
      mov r14, qword ptr [rbp + 030h]                            ; get pointer to return value of _advanceToNextBlock into register to dereference it
      mov qword ptr [r14], 000h                                  ; _advanceToNextBlock return value
      mov r15, qword ptr [rbp + 028h]                            ; get pointer to return value type of _advanceToNextBlock into register to dereference it
      mov qword ptr [r15], 01dh                                  ; type of _advanceToNextBlock return value (Null'29)
      jmp func$_advanceToNextBlock$epilog                        ; return
    func$_advanceToNextBlock$while$if$continuation:              ; end of if
    ; Line 169: if (_blockListNext == _blockListEnd) { ...
    mov r10, qword ptr _blockListNextValue                       ; make a copy of _blockListNext's value in case it changes before we use it
    mov rax, qword ptr _blockListNextType                        ; make a copy of _blockListNext's type in case it changes before we use it
    mov rbx, qword ptr _blockListEndValue                        ; make a copy of _blockListEnd's value in case it changes before we use it
    mov rsi, qword ptr _blockListEndType                         ; make a copy of _blockListEnd's type in case it changes before we use it
    xor rdi, rdi                                                 ; zero value result of == (testing copy of _blockListNext and copy of _blockListEnd) to put the boolean in
    cmp r10, rbx                                                 ; values equal?
    sete dil                                                     ; put result in value result of == (testing copy of _blockListNext and copy of _blockListEnd)
    mov r12, 01eh                                                ; value result of == (testing copy of _blockListNext and copy of _blockListEnd) is a Boolean'30
    xor r13, r13                                                 ; zero type result of == (testing copy of _blockListNext and copy of _blockListEnd) to put the boolean in
    cmp rax, rsi                                                 ; types equal?
    sete r13b                                                    ; put result in type result of == (testing copy of _blockListNext and copy of _blockListEnd)
    mov r9, 01eh                                                 ; type result of == (testing copy of _blockListNext and copy of _blockListEnd) is a Boolean'30
    mov r8, rdi                                                  ; assign value of value result of == (testing copy of _blockListNext and copy of _blockListEnd) to value of == operator result
    and r8, r13                                                  ; && type temp and value temp
    cmp r8, 000h                                                 ; compare == operator result to false
    je func$_advanceToNextBlock$while$if$continuation$1          ; _blockListNext == _blockListEnd
      ; Line 170: _blockListNext = _blockListStart;
      mov rdx, qword ptr _blockListStartValue                    ; make a copy of _blockListStart's value in case it changes before we use it
      mov rcx, qword ptr _blockListStartType                     ; make a copy of _blockListStart's type in case it changes before we use it
      cmp rcx, 000h                                              ; compare type of copy of _blockListStart to <sentinel>
      jne func$_advanceToNextBlock$while$while$if$1$copyOfBlockliststart$TypeMatch ; skip next block if copy of _blockListStart is not sentinel
        ; Error handling block for copy of _blockListStart
        int 3                                                    ; call debugger
        ;  - print(assignmentTypeCheckFailureMessage)
        ; Call __print with 1 arguments
        mov r14, offset assignmentTypeCheckFailureMessage        ; reading assignmentTypeCheckFailureMessage for push
        push r14                                                 ; value of argument #1 (assignmentTypeCheckFailureMessage)
        push 020h                                                ; type of argument #1 (String'32)
        lea r15, qword ptr [rsp + 028h]                          ; load address of return value's value
        push r15                                                 ; internal argument 6: pointer to return value slot's value
        lea r15, qword ptr [rsp + 028h]                          ; load address of return value's type
        push r15                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov qword ptr [rsp + 048h], rdx                          ; move copy of _blockListStart's value out of rdx
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov qword ptr [rsp + 040h], rcx                          ; move copy of _blockListStart's type out of rcx
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$__print                                        ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        ;  - exit(1)
        ; Call exit with 1 arguments
        push 001h                                                ; value of argument #1 (1 (integer))
        push 01fh                                                ; type of argument #1 (Integer'31)
        lea r10, qword ptr [rsp + 028h]                          ; load address of return value's value
        push r10                                                 ; internal argument 6: pointer to return value slot's value
        lea r10, qword ptr [rsp + 028h]                          ; load address of return value's type
        push r10                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$exit                                           ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        mov rdx, qword ptr [rsp + 008h]                          ; restoring slots to previous scope state
        mov rcx, qword ptr [rsp + 000h]                          ; restoring slots to previous scope state
      func$_advanceToNextBlock$while$while$if$1$copyOfBlockliststart$TypeMatch:  ; after block
      mov qword ptr _blockListNextValue, rdx                     ; store value
      mov qword ptr _blockListNextType, rcx                      ; store type
    func$_advanceToNextBlock$while$if$continuation$1:            ; end of if
    ; Line 172: Integer pointer = __readFromAddress(_blockListNext);
    mov rax, qword ptr _blockListNextValue                       ; make a copy of _blockListNext's value in case it changes before we use it
    mov rbx, qword ptr _blockListNextType                        ; make a copy of _blockListNext's type in case it changes before we use it
    ; Call __readFromAddress with 1 arguments
    mov r13, qword ptr [rax]                                     ; dereference first argument of __readFromAddress
    mov rax, r13                                                 ; value initialization of variable declaration for pointer variable (dereferenced copy of _blockListNext)
    mov rbx, 01fh                                                ; type initialization of variable declaration for pointer variable (Integer'31)
    ; Line 173: if (pointer == 0) { ...
    mov rsi, rax                                                 ; make a copy of pointer's value in case it changes before we use it
    mov rdi, rbx                                                 ; make a copy of pointer's type in case it changes before we use it
    xor r12, r12                                                 ; zero value result of == (testing copy of pointer and 0) to put the boolean in
    cmp rsi, 000h                                                ; values equal?
    sete r12b                                                    ; put result in value result of == (testing copy of pointer and 0)
    mov r13, 01eh                                                ; value result of == (testing copy of pointer and 0) is a Boolean'30
    xor r14, r14                                                 ; zero type result of == (testing copy of pointer and 0) to put the boolean in
    cmp rdi, 01fh                                                ; types equal?
    sete r14b                                                    ; put result in type result of == (testing copy of pointer and 0)
    mov r15, 01eh                                                ; type result of == (testing copy of pointer and 0) is a Boolean'30
    mov r10, r12                                                 ; assign value of value result of == (testing copy of pointer and 0) to value of == operator result
    and r10, r14                                                 ; && type temp and value temp
    cmp r10, 000h                                                ; compare == operator result to false
    je func$_advanceToNextBlock$while$if$continuation$2          ; pointer == 0
      ; Line 175: return;
      mov rbx, qword ptr [rbp + 030h]                            ; get pointer to return value of _advanceToNextBlock into register to dereference it
      mov qword ptr [rbx], 000h                                  ; _advanceToNextBlock return value
      mov rsi, qword ptr [rbp + 028h]                            ; get pointer to return value type of _advanceToNextBlock into register to dereference it
      mov qword ptr [rsi], 01dh                                  ; type of _advanceToNextBlock return value (Null'29)
      jmp func$_advanceToNextBlock$epilog                        ; return
    func$_advanceToNextBlock$while$if$continuation$2:            ; end of if
    mov r12, qword ptr [rsp + 020h]                              ; restoring slots to previous scope state
    mov rdi, qword ptr [rsp + 028h]                              ; restoring slots to previous scope state
    jmp func$_advanceToNextBlock$while$top                       ; return to top of while
  func$_advanceToNextBlock$while$bottom:                         ; bottom of while
  ; Implicit return from _advanceToNextBlock
  mov r14, qword ptr [rbp + 030h]                                ; get pointer to return value of _advanceToNextBlock into register to dereference it
  mov qword ptr [r14], 000h                                      ; _advanceToNextBlock return value
  mov r15, qword ptr [rbp + 028h]                                ; get pointer to return value type of _advanceToNextBlock into register to dereference it
  mov qword ptr [r15], 01dh                                      ; type of _advanceToNextBlock return value (Null'29)
  func$_advanceToNextBlock$epilog: 
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 038h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; _constructor
dq func$_constructor$annotation
func$_constructor:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 038h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 078h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 003h                                                  ; compare parameter count of _constructor to 3 (integer)
  je func$_constructor$parameterCountCheck$continuation          ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_constructor$parameterCountCheck$continuation:            ; end of parameter count check
  ; Check type of parameter 0, typeCode (expecting Integer)
  mov rsi, qword ptr [rbp + 038h]                                ; store typeCode's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that typeCode is Integer
  jc func$_constructor$typecode$TypeMatch                        ; skip next block if the type matches
    ; Error handling block for typeCode
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_constructor$typecode$TypeMatch:                          ; after block
  ; Check type of parameter 1, length (expecting Integer)
  mov r10, qword ptr [rbp + 048h]                                ; store length's type in testByte value slot
  mov rax, r10                                                   ; move testByte to testByte
  mov rbx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rbx                                                        ; adjust to the relative start of that type's entry in the type table
  mov rsi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rsi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that length is Integer
  jc func$_constructor$length$TypeMatch                          ; skip next block if the type matches
    ; Error handling block for length
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_constructor$length$TypeMatch:                            ; after block
  ; Check type of parameter 2, size (expecting Integer)
  mov r14, qword ptr [rbp + 058h]                                ; store size's type in testByte value slot
  mov rax, r14                                                   ; move testByte to testByte
  mov r15, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r15                                                        ; adjust to the relative start of that type's entry in the type table
  mov r10, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r10                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that size is Integer
  jc func$_constructor$size$TypeMatch                            ; skip next block if the type matches
    ; Error handling block for size
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rbx, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push rbx                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rsi, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rdi, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_constructor$size$TypeMatch:                              ; after block
  ; Line 181: assert(_gcLocked > 0, '_constructor called without _gcLocked set...
  mov r12, qword ptr _gcLockedValue                              ; make a copy of _gcLocked's value in case it changes before we use it
  mov r13, qword ptr _gcLockedType                               ; make a copy of _gcLocked's type in case it changes before we use it
  cmp r13, 000h                                                  ; compare type of copy of _gcLocked to <sentinel>
  jne func$_constructor$Gclocked$TypeMatch                       ; skip next block if copy of _gcLocked is not sentinel
    ; Error handling block for _gcLocked
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r14, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r14                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_constructor$Gclocked$TypeMatch:                          ; after block
  xor rdi, rdi                                                   ; clear > operator result
  cmp r12, 000h                                                  ; compare copy of _gcLocked with 0
  setg dil                                                       ; store result in > operator result
  ; Call assert with 2 arguments
  mov rax, offset string$9                                       ; reading string for push
  push rax                                                       ; value of argument #2 (string)
  push 020h                                                      ; type of argument #2 (String'32)
  push rdi                                                       ; value of argument #1 (> operator result)
  push 01eh                                                      ; type of argument #1 (Boolean'30)
  lea r15, qword ptr [rsp + 048h]                                ; load address of return value's value
  push r15                                                       ; internal argument 6: pointer to return value slot's value
  lea r15, qword ptr [rsp + 048h]                                ; load address of return value's type
  push r15                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 002h                                                  ; internal argument 1: number of actual arguments
  call func$assert                                               ; jump to subroutine
  add rsp, 050h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 182: assert(size >= length, 'length cannot be bigger than size');
  cmp qword ptr [rbp + 058h], 000h                               ; compare type of size to <sentinel>
  jne func$_constructor$size$TypeMatch$1                         ; skip next block if size is not sentinel
    ; Error handling block for size
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rsi, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_constructor$size$TypeMatch$1:                            ; after block
  cmp qword ptr [rbp + 048h], 000h                               ; compare type of length to <sentinel>
  jne func$_constructor$length$TypeMatch$1                       ; skip next block if length is not sentinel
    ; Error handling block for length
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_constructor$length$TypeMatch$1:                          ; after block
  mov r14, qword ptr [rbp + 050h]                                ; reading second value to compare (<ParameterSlot:Integer'31 ("length")>)
  xor rax, rax                                                   ; clear >= operator result
  cmp qword ptr [rbp + 060h], r14                                ; compare size with length
  setge al                                                       ; store result in >= operator result
  ; Call assert with 2 arguments
  mov rsi, offset string$10                                      ; reading string for push
  push rsi                                                       ; value of argument #2 (string)
  push 020h                                                      ; type of argument #2 (String'32)
  push rax                                                       ; value of argument #1 (>= operator result)
  push 01eh                                                      ; type of argument #1 (Boolean'30)
  lea rdi, qword ptr [rsp + 048h]                                ; load address of return value's value
  push rdi                                                       ; internal argument 6: pointer to return value slot's value
  lea rdi, qword ptr [rsp + 048h]                                ; load address of return value's type
  push rdi                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 002h                                                  ; internal argument 1: number of actual arguments
  call func$assert                                               ; jump to subroutine
  add rsp, 050h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 183: Integer resultPointer = _alloc(64 /* 0x40 */ + 16 /* 0x10 */ * s...
  cmp qword ptr [rbp + 058h], 000h                               ; compare type of size to <sentinel>
  jne func$_constructor$size$TypeMatch$2                         ; skip next block if size is not sentinel
    ; Error handling block for size
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rax, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rax                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r15, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_constructor$size$TypeMatch$2:                            ; after block
  mov rbx, 010h                                                  ; read left hand side operand of imul (16 /* 0x10 */), which is also the result
  imul rbx, qword ptr [rbp + 060h]                               ; compute (16 /* 0x10 */) * (size) (result in * operator result)
  mov r15, 040h                                                  ; assign value of 64 /* 0x40 */ to value of + operator result
  add r15, rbx                                                   ; compute (64 /* 0x40 */) + (* operator result) (result in + operator result)
  ; Call _alloc with 1 arguments
  push r15                                                       ; value of argument #1 (+ operator result)
  push 01fh                                                      ; type of argument #1 (Integer'31)
  lea rdi, qword ptr [rsp + 038h]                                ; load address of return value's value
  push rdi                                                       ; internal argument 6: pointer to return value slot's value
  lea rdi, qword ptr [rsp + 038h]                                ; load address of return value's type
  push rdi                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call func$_alloc                                               ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  cmp qword ptr [rsp + 020h], 000h                               ; compare type of _alloc return value to <sentinel>
  jne func$_constructor$AllocReturnValue$TypeMatch               ; skip next block if _alloc return value is not sentinel
    ; Error handling block for _alloc return value
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r12, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push r12                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r13, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r14, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_constructor$AllocReturnValue$TypeMatch:                  ; after block
  mov rax, qword ptr [rsp + 028h]                                ; value initialization of variable declaration for resultPointer variable (_alloc return value)
  mov r15, qword ptr [rsp + 020h]                                ; type initialization of variable declaration for resultPointer variable
  ; Line 184: __writeToAddress(resultPointer + _gcBlockHeaderRefCount, 0);
  mov r10, rax                                                   ; make a copy of resultPointer's value in case it changes before we use it
  mov rbx, r15                                                   ; make a copy of resultPointer's type in case it changes before we use it
  mov rsi, qword ptr _gcBlockHeaderRefCountValue                 ; make a copy of _gcBlockHeaderRefCount's value in case it changes before we use it
  mov rdi, qword ptr _gcBlockHeaderRefCountType                  ; make a copy of _gcBlockHeaderRefCount's type in case it changes before we use it
  cmp rbx, 000h                                                  ; compare type of copy of resultPointer to <sentinel>
  jne func$_constructor$resultpointer$TypeMatch                  ; skip next block if copy of resultPointer is not sentinel
    ; Error handling block for resultPointer
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r12, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r12                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r13, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 058h], r10                              ; move copy of resultPointer's value out of r10
    mov qword ptr [rsp + 050h], rax                              ; move resultPointer variable's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 010h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
  func$_constructor$resultpointer$TypeMatch:                     ; after block
  cmp rdi, 000h                                                  ; compare type of copy of _gcBlockHeaderRefCount to <sentinel>
  jne func$_constructor$Gcblockheaderrefcount$TypeMatch          ; skip next block if copy of _gcBlockHeaderRefCount is not sentinel
    ; Error handling block for _gcBlockHeaderRefCount
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 028h], rax                              ; move resultPointer variable's value out of rax
    mov rax, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rax                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    mov qword ptr [rsp + 028h], r15                              ; move resultPointer variable's type out of r15
    lea r15, qword ptr [rsp + 030h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 048h], r10                              ; move copy of resultPointer's value out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 030h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 028h]                              ; restoring slots to previous scope state
    mov r15, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 008h]                              ; restoring slots to previous scope state
  func$_constructor$Gcblockheaderrefcount$TypeMatch:             ; after block
  mov qword ptr [rsp + 028h], rbx                                ; move copy of resultPointer's type out of rbx
  mov rbx, r10                                                   ; assign value of copy of resultPointer to value of + operator result
  add rbx, rsi                                                   ; compute (copy of resultPointer) + (copy of _gcBlockHeaderRefCount) (result in + operator result)
  ; Call __writeToAddress with 2 arguments
  mov qword ptr [rbx], 000h                                      ; __writeToAddress
  ; Line 185: __writeToAddress(resultPointer + _gcBlockHeaderLength, length);
  mov r13, rax                                                   ; make a copy of resultPointer's value in case it changes before we use it
  mov r14, r15                                                   ; make a copy of resultPointer's type in case it changes before we use it
  mov qword ptr [rsp + 028h], rax                                ; move resultPointer variable's value out of rax
  mov rax, qword ptr _gcBlockHeaderLengthValue                   ; make a copy of _gcBlockHeaderLength's value in case it changes before we use it
  mov qword ptr [rsp + 020h], r15                                ; move resultPointer variable's type out of r15
  mov r15, qword ptr _gcBlockHeaderLengthType                    ; make a copy of _gcBlockHeaderLength's type in case it changes before we use it
  cmp r14, 000h                                                  ; compare type of copy of resultPointer to <sentinel>
  jne func$_constructor$resultpointer$TypeMatch$1                ; skip next block if copy of resultPointer is not sentinel
    ; Error handling block for resultPointer
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rbx, qword ptr [rsp + 028h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 028h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 048h], rax                              ; move copy of _gcBlockHeaderLength's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rsi, qword ptr [rsp + 028h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 028h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 008h]                              ; restoring slots to previous scope state
  func$_constructor$resultpointer$TypeMatch$1:                   ; after block
  cmp r15, 000h                                                  ; compare type of copy of _gcBlockHeaderLength to <sentinel>
  jne func$_constructor$Gcblockheaderlength$TypeMatch            ; skip next block if copy of _gcBlockHeaderLength is not sentinel
    ; Error handling block for _gcBlockHeaderLength
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 048h], rax                              ; move copy of _gcBlockHeaderLength's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 020h], r13                              ; move copy of resultPointer's value out of r13
    lea r13, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 008h]                              ; restoring slots to previous scope state
    mov r13, qword ptr [rsp + 010h]                              ; restoring slots to previous scope state
  func$_constructor$Gcblockheaderlength$TypeMatch:               ; after block
  mov qword ptr [rsp + 018h], r14                                ; move copy of resultPointer's type out of r14
  mov r14, r13                                                   ; assign value of copy of resultPointer to value of + operator result
  add r14, rax                                                   ; compute (copy of resultPointer) + (copy of _gcBlockHeaderLength) (result in + operator result)
  ; Call __writeToAddress with 2 arguments
  mov rbx, qword ptr [rbp + 050h]                                ; read second operand of mov (length) for MoveToDerefInstruction
  mov qword ptr [r14], rbx                                       ; __writeToAddress
  ; Line 186: __writeToAddress(resultPointer + _gcBlockHeaderScratchSpace, 0);...
  mov rsi, qword ptr [rsp + 028h]                                ; make a copy of resultPointer's value in case it changes before we use it
  mov rdi, qword ptr [rsp + 020h]                                ; make a copy of resultPointer's type in case it changes before we use it
  mov r12, qword ptr _gcBlockHeaderScratchSpaceValue             ; make a copy of _gcBlockHeaderScratchSpace's value in case it changes before we use it
  mov r13, qword ptr _gcBlockHeaderScratchSpaceType              ; make a copy of _gcBlockHeaderScratchSpace's type in case it changes before we use it
  cmp rdi, 000h                                                  ; compare type of copy of resultPointer to <sentinel>
  jne func$_constructor$resultpointer$TypeMatch$2                ; skip next block if copy of resultPointer is not sentinel
    ; Error handling block for resultPointer
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r14, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r14                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 028h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 028h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_constructor$resultpointer$TypeMatch$2:                   ; after block
  cmp r13, 000h                                                  ; compare type of copy of _gcBlockHeaderScratchSpace to <sentinel>
  jne func$_constructor$Gcblockheaderscratchspace$TypeMatch      ; skip next block if copy of _gcBlockHeaderScratchSpace is not sentinel
    ; Error handling block for _gcBlockHeaderScratchSpace
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rbx, qword ptr [rsp + 028h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 028h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 020h], rsi                              ; move copy of resultPointer's value out of rsi
    lea rsi, qword ptr [rsp + 028h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rsi, qword ptr [rsp + 010h]                              ; restoring slots to previous scope state
  func$_constructor$Gcblockheaderscratchspace$TypeMatch:         ; after block
  mov qword ptr [rsp + 018h], rdi                                ; move copy of resultPointer's type out of rdi
  mov rdi, rsi                                                   ; assign value of copy of resultPointer to value of + operator result
  add rdi, r12                                                   ; compute (copy of resultPointer) + (copy of _gcBlockHeaderScratchSpace) (result in + operator result)
  ; Call __writeToAddress with 2 arguments
  mov qword ptr [rdi], 000h                                      ; __writeToAddress
  ; Line 187: __writeToAddress(resultPointer + _gcBlockHeaderEntryPointer, _bl...
  mov rax, qword ptr [rsp + 028h]                                ; make a copy of resultPointer's value in case it changes before we use it
  mov r15, qword ptr [rsp + 020h]                                ; make a copy of resultPointer's type in case it changes before we use it
  mov r10, qword ptr _gcBlockHeaderEntryPointerValue             ; make a copy of _gcBlockHeaderEntryPointer's value in case it changes before we use it
  mov rbx, qword ptr _gcBlockHeaderEntryPointerType              ; make a copy of _gcBlockHeaderEntryPointer's type in case it changes before we use it
  cmp r15, 000h                                                  ; compare type of copy of resultPointer to <sentinel>
  jne func$_constructor$resultpointer$TypeMatch$3                ; skip next block if copy of resultPointer is not sentinel
    ; Error handling block for resultPointer
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rsi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rsi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rdi, qword ptr [rsp + 028h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 028h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 048h], r10                              ; move copy of _gcBlockHeaderEntryPointer's value out of r10
    mov qword ptr [rsp + 040h], rax                              ; move copy of resultPointer's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r12, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 000h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 008h]                              ; restoring slots to previous scope state
  func$_constructor$resultpointer$TypeMatch$3:                   ; after block
  cmp rbx, 000h                                                  ; compare type of copy of _gcBlockHeaderEntryPointer to <sentinel>
  jne func$_constructor$Gcblockheaderentrypointer$TypeMatch      ; skip next block if copy of _gcBlockHeaderEntryPointer is not sentinel
    ; Error handling block for _gcBlockHeaderEntryPointer
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 048h], r10                              ; move copy of _gcBlockHeaderEntryPointer's value out of r10
    mov qword ptr [rsp + 040h], rax                              ; move copy of resultPointer's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rax, qword ptr [rsp + 028h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 028h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 000h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 008h]                              ; restoring slots to previous scope state
  func$_constructor$Gcblockheaderentrypointer$TypeMatch:         ; after block
  mov qword ptr [rsp + 018h], r15                                ; move copy of resultPointer's type out of r15
  mov r15, rax                                                   ; assign value of copy of resultPointer to value of + operator result
  add r15, r10                                                   ; compute (copy of resultPointer) + (copy of _gcBlockHeaderEntryPointer) (result in + operator result)
  mov r10, qword ptr _blockListNextValue                         ; make a copy of _blockListNext's value in case it changes before we use it
  mov rbx, qword ptr _blockListNextType                          ; make a copy of _blockListNext's type in case it changes before we use it
  mov rsi, qword ptr _blockListStartValue                        ; make a copy of _blockListStart's value in case it changes before we use it
  mov rdi, qword ptr _blockListStartType                         ; make a copy of _blockListStart's type in case it changes before we use it
  cmp rbx, 000h                                                  ; compare type of copy of _blockListNext to <sentinel>
  jne func$_constructor$Blocklistnext$TypeMatch                  ; skip next block if copy of _blockListNext is not sentinel
    ; Error handling block for _blockListNext
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r12, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r12                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r13, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 048h], r10                              ; move copy of _blockListNext's value out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r14, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 008h]                              ; restoring slots to previous scope state
  func$_constructor$Blocklistnext$TypeMatch:                     ; after block
  cmp rdi, 000h                                                  ; compare type of copy of _blockListStart to <sentinel>
  jne func$_constructor$Blockliststart$TypeMatch                 ; skip next block if copy of _blockListStart is not sentinel
    ; Error handling block for _blockListStart
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rax, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rax                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    mov qword ptr [rsp + 020h], r15                              ; move + operator result's value out of r15
    lea r15, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 040h], r10                              ; move copy of _blockListNext's value out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r15, qword ptr [rsp + 010h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 000h]                              ; restoring slots to previous scope state
  func$_constructor$Blockliststart$TypeMatch:                    ; after block
  mov qword ptr [rsp + 018h], rbx                                ; move copy of _blockListNext's type out of rbx
  mov rbx, r10                                                   ; assign value of copy of _blockListNext to value of - operator result
  sub rbx, rsi                                                   ; compute (copy of _blockListNext) - (copy of _blockListStart)
  ; Call __writeToAddress with 2 arguments
  mov qword ptr [r15], rbx                                       ; __writeToAddress
  ; Line 188: __writeToAddress(_blockListNext, resultPointer);
  mov r13, qword ptr _blockListNextValue                         ; make a copy of _blockListNext's value in case it changes before we use it
  mov r14, qword ptr _blockListNextType                          ; make a copy of _blockListNext's type in case it changes before we use it
  mov rax, qword ptr [rsp + 028h]                                ; make a copy of resultPointer's value in case it changes before we use it
  mov r15, qword ptr [rsp + 020h]                                ; make a copy of resultPointer's type in case it changes before we use it
  ; Call __writeToAddress with 2 arguments
  mov qword ptr [r13], rax                                       ; __writeToAddress
  ; Line 189: _advanceToNextBlock();
  ; Call _advanceToNextBlock with 0 arguments
  lea r14, qword ptr [rsp + 018h]                                ; load address of return value's value
  push r14                                                       ; internal argument 6: pointer to return value slot's value
  lea r14, qword ptr [rsp + 018h]                                ; load address of return value's type
  push r14                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 000h                                                  ; internal argument 1: number of actual arguments
  call func$_advanceToNextBlock                                  ; jump to subroutine
  add rsp, 030h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 190: _debugLiveBlocks += 1;
  mov rax, qword ptr _debugLiveBlocksValue                       ; make a copy of _debugLiveBlocks's value in case it changes before we use it
  mov r15, qword ptr _debugLiveBlocksType                        ; make a copy of _debugLiveBlocks's type in case it changes before we use it
  cmp r15, 000h                                                  ; compare type of copy of _debugLiveBlocks to <sentinel>
  jne func$_constructor$copyOfDebugliveblocks$TypeMatch          ; skip next block if copy of _debugLiveBlocks is not sentinel
    ; Error handling block for copy of _debugLiveBlocks
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rbx, qword ptr [rsp + 028h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 028h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 048h], rax                              ; move copy of _debugLiveBlocks's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rsi, qword ptr [rsp + 028h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 028h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 008h]                              ; restoring slots to previous scope state
  func$_constructor$copyOfDebugliveblocks$TypeMatch:             ; after block
  mov r14, rax                                                   ; assign value of copy of _debugLiveBlocks to value of += operator result
  add r14, 001h                                                  ; += operator
  mov qword ptr _debugLiveBlocksValue, r14                       ; store value
  mov qword ptr _debugLiveBlocksType, 01fh                       ; store type (Integer'31)
  ; Line 191: return resultPointer __dynamic_as__ typeCode;
  mov rbx, qword ptr [rsp + 028h]                                ; make a copy of resultPointer's value in case it changes before we use it
  mov rsi, qword ptr [rsp + 020h]                                ; make a copy of resultPointer's type in case it changes before we use it
  mov rdi, rbx                                                   ; force cast of copy of resultPointer to the type with code typeCode
  mov r12, qword ptr [rbp + 040h]                                ; store typeCode value in force cast of copy of resultPointer to the type with code typeCode's type slot
  mov r13, r12                                                   ; store force cast of copy of resultPointer to the type with code typeCode's type in testByte value slot
  mov rax, r13                                                   ; move testByte to testByte
  mov r14, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r14                                                        ; adjust to the relative start of that type's entry in the type table
  mov r15, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r15                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that _constructor return value is GarbageCollectable
  jc func$_constructor$ConstructorReturnValue$TypeMatch          ; skip next block if the type matches
    ; Error handling block for _constructor return value
    int 3                                                        ; call debugger
    ;  - print(returnValueTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset returnValueTypeCheckFailureMessage           ; reading returnValueTypeCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (returnValueTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r9, qword ptr [rsp + 038h]                               ; load address of return value's value
    push r9                                                      ; internal argument 6: pointer to return value slot's value
    lea r9, qword ptr [rsp + 038h]                               ; load address of return value's type
    push r9                                                      ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_constructor$ConstructorReturnValue$TypeMatch:            ; after block
  mov rsi, qword ptr [rbp + 030h]                                ; get pointer to return value of _constructor into register to dereference it
  mov qword ptr [rsi], rdi                                       ; _constructor return value
  mov qword ptr [rsp + 028h], rdi                                ; move force cast of copy of resultPointer to the type with code typeCode's value out of rdi
  mov rdi, qword ptr [rbp + 028h]                                ; get pointer to return value type of _constructor into register to dereference it
  mov qword ptr [rdi], r12                                       ; type of _constructor return value
  ; increment reference count for force cast of copy of resultPointer to the type with code typeCode if necessary
  mov qword ptr [rsp + 020h], r12                                ; move force cast of copy of resultPointer to the type with code typeCode's type out of r12
  mov r12, qword ptr [rsp + 020h]                                ; store force cast of copy of resultPointer to the type with code typeCode's type in testByte value slot
  mov rax, r12                                                   ; move testByte to testByte
  mov r13, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r13                                                        ; adjust to the relative start of that type's entry in the type table
  mov r14, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r14                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$_constructor$AfterGCIncref                            ; if not a GarbageCollectable, skip incref
    mov r15, qword ptr [rsp + 028h]                              ; read slot into register for dereferencing
    inc qword ptr [r15]                                          ; increment reference count of force cast of copy of resultPointer to the type with code typeCode
    mov qword ptr [rsp + 028h], r15                              ; restoring slots to previous scope state
  func$_constructor$AfterGCIncref:                               ; after GarbageCollectable incref
  cmp qword ptr [rsp + 020h], 020h                               ; compare type of force cast of copy of resultPointer to the type with code typeCode to String
  jne func$_constructor$AfterStringIncref                        ; if not a String, skip incref
    mov r10, qword ptr [rsp + 028h]                              ; get force cast of copy of resultPointer to the type with code typeCode into register to dereference it
    mov rbx, qword ptr [r10]                                     ; dereference string to get to reference count
    cmp rbx, 0                                                   ; compare string reference count to 0
    jns func$_constructor$StringIncref                           ; if reference count is negative (constant strings), skip incref
    mov qword ptr [rsp + 028h], r10                              ; restoring slots to previous scope state
    jmp func$_constructor$AfterStringIncref                      ; skip incref for string constants
    func$_constructor$StringIncref:                              ; real String
      inc qword ptr [r10]                                        ; increment reference count of force cast of copy of resultPointer to the type with code typeCode
    mov qword ptr [rsp + 028h], r10                              ; restoring slots to previous scope state
  func$_constructor$AfterStringIncref:                           ; after String incref
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 038h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; _mark
dq func$_mark$annotation
func$_mark:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 060h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 0a0h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 002h                                                  ; compare parameter count of _mark to 2 (integer)
  je func$_mark$parameterCountCheck$continuation                 ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 060h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 060h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 060h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 060h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_mark$parameterCountCheck$continuation:                   ; end of parameter count check
  ; Check type of parameter 0, pointer (expecting Integer)
  mov rsi, qword ptr [rbp + 038h]                                ; store pointer's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that pointer is Integer
  jc func$_mark$pointer$TypeMatch                                ; skip next block if the type matches
    ; Error handling block for pointer
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 060h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 060h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 060h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 060h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_mark$pointer$TypeMatch:                                  ; after block
  ; Check type of parameter 1, tag (expecting Integer)
  mov r10, qword ptr [rbp + 048h]                                ; store tag's type in testByte value slot
  mov rax, r10                                                   ; move testByte to testByte
  mov rbx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rbx                                                        ; adjust to the relative start of that type's entry in the type table
  mov rsi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rsi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that tag is Integer
  jc func$_mark$tag$TypeMatch                                    ; skip next block if the type matches
    ; Error handling block for tag
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 060h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 060h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 060h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 060h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_mark$tag$TypeMatch:                                      ; after block
  ; Line 195: Integer blockScratchSpace = __readFromAddress(pointer + _gcBlock...
  mov r14, qword ptr _gcBlockHeaderScratchSpaceValue             ; make a copy of _gcBlockHeaderScratchSpace's value in case it changes before we use it
  mov r15, qword ptr _gcBlockHeaderScratchSpaceType              ; make a copy of _gcBlockHeaderScratchSpace's type in case it changes before we use it
  cmp qword ptr [rbp + 038h], 000h                               ; compare type of pointer to <sentinel>
  jne func$_mark$pointer$TypeMatch$1                             ; skip next block if pointer is not sentinel
    ; Error handling block for pointer
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 060h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 060h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 060h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 060h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_mark$pointer$TypeMatch$1:                                ; after block
  cmp r15, 000h                                                  ; compare type of copy of _gcBlockHeaderScratchSpace to <sentinel>
  jne func$_mark$Gcblockheaderscratchspace$TypeMatch             ; skip next block if copy of _gcBlockHeaderScratchSpace is not sentinel
    ; Error handling block for _gcBlockHeaderScratchSpace
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rsi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rsi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rdi, qword ptr [rsp + 060h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 060h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r12, qword ptr [rsp + 060h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 060h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_mark$Gcblockheaderscratchspace$TypeMatch:                ; after block
  mov r13, qword ptr [rbp + 040h]                                ; assign value of pointer to value of + operator result
  add r13, r14                                                   ; compute (pointer) + (copy of _gcBlockHeaderScratchSpace) (result in + operator result)
  ; Call __readFromAddress with 1 arguments
  mov rax, qword ptr [r13]                                       ; dereference first argument of __readFromAddress
  mov r12, rax                                                   ; value initialization of variable declaration for blockScratchSpace variable (dereferenced + operator result)
  mov r13, 01fh                                                  ; type initialization of variable declaration for blockScratchSpace variable (Integer'31)
  ; Line 196: if (blockScratchSpace == tag) { ...
  mov r14, r12                                                   ; make a copy of blockScratchSpace's value in case it changes before we use it
  mov r15, r13                                                   ; make a copy of blockScratchSpace's type in case it changes before we use it
  xor r10, r10                                                   ; zero value result of == (testing copy of blockScratchSpace and tag) to put the boolean in
  cmp r14, qword ptr [rbp + 050h]                                ; values equal?
  sete r10b                                                      ; put result in value result of == (testing copy of blockScratchSpace and tag)
  mov rax, 01eh                                                  ; value result of == (testing copy of blockScratchSpace and tag) is a Boolean'30
  xor rbx, rbx                                                   ; zero type result of == (testing copy of blockScratchSpace and tag) to put the boolean in
  cmp r15, qword ptr [rbp + 048h]                                ; types equal?
  sete bl                                                        ; put result in type result of == (testing copy of blockScratchSpace and tag)
  mov rsi, 01eh                                                  ; type result of == (testing copy of blockScratchSpace and tag) is a Boolean'30
  mov rdi, r10                                                   ; assign value of value result of == (testing copy of blockScratchSpace and tag) to value of == operator result
  and rdi, rbx                                                   ; && type temp and value temp
  cmp rdi, 000h                                                  ; compare == operator result to false
  je func$_mark$if$continuation                                  ; blockScratchSpace == tag
    ; Line 197: return;
    mov r13, qword ptr [rbp + 030h]                              ; get pointer to return value of _mark into register to dereference it
    mov qword ptr [r13], 000h                                    ; _mark return value
    mov r14, qword ptr [rbp + 028h]                              ; get pointer to return value type of _mark into register to dereference it
    mov qword ptr [r14], 01dh                                    ; type of _mark return value (Null'29)
    jmp func$_mark$epilog                                        ; return
  func$_mark$if$continuation:                                    ; end of if
  ; Line 199: __writeToAddress(pointer + _gcBlockHeaderScratchSpace, tag);
  mov r15, qword ptr _gcBlockHeaderScratchSpaceValue             ; make a copy of _gcBlockHeaderScratchSpace's value in case it changes before we use it
  mov r10, qword ptr _gcBlockHeaderScratchSpaceType              ; make a copy of _gcBlockHeaderScratchSpace's type in case it changes before we use it
  cmp qword ptr [rbp + 038h], 000h                               ; compare type of pointer to <sentinel>
  jne func$_mark$pointer$TypeMatch$2                             ; skip next block if pointer is not sentinel
    ; Error handling block for pointer
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rax, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rax                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rbx, qword ptr [rsp + 060h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 060h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 080h], r10                              ; move copy of _gcBlockHeaderScratchSpace's type out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rsi, qword ptr [rsp + 060h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 060h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 040h]                              ; restoring slots to previous scope state
  func$_mark$pointer$TypeMatch$2:                                ; after block
  cmp r10, 000h                                                  ; compare type of copy of _gcBlockHeaderScratchSpace to <sentinel>
  jne func$_mark$Gcblockheaderscratchspace$TypeMatch$1           ; skip next block if copy of _gcBlockHeaderScratchSpace is not sentinel
    ; Error handling block for _gcBlockHeaderScratchSpace
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 060h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 060h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 080h], r10                              ; move copy of _gcBlockHeaderScratchSpace's type out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 060h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 060h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 040h]                              ; restoring slots to previous scope state
  func$_mark$Gcblockheaderscratchspace$TypeMatch$1:              ; after block
  mov r14, qword ptr [rbp + 040h]                                ; assign value of pointer to value of + operator result
  add r14, r15                                                   ; compute (pointer) + (copy of _gcBlockHeaderScratchSpace) (result in + operator result)
  ; Call __writeToAddress with 2 arguments
  mov rbx, qword ptr [rbp + 050h]                                ; read second operand of mov (tag) for MoveToDerefInstruction
  mov qword ptr [r14], rbx                                       ; __writeToAddress
  ; Line 200: Integer blockLength = __readFromAddress(pointer + _gcBlockHeader...
  mov rsi, qword ptr _gcBlockHeaderLengthValue                   ; make a copy of _gcBlockHeaderLength's value in case it changes before we use it
  mov rdi, qword ptr _gcBlockHeaderLengthType                    ; make a copy of _gcBlockHeaderLength's type in case it changes before we use it
  cmp qword ptr [rbp + 038h], 000h                               ; compare type of pointer to <sentinel>
  jne func$_mark$pointer$TypeMatch$3                             ; skip next block if pointer is not sentinel
    ; Error handling block for pointer
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r12, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r12                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r13, qword ptr [rsp + 060h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 060h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r14, qword ptr [rsp + 060h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 060h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_mark$pointer$TypeMatch$3:                                ; after block
  cmp rdi, 000h                                                  ; compare type of copy of _gcBlockHeaderLength to <sentinel>
  jne func$_mark$Gcblockheaderlength$TypeMatch                   ; skip next block if copy of _gcBlockHeaderLength is not sentinel
    ; Error handling block for _gcBlockHeaderLength
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r15, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r15                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r10, qword ptr [rsp + 060h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 060h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rax, qword ptr [rsp + 060h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 060h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_mark$Gcblockheaderlength$TypeMatch:                      ; after block
  mov rbx, qword ptr [rbp + 040h]                                ; assign value of pointer to value of + operator result
  add rbx, rsi                                                   ; compute (pointer) + (copy of _gcBlockHeaderLength) (result in + operator result)
  ; Call __readFromAddress with 1 arguments
  mov r13, qword ptr [rbx]                                       ; dereference first argument of __readFromAddress
  mov rax, r13                                                   ; value initialization of variable declaration for blockLength variable (dereferenced + operator result)
  mov rbx, 01fh                                                  ; type initialization of variable declaration for blockLength variable (Integer'31)
  ; Line 201: Integer cursor = pointer + _gcBlockData;
  mov rsi, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov rdi, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp qword ptr [rbp + 038h], 000h                               ; compare type of pointer to <sentinel>
  jne func$_mark$pointer$TypeMatch$4                             ; skip next block if pointer is not sentinel
    ; Error handling block for pointer
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r12, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r12                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r13, qword ptr [rsp + 060h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 060h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 080h], rax                              ; move blockLength variable's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r14, qword ptr [rsp + 060h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 060h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 040h]                              ; restoring slots to previous scope state
  func$_mark$pointer$TypeMatch$4:                                ; after block
  cmp rdi, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$_mark$Gcblockdata$TypeMatch                           ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r15, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r15                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r10, qword ptr [rsp + 060h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 060h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 080h], rax                              ; move blockLength variable's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rax, qword ptr [rsp + 060h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 060h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 040h]                              ; restoring slots to previous scope state
  func$_mark$Gcblockdata$TypeMatch:                              ; after block
  mov qword ptr [rsp + 050h], rbx                                ; move blockLength variable's type out of rbx
  mov rbx, qword ptr [rbp + 040h]                                ; assign value of pointer to value of + operator result
  add rbx, rsi                                                   ; compute (pointer) + (copy of _gcBlockData) (result in + operator result)
  mov r13, rbx                                                   ; value initialization of variable declaration for cursor variable (+ operator result)
  mov r14, 01fh                                                  ; type initialization of variable declaration for cursor variable (Integer'31)
  ; Line 202: Integer end = cursor + blockLength * 16 /* 0x10 */;
  mov r15, r13                                                   ; make a copy of cursor's value in case it changes before we use it
  mov r10, r14                                                   ; make a copy of cursor's type in case it changes before we use it
  mov qword ptr [rsp + 048h], rax                                ; move blockLength variable's value out of rax
  mov rax, qword ptr [rsp + 048h]                                ; make a copy of blockLength's value in case it changes before we use it
  mov rbx, qword ptr [rsp + 050h]                                ; make a copy of blockLength's type in case it changes before we use it
  cmp rbx, 000h                                                  ; compare type of copy of blockLength to <sentinel>
  jne func$_mark$blocklength$TypeMatch                           ; skip next block if copy of blockLength is not sentinel
    ; Error handling block for blockLength
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rsi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rsi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rdi, qword ptr [rsp + 060h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 060h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 080h], r10                              ; move copy of cursor's type out of r10
    mov qword ptr [rsp + 078h], rax                              ; move copy of blockLength's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r12, qword ptr [rsp + 060h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 060h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 038h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 040h]                              ; restoring slots to previous scope state
  func$_mark$blocklength$TypeMatch:                              ; after block
  mov qword ptr [rsp + 050h], r10                                ; move copy of cursor's type out of r10
  imul r10, rax, 010h                                            ; compute (copy of blockLength) * (16 /* 0x10 */) (result in * operator result)
  cmp qword ptr [rsp + 050h], 000h                               ; compare type of copy of cursor to <sentinel>
  jne func$_mark$cursor$TypeMatch                                ; skip next block if copy of cursor is not sentinel
    ; Error handling block for cursor
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rax, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rax                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rbx, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 058h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 078h], r10                              ; move * operator result's value out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rsi, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 058h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 038h]                              ; restoring slots to previous scope state
  func$_mark$cursor$TypeMatch:                                   ; after block
  mov qword ptr [rsp + 048h], r14                                ; move cursor variable's type out of r14
  mov r14, r15                                                   ; assign value of copy of cursor to value of + operator result
  add r14, r10                                                   ; compute (copy of cursor) + (* operator result) (result in + operator result)
  mov rbx, r14                                                   ; value initialization of variable declaration for end variable (+ operator result)
  mov rsi, 01fh                                                  ; type initialization of variable declaration for end variable (Integer'31)
  func$_mark$while$top:                                          ; top of while
    mov rdi, r13                                                 ; make a copy of cursor's value in case it changes before we use it
    mov r12, qword ptr [rsp + 048h]                              ; make a copy of cursor's type in case it changes before we use it
    mov qword ptr [rsp + 050h], r13                              ; move cursor variable's value out of r13
    mov r13, rbx                                                 ; make a copy of end's value in case it changes before we use it
    mov r14, rsi                                                 ; make a copy of end's type in case it changes before we use it
    cmp r12, 000h                                                ; compare type of copy of cursor to <sentinel>
    jne func$_mark$while$cursor$TypeMatch                        ; skip next block if copy of cursor is not sentinel
      ; Error handling block for cursor
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r15, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push r15                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r10, qword ptr [rsp + 050h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 050h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea rax, qword ptr [rsp + 050h]                            ; load address of return value's value
      push rax                                                   ; internal argument 6: pointer to return value slot's value
      lea rax, qword ptr [rsp + 050h]                            ; load address of return value's type
      push rax                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
    func$_mark$while$cursor$TypeMatch:                           ; after block
    cmp r14, 000h                                                ; compare type of copy of end to <sentinel>
    jne func$_mark$while$end$TypeMatch                           ; skip next block if copy of end is not sentinel
      ; Error handling block for end
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov qword ptr [rsp + 040h], rbx                            ; move end variable's value out of rbx
      mov rbx, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rbx                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      mov qword ptr [rsp + 040h], rsi                            ; move end variable's type out of rsi
      lea rsi, qword ptr [rsp + 048h]                            ; load address of return value's value
      push rsi                                                   ; internal argument 6: pointer to return value slot's value
      lea rsi, qword ptr [rsp + 040h]                            ; load address of return value's type
      push rsi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      mov qword ptr [rsp + 038h], rdi                            ; move copy of cursor's value out of rdi
      lea rdi, qword ptr [rsp + 048h]                            ; load address of return value's value
      push rdi                                                   ; internal argument 6: pointer to return value slot's value
      lea rdi, qword ptr [rsp + 038h]                            ; load address of return value's type
      push rdi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rbx, qword ptr [rsp + 040h]                            ; restoring slots to previous scope state
      mov rsi, qword ptr [rsp + 030h]                            ; restoring slots to previous scope state
      mov rdi, qword ptr [rsp + 028h]                            ; restoring slots to previous scope state
    func$_mark$while$end$TypeMatch:                              ; after block
    xor r12, r12                                                 ; clear < operator result
    cmp rdi, r13                                                 ; compare copy of cursor with copy of end
    setl r12b                                                    ; store result in < operator result
    cmp r12, 000h                                                ; compare < operator result to false
    jne func$_mark$while$body                                    ; while condition
    mov r13, qword ptr [rsp + 050h]                              ; restoring slots to previous scope state
    jmp func$_mark$while$bottom                                  ; break out of while
    func$_mark$while$body:                                       ; start of while
    ; Line 204: Whatever value = __readFromAddress(cursor + 8) __dynamic_as__ __...
    mov r13, qword ptr [rsp + 050h]                              ; make a copy of cursor's value in case it changes before we use it
    mov r14, qword ptr [rsp + 048h]                              ; make a copy of cursor's type in case it changes before we use it
    cmp r14, 000h                                                ; compare type of copy of cursor to <sentinel>
    jne func$_mark$while$cursor$TypeMatch$1                      ; skip next block if copy of cursor is not sentinel
      ; Error handling block for cursor
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r15, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push r15                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r10, qword ptr [rsp + 050h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 050h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea rax, qword ptr [rsp + 050h]                            ; load address of return value's value
      push rax                                                   ; internal argument 6: pointer to return value slot's value
      lea rax, qword ptr [rsp + 050h]                            ; load address of return value's type
      push rax                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
    func$_mark$while$cursor$TypeMatch$1:                         ; after block
    mov r12, r13                                                 ; assign value of copy of cursor to value of + operator result
    add r12, 008h                                                ; compute (copy of cursor) + (8) (result in + operator result)
    ; Call __readFromAddress with 1 arguments
    mov r10, qword ptr [r12]                                     ; dereference first argument of __readFromAddress
    mov rax, qword ptr [rsp + 050h]                              ; make a copy of cursor's value in case it changes before we use it
    mov qword ptr [rsp + 040h], rbx                              ; move end variable's value out of rbx
    mov rbx, qword ptr [rsp + 048h]                              ; make a copy of cursor's type in case it changes before we use it
    cmp rbx, 000h                                                ; compare type of copy of cursor to <sentinel>
    jne func$_mark$while$cursor$TypeMatch$2                      ; skip next block if copy of cursor is not sentinel
      ; Error handling block for cursor
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov qword ptr [rsp + 038h], rsi                            ; move end variable's type out of rsi
      mov rsi, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rsi                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rdi, qword ptr [rsp + 040h]                            ; load address of return value's value
      push rdi                                                   ; internal argument 6: pointer to return value slot's value
      lea rdi, qword ptr [rsp + 040h]                            ; load address of return value's type
      push rdi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 060h], r10                            ; move dereferenced + operator result's value out of r10
      mov qword ptr [rsp + 058h], rax                            ; move copy of cursor's value out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r12, qword ptr [rsp + 040h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 040h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 018h]                            ; restoring slots to previous scope state
      mov r10, qword ptr [rsp + 020h]                            ; restoring slots to previous scope state
      mov rsi, qword ptr [rsp + 038h]                            ; restoring slots to previous scope state
    func$_mark$while$cursor$TypeMatch$2:                         ; after block
    mov qword ptr [rsp + 038h], r10                              ; move dereferenced + operator result's value out of r10
    mov r10, rax                                                 ; compute (copy of cursor) + (0)
    ; Call __readFromAddress with 1 arguments
    mov rdi, qword ptr [r10]                                     ; dereference first argument of __readFromAddress
    mov r12, qword ptr [rsp + 038h]                              ; force cast of dereferenced + operator result to the type with code dereferenced + operator result
    mov r13, rdi                                                 ; store dereferenced + operator result value in force cast of dereferenced + operator result to the type with code dereferenced + operator result's type slot
    cmp r13, 000h                                                ; compare type of force cast of dereferenced + operator result to the type with code dereferenced + operator result to <sentinel>
    jne func$_mark$while$forceCastOfDereferencedOperatorResultToTheTypeWithCodeDereferencedOperatorResult$TypeMatch ; skip next block if force cast of dereferenced + operator result to the type with code dereferenced + operator result is not sentinel
      ; Error handling block for force cast of dereferenced + operator result to the type with code dereferenced + operator result
      int 3                                                      ; call debugger
      ;  - print(assignmentTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r14, offset assignmentTypeCheckFailureMessage          ; reading assignmentTypeCheckFailureMessage for push
      push r14                                                   ; value of argument #1 (assignmentTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r15, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r15                                                   ; internal argument 6: pointer to return value slot's value
      lea r15, qword ptr [rsp + 048h]                            ; load address of return value's type
      push r15                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r10, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 048h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
    func$_mark$while$forceCastOfDereferencedOperatorResultToTheTypeWithCodeDereferencedOperatorResult$TypeMatch:  ; after block
    mov rax, r12                                                 ; value initialization of variable declaration for value variable (force cast of dereferenced + operator result to the type with code dereferenced + operator result)
    mov rbx, r13                                                 ; type initialization of variable declaration for value variable
    ; increment reference count for value variable if necessary
    mov qword ptr [rsp + 038h], rsi                              ; move end variable's type out of rsi
    mov rsi, rbx                                                 ; store value variable's type in testByte value slot
    mov qword ptr [rsp + 030h], rax                              ; move value variable's value out of rax
    mov rax, rsi                                                 ; move testByte to testByte
    mov rdi, 002h                                                ; read operand of mul (type table width in bytes) 
    mul rdi                                                      ; adjust to the relative start of that type's entry in the type table
    mov r12, offset typeTable                                    ; read second operand of + (type table pointer)
    add rax, r12                                                 ; finally offset all of that by the start of the type table itself (result in testByte)
    bt qword ptr [rax], 007h                                     ; check that possibly GarbageCollectable value is GarbageCollectable
    jnc func$_mark$while$AfterGCIncref                           ; if not a GarbageCollectable, skip incref
      mov r13, qword ptr [rsp + 030h]                            ; read slot into register for dereferencing
      inc qword ptr [r13]                                        ; increment reference count of value variable
      mov qword ptr [rsp + 030h], r13                            ; restoring slots to previous scope state
    func$_mark$while$AfterGCIncref:                              ; after GarbageCollectable incref
    cmp rbx, 020h                                                ; compare type of value variable to String
    jne func$_mark$while$AfterStringIncref                       ; if not a String, skip incref
      mov r14, qword ptr [rsp + 030h]                            ; get value variable into register to dereference it
      mov r15, qword ptr [r14]                                   ; dereference string to get to reference count
      cmp r15, 0                                                 ; compare string reference count to 0
      jns func$_mark$while$StringIncref                          ; if reference count is negative (constant strings), skip incref
      mov qword ptr [rsp + 030h], r14                            ; restoring slots to previous scope state
      jmp func$_mark$while$AfterStringIncref                     ; skip incref for string constants
      func$_mark$while$StringIncref:                             ; real String
        inc qword ptr [r14]                                      ; increment reference count of value variable
      mov qword ptr [rsp + 030h], r14                            ; restoring slots to previous scope state
    func$_mark$while$AfterStringIncref:                          ; after String incref
    ; Line 205: if (value is GarbageCollectable) { ...
    mov r10, qword ptr [rsp + 030h]                              ; make a copy of value's value in case it changes before we use it
    mov r9, rbx                                                  ; make a copy of value's type in case it changes before we use it
    ; increment reference count for copy of value if necessary
    mov r8, r9                                                   ; store copy of value's type in testByte value slot
    mov rax, r8                                                  ; move testByte to testByte
    mov rcx, 002h                                                ; read operand of mul (type table width in bytes) 
    mul rcx                                                      ; adjust to the relative start of that type's entry in the type table
    mov rdx, offset typeTable                                    ; read second operand of + (type table pointer)
    add rax, rdx                                                 ; finally offset all of that by the start of the type table itself (result in testByte)
    bt qword ptr [rax], 007h                                     ; check that possibly GarbageCollectable value is GarbageCollectable
    jnc func$_mark$while$AfterGCIncref$1                         ; if not a GarbageCollectable, skip incref
      inc qword ptr [r10]                                        ; increment reference count of copy of value
    func$_mark$while$AfterGCIncref$1:                            ; after GarbageCollectable incref
    cmp r9, 020h                                                 ; compare type of copy of value to String
    jne func$_mark$while$AfterStringIncref$1                     ; if not a String, skip incref
      mov qword ptr [rsp + 028h], rbx                            ; move value variable's type out of rbx
      mov rbx, qword ptr [r10]                                   ; dereference string to get to reference count
      cmp rbx, 0                                                 ; compare string reference count to 0
      jns func$_mark$while$StringIncref$1                        ; if reference count is negative (constant strings), skip incref
      mov rbx, qword ptr [rsp + 028h]                            ; restoring slots to previous scope state
      jmp func$_mark$while$AfterStringIncref$1                   ; skip incref for string constants
      func$_mark$while$StringIncref$1:                           ; real String
        inc qword ptr [r10]                                      ; increment reference count of copy of value
      mov rbx, qword ptr [rsp + 028h]                            ; restoring slots to previous scope state
    func$_mark$while$AfterStringIncref$1:                        ; after String incref
    mov rsi, r9                                                  ; store copy of value's type in testByte value slot
    mov rax, rsi                                                 ; move testByte to testByte
    mov rdi, 002h                                                ; read operand of mul (type table width in bytes) 
    mul rdi                                                      ; adjust to the relative start of that type's entry in the type table
    mov r12, offset typeTable                                    ; read second operand of + (type table pointer)
    add rax, r12                                                 ; finally offset all of that by the start of the type table itself (result in testByte)
    bt qword ptr [rax], 007h                                     ; check that value is GarbageCollectable
    mov r13, 000h                                                ; clear is expression result
    setc r13b                                                    ; store result in is expression result
    cmp r13, 000h                                                ; compare is expression result to false
    je func$_mark$while$if$continuation                          ; value is GarbageCollectable
      ; Line 206: _mark(value __as__ Integer, tag);
      mov r14, qword ptr [rsp + 030h]                            ; make a copy of value's value in case it changes before we use it
      mov r15, rbx                                               ; make a copy of value's type in case it changes before we use it
      ; increment reference count for copy of value if necessary
      mov qword ptr [rsp + 028h], r10                            ; move copy of value's value out of r10
      mov r10, r15                                               ; store copy of value's type in testByte value slot
      mov rax, r10                                               ; move testByte to testByte
      mov qword ptr [rsp + 020h], r9                             ; move copy of value's type out of r9
      mov r9, 002h                                               ; read operand of mul (type table width in bytes) 
      mul r9                                                     ; adjust to the relative start of that type's entry in the type table
      mov r8, offset typeTable                                   ; read second operand of + (type table pointer)
      add rax, r8                                                ; finally offset all of that by the start of the type table itself (result in testByte)
      bt qword ptr [rax], 007h                                   ; check that possibly GarbageCollectable value is GarbageCollectable
      jnc func$_mark$while$while$if$3$AfterGCIncref              ; if not a GarbageCollectable, skip incref
        inc qword ptr [r14]                                      ; increment reference count of copy of value
      func$_mark$while$while$if$3$AfterGCIncref:                 ; after GarbageCollectable incref
      cmp r15, 020h                                              ; compare type of copy of value to String
      jne func$_mark$while$while$if$3$AfterStringIncref          ; if not a String, skip incref
        mov rcx, qword ptr [r14]                                 ; dereference string to get to reference count
        cmp rcx, 0                                               ; compare string reference count to 0
        jns func$_mark$while$while$if$3$StringIncref             ; if reference count is negative (constant strings), skip incref
        jmp func$_mark$while$while$if$3$AfterStringIncref        ; skip incref for string constants
        func$_mark$while$while$if$3$StringIncref:                ; real String
          inc qword ptr [r14]                                    ; increment reference count of copy of value
      func$_mark$while$while$if$3$AfterStringIncref:             ; after String incref
      mov rdx, r14                                               ; force cast of copy of value to Integer
      ; Call _mark with 2 arguments
      push qword ptr [rbp + 050h]                                ; value of argument #2 (tag)
      push qword ptr [rbp + 048h]                                ; type of argument #2
      push rdx                                                   ; value of argument #1 (force cast of copy of value to Integer)
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r12, qword ptr [rsp + 038h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 038h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 002h                                              ; internal argument 1: number of actual arguments
      call func$_mark                                            ; jump to subroutine
      add rsp, 050h                                              ; release shadow space and arguments (result in stack pointer)
      ; Decrement reference count for copy of value (static type: Whatever) via decrefMaybeGCOrString
      sub rsp, 20h                                               ; allocate shadow space for decref function
      mov rdx, r15                                               ; arg #2: copy of value's type
      mov rcx, r14                                               ; arg #1: copy of value's value
      call decrefMaybeGCOrString                                 ; call decref
      add rsp, 20h                                               ; free shadow space for decref
      mov r9, qword ptr [rsp + 020h]                             ; restoring slots to previous scope state
      mov r10, qword ptr [rsp + 028h]                            ; restoring slots to previous scope state
    func$_mark$while$if$continuation:                            ; end of if
    ; Line 208: cursor += 16 /* 0x10 */;
    mov r13, qword ptr [rsp + 050h]                              ; make a copy of cursor's value in case it changes before we use it
    mov r14, qword ptr [rsp + 048h]                              ; make a copy of cursor's type in case it changes before we use it
    cmp r14, 000h                                                ; compare type of copy of cursor to <sentinel>
    jne func$_mark$while$copyOfCursor$TypeMatch                  ; skip next block if copy of cursor is not sentinel
      ; Error handling block for copy of cursor
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r15, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push r15                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      mov qword ptr [rsp + 030h], r10                            ; move copy of value's value out of r10
      lea r10, qword ptr [rsp + 038h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 030h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov qword ptr [rsp + 050h], r9                             ; move copy of value's type out of r9
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea rax, qword ptr [rsp + 038h]                            ; load address of return value's value
      push rax                                                   ; internal argument 6: pointer to return value slot's value
      lea rax, qword ptr [rsp + 030h]                            ; load address of return value's type
      push rax                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov r9, qword ptr [rsp + 010h]                             ; restoring slots to previous scope state
      mov r10, qword ptr [rsp + 020h]                            ; restoring slots to previous scope state
    func$_mark$while$copyOfCursor$TypeMatch:                     ; after block
    mov r12, r13                                                 ; assign value of copy of cursor to value of += operator result
    add r12, 010h                                                ; += operator
    mov qword ptr [rsp + 050h], r12                              ; store value
    mov qword ptr [rsp + 048h], 01fh                             ; store type (Integer'31)
    ; Decrement reference count for value variable (static type: Whatever) via decrefMaybeGCOrString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, rbx                                                 ; arg #2: value variable's type
    mov rcx, qword ptr [rsp + 050h]                              ; arg #1: value variable's value
    mov qword ptr [rsp + 048h], r10                              ; move copy of value's value out of r10
    mov qword ptr [rsp + 040h], r9                               ; move copy of value's type out of r9
    call decrefMaybeGCOrString                                   ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    ; Decrement reference count for copy of value (static type: Whatever) via decrefMaybeGCOrString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, qword ptr [rsp + 040h]                              ; arg #2: copy of value's type
    mov rcx, qword ptr [rsp + 048h]                              ; arg #1: copy of value's value
    call decrefMaybeGCOrString                                   ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    mov rbx, qword ptr [rsp + 040h]                              ; restoring slots to previous scope state
    mov rsi, qword ptr [rsp + 038h]                              ; restoring slots to previous scope state
    mov r13, qword ptr [rsp + 050h]                              ; restoring slots to previous scope state
    jmp func$_mark$while$top                                     ; return to top of while
  func$_mark$while$bottom:                                       ; bottom of while
  ; Implicit return from _mark
  mov rsi, qword ptr [rbp + 030h]                                ; get pointer to return value of _mark into register to dereference it
  mov qword ptr [rsi], 000h                                      ; _mark return value
  mov rdi, qword ptr [rbp + 028h]                                ; get pointer to return value type of _mark into register to dereference it
  mov qword ptr [rdi], 01dh                                      ; type of _mark return value (Null'29)
  func$_mark$epilog: 
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 060h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; _garbageCollectorImplementation
dq func$_garbageCollectorImplementation$annotation
func$_garbageCollectorImplementation:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 058h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 098h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 000h                                                  ; compare parameter count of _garbageCollectorImplementation to 0 (integer)
  je func$_garbageCollectorImplementation$parameterCountCheck$continuation ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 058h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 058h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_garbageCollectorImplementation$parameterCountCheck$continuation:  ; end of parameter count check
  ; Line 215: if (_gcLocked > 0) { ...
  mov rsi, qword ptr _gcLockedValue                              ; make a copy of _gcLocked's value in case it changes before we use it
  mov rdi, qword ptr _gcLockedType                               ; make a copy of _gcLocked's type in case it changes before we use it
  cmp rdi, 000h                                                  ; compare type of copy of _gcLocked to <sentinel>
  jne func$_garbageCollectorImplementation$Gclocked$TypeMatch    ; skip next block if copy of _gcLocked is not sentinel
    ; Error handling block for _gcLocked
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r12, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r12                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r13, qword ptr [rsp + 058h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 058h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r14, qword ptr [rsp + 058h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 058h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_garbageCollectorImplementation$Gclocked$TypeMatch:       ; after block
  xor rbx, rbx                                                   ; clear > operator result
  cmp rsi, 000h                                                  ; compare copy of _gcLocked with 0
  setg bl                                                        ; store result in > operator result
  cmp rbx, 000h                                                  ; compare > operator result to false
  je func$_garbageCollectorImplementation$if$continuation        ; _gcLocked > 0
    ; Line 216: return;
    mov r13, qword ptr [rbp + 030h]                              ; get pointer to return value of _garbageCollectorImplementation into register to dereference it
    mov qword ptr [r13], 000h                                    ; _garbageCollectorImplementation return value
    mov r14, qword ptr [rbp + 028h]                              ; get pointer to return value type of _garbageCollectorImplementation into register to dereference it
    mov qword ptr [r14], 01dh                                    ; type of _garbageCollectorImplementation return value (Null'29)
    jmp func$_garbageCollectorImplementation$epilog              ; return
  func$_garbageCollectorImplementation$if$continuation:          ; end of if
  ; Line 218: _gcLocked += 1;
  mov r15, qword ptr _gcLockedValue                              ; make a copy of _gcLocked's value in case it changes before we use it
  mov r10, qword ptr _gcLockedType                               ; make a copy of _gcLocked's type in case it changes before we use it
  cmp r10, 000h                                                  ; compare type of copy of _gcLocked to <sentinel>
  jne func$_garbageCollectorImplementation$copyOfGclocked$TypeMatch ; skip next block if copy of _gcLocked is not sentinel
    ; Error handling block for copy of _gcLocked
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rax, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rax                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rbx, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 058h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 078h], r10                              ; move copy of _gcLocked's type out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rsi, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 058h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 038h]                              ; restoring slots to previous scope state
  func$_garbageCollectorImplementation$copyOfGclocked$TypeMatch:  ; after block
  mov r14, r15                                                   ; assign value of copy of _gcLocked to value of += operator result
  add r14, 001h                                                  ; += operator
  mov qword ptr _gcLockedValue, r14                              ; store value
  mov qword ptr _gcLockedType, 01fh                              ; store type (Integer'31)
  ; Line 219: _currentTag += 1;
  mov rbx, qword ptr _currentTagValue                            ; make a copy of _currentTag's value in case it changes before we use it
  mov rsi, qword ptr _currentTagType                             ; make a copy of _currentTag's type in case it changes before we use it
  cmp rsi, 000h                                                  ; compare type of copy of _currentTag to <sentinel>
  jne func$_garbageCollectorImplementation$copyOfCurrenttag$TypeMatch ; skip next block if copy of _currentTag is not sentinel
    ; Error handling block for copy of _currentTag
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 058h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 058h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 058h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 058h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_garbageCollectorImplementation$copyOfCurrenttag$TypeMatch:  ; after block
  mov rax, rbx                                                   ; assign value of copy of _currentTag to value of += operator result
  add rax, 001h                                                  ; += operator
  mov qword ptr _currentTagValue, rax                            ; store value
  mov qword ptr _currentTagType, 01fh                            ; store type (Integer'31)
  ; Line 220: Integer cursor = _blockListStart;
  mov r12, qword ptr _blockListStartValue                        ; make a copy of _blockListStart's value in case it changes before we use it
  mov r13, qword ptr _blockListStartType                         ; make a copy of _blockListStart's type in case it changes before we use it
  cmp r13, 000h                                                  ; compare type of copy of _blockListStart to <sentinel>
  jne func$_garbageCollectorImplementation$copyOfBlockliststart$TypeMatch ; skip next block if copy of _blockListStart is not sentinel
    ; Error handling block for copy of _blockListStart
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r14, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push r14                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r15, qword ptr [rsp + 058h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 058h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 058h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 058h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_garbageCollectorImplementation$copyOfBlockliststart$TypeMatch:  ; after block
  mov rax, r12                                                   ; value initialization of variable declaration for cursor variable (copy of _blockListStart)
  mov rbx, r13                                                   ; type initialization of variable declaration for cursor variable
  func$_garbageCollectorImplementation$while$top:                ; top of while
    mov rsi, rax                                                 ; make a copy of cursor's value in case it changes before we use it
    mov rdi, rbx                                                 ; make a copy of cursor's type in case it changes before we use it
    mov r12, qword ptr _blockListEndValue                        ; make a copy of _blockListEnd's value in case it changes before we use it
    mov r13, qword ptr _blockListEndType                         ; make a copy of _blockListEnd's type in case it changes before we use it
    cmp rdi, 000h                                                ; compare type of copy of cursor to <sentinel>
    jne func$_garbageCollectorImplementation$while$cursor$TypeMatch ; skip next block if copy of cursor is not sentinel
      ; Error handling block for cursor
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r14, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push r14                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r15, qword ptr [rsp + 058h]                            ; load address of return value's value
      push r15                                                   ; internal argument 6: pointer to return value slot's value
      lea r15, qword ptr [rsp + 058h]                            ; load address of return value's type
      push r15                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 078h], rax                            ; move cursor variable's value out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r10, qword ptr [rsp + 058h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 058h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 038h]                            ; restoring slots to previous scope state
    func$_garbageCollectorImplementation$while$cursor$TypeMatch:  ; after block
    cmp r13, 000h                                                ; compare type of copy of _blockListEnd to <sentinel>
    jne func$_garbageCollectorImplementation$while$Blocklistend$TypeMatch ; skip next block if copy of _blockListEnd is not sentinel
      ; Error handling block for _blockListEnd
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov qword ptr [rsp + 048h], rax                            ; move cursor variable's value out of rax
      mov rax, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rax                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      mov qword ptr [rsp + 048h], rbx                            ; move cursor variable's type out of rbx
      lea rbx, qword ptr [rsp + 050h]                            ; load address of return value's value
      push rbx                                                   ; internal argument 6: pointer to return value slot's value
      lea rbx, qword ptr [rsp + 048h]                            ; load address of return value's type
      push rbx                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      mov qword ptr [rsp + 040h], rsi                            ; move copy of cursor's value out of rsi
      lea rsi, qword ptr [rsp + 050h]                            ; load address of return value's value
      push rsi                                                   ; internal argument 6: pointer to return value slot's value
      lea rsi, qword ptr [rsp + 040h]                            ; load address of return value's type
      push rsi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 048h]                            ; restoring slots to previous scope state
      mov rbx, qword ptr [rsp + 038h]                            ; restoring slots to previous scope state
      mov rsi, qword ptr [rsp + 030h]                            ; restoring slots to previous scope state
    func$_garbageCollectorImplementation$while$Blocklistend$TypeMatch:  ; after block
    xor rdi, rdi                                                 ; clear < operator result
    cmp rsi, r12                                                 ; compare copy of cursor with copy of _blockListEnd
    setl dil                                                     ; store result in < operator result
    cmp rdi, 000h                                                ; compare < operator result to false
    jne func$_garbageCollectorImplementation$while$body          ; while condition
    jmp func$_garbageCollectorImplementation$while$bottom        ; break out of while
    func$_garbageCollectorImplementation$while$body:             ; start of while
    ; Line 222: Integer pointer = __readFromAddress(cursor);
    mov r12, rax                                                 ; make a copy of cursor's value in case it changes before we use it
    mov r13, rbx                                                 ; make a copy of cursor's type in case it changes before we use it
    ; Call __readFromAddress with 1 arguments
    mov qword ptr [rsp + 048h], rax                              ; move cursor variable's value out of rax
    mov rax, qword ptr [r12]                                     ; dereference first argument of __readFromAddress
    mov r12, rax                                                 ; value initialization of variable declaration for pointer variable (dereferenced copy of cursor)
    mov r13, 01fh                                                ; type initialization of variable declaration for pointer variable (Integer'31)
    ; Line 223: if (pointer != 0) { ...
    mov r14, r12                                                 ; make a copy of pointer's value in case it changes before we use it
    mov r15, r13                                                 ; make a copy of pointer's type in case it changes before we use it
    xor r10, r10                                                 ; zero value result of == (testing copy of pointer and 0) to put the boolean in
    cmp r14, 000h                                                ; values equal?
    sete r10b                                                    ; put result in value result of == (testing copy of pointer and 0)
    mov rax, 01eh                                                ; value result of == (testing copy of pointer and 0) is a Boolean'30
    mov qword ptr [rsp + 040h], rbx                              ; move cursor variable's type out of rbx
    xor rbx, rbx                                                 ; zero type result of == (testing copy of pointer and 0) to put the boolean in
    cmp r15, 01fh                                                ; types equal?
    sete bl                                                      ; put result in type result of == (testing copy of pointer and 0)
    mov rsi, 01eh                                                ; type result of == (testing copy of pointer and 0) is a Boolean'30
    mov rdi, r10                                                 ; assign value of value result of == (testing copy of pointer and 0) to value of != operator result
    and rdi, rbx                                                 ; && type temp and value temp
    xor rdi, 001h                                                ; negating <DynamicSlot:Boolean (uninitialized) ("!= operator result") (living: true)>
    cmp rdi, 000h                                                ; compare != operator result to false
    je func$_garbageCollectorImplementation$while$if$continuation ; pointer != 0
      ; Line 224: Integer blockRefCount = __readFromAddress(pointer + _gcBlockHead...
      mov r9, r12                                                ; make a copy of pointer's value in case it changes before we use it
      mov r8, r13                                                ; make a copy of pointer's type in case it changes before we use it
      mov rdx, qword ptr _gcBlockHeaderRefCountValue             ; make a copy of _gcBlockHeaderRefCount's value in case it changes before we use it
      mov rcx, qword ptr _gcBlockHeaderRefCountType              ; make a copy of _gcBlockHeaderRefCount's type in case it changes before we use it
      cmp r8, 000h                                               ; compare type of copy of pointer to <sentinel>
      jne func$_garbageCollectorImplementation$while$while$if$4$pointer$TypeMatch ; skip next block if copy of pointer is not sentinel
        ; Error handling block for pointer
        int 3                                                    ; call debugger
        ;  - print(operandTypeCheckFailureMessage)
        ; Call __print with 1 arguments
        mov qword ptr [rsp + 038h], r12                          ; move pointer variable's value out of r12
        mov r12, offset operandTypeCheckFailureMessage           ; reading operandTypeCheckFailureMessage for push
        push r12                                                 ; value of argument #1 (operandTypeCheckFailureMessage)
        push 020h                                                ; type of argument #1 (String'32)
        mov qword ptr [rsp + 038h], r13                          ; move pointer variable's type out of r13
        lea r13, qword ptr [rsp + 040h]                          ; load address of return value's value
        push r13                                                 ; internal argument 6: pointer to return value slot's value
        lea r13, qword ptr [rsp + 038h]                          ; load address of return value's type
        push r13                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov qword ptr [rsp + 058h], r9                           ; move copy of pointer's value out of r9
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov qword ptr [rsp + 050h], r8                           ; move copy of pointer's type out of r8
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov qword ptr [rsp + 048h], rdx                          ; move copy of _gcBlockHeaderRefCount's value out of rdx
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov qword ptr [rsp + 040h], rcx                          ; move copy of _gcBlockHeaderRefCount's type out of rcx
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$__print                                        ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        ;  - exit(1)
        ; Call exit with 1 arguments
        push 001h                                                ; value of argument #1 (1 (integer))
        push 01fh                                                ; type of argument #1 (Integer'31)
        lea r14, qword ptr [rsp + 040h]                          ; load address of return value's value
        push r14                                                 ; internal argument 6: pointer to return value slot's value
        lea r14, qword ptr [rsp + 038h]                          ; load address of return value's type
        push r14                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$exit                                           ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        mov rcx, qword ptr [rsp + 000h]                          ; restoring slots to previous scope state
        mov rdx, qword ptr [rsp + 008h]                          ; restoring slots to previous scope state
        mov r8, qword ptr [rsp + 010h]                           ; restoring slots to previous scope state
        mov r9, qword ptr [rsp + 018h]                           ; restoring slots to previous scope state
        mov r12, qword ptr [rsp + 038h]                          ; restoring slots to previous scope state
        mov r13, qword ptr [rsp + 028h]                          ; restoring slots to previous scope state
      func$_garbageCollectorImplementation$while$while$if$4$pointer$TypeMatch:  ; after block
      cmp rcx, 000h                                              ; compare type of copy of _gcBlockHeaderRefCount to <sentinel>
      jne func$_garbageCollectorImplementation$while$while$if$4$Gcblockheaderrefcount$TypeMatch ; skip next block if copy of _gcBlockHeaderRefCount is not sentinel
        ; Error handling block for _gcBlockHeaderRefCount
        int 3                                                    ; call debugger
        ;  - print(operandTypeCheckFailureMessage)
        ; Call __print with 1 arguments
        mov r15, offset operandTypeCheckFailureMessage           ; reading operandTypeCheckFailureMessage for push
        push r15                                                 ; value of argument #1 (operandTypeCheckFailureMessage)
        push 020h                                                ; type of argument #1 (String'32)
        lea r10, qword ptr [rsp + 048h]                          ; load address of return value's value
        push r10                                                 ; internal argument 6: pointer to return value slot's value
        lea r10, qword ptr [rsp + 048h]                          ; load address of return value's type
        push r10                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov qword ptr [rsp + 068h], r9                           ; move copy of pointer's value out of r9
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov qword ptr [rsp + 060h], r8                           ; move copy of pointer's type out of r8
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov qword ptr [rsp + 058h], rdx                          ; move copy of _gcBlockHeaderRefCount's value out of rdx
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov qword ptr [rsp + 050h], rcx                          ; move copy of _gcBlockHeaderRefCount's type out of rcx
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$__print                                        ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        ;  - exit(1)
        ; Call exit with 1 arguments
        push 001h                                                ; value of argument #1 (1 (integer))
        push 01fh                                                ; type of argument #1 (Integer'31)
        lea rax, qword ptr [rsp + 048h]                          ; load address of return value's value
        push rax                                                 ; internal argument 6: pointer to return value slot's value
        lea rax, qword ptr [rsp + 048h]                          ; load address of return value's type
        push rax                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$exit                                           ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        mov r8, qword ptr [rsp + 020h]                           ; restoring slots to previous scope state
        mov rcx, qword ptr [rsp + 010h]                          ; restoring slots to previous scope state
        mov r9, qword ptr [rsp + 028h]                           ; restoring slots to previous scope state
        mov rdx, qword ptr [rsp + 018h]                          ; restoring slots to previous scope state
      func$_garbageCollectorImplementation$while$while$if$4$Gcblockheaderrefcount$TypeMatch:  ; after block
      mov rbx, r9                                                ; assign value of copy of pointer to value of + operator result
      add rbx, rdx                                               ; compute (copy of pointer) + (copy of _gcBlockHeaderRefCount) (result in + operator result)
      ; Call __readFromAddress with 1 arguments
      mov qword ptr [rsp + 038h], r13                            ; move pointer variable's type out of r13
      mov r13, qword ptr [rbx]                                   ; dereference first argument of __readFromAddress
      mov rax, r13                                               ; value initialization of variable declaration for blockRefCount variable (dereferenced + operator result)
      mov rbx, 01fh                                              ; type initialization of variable declaration for blockRefCount variable (Integer'31)
      ; Line 225: assert(blockRefCount >= 0, 'Reference count underflow.');
      mov rsi, rax                                               ; make a copy of blockRefCount's value in case it changes before we use it
      mov rdi, rbx                                               ; make a copy of blockRefCount's type in case it changes before we use it
      cmp rdi, 000h                                              ; compare type of copy of blockRefCount to <sentinel>
      jne func$_garbageCollectorImplementation$while$while$if$4$blockrefcount$TypeMatch ; skip next block if copy of blockRefCount is not sentinel
        ; Error handling block for blockRefCount
        int 3                                                    ; call debugger
        ;  - print(operandTypeCheckFailureMessage)
        ; Call __print with 1 arguments
        mov qword ptr [rsp + 030h], r12                          ; move pointer variable's value out of r12
        mov r12, offset operandTypeCheckFailureMessage           ; reading operandTypeCheckFailureMessage for push
        push r12                                                 ; value of argument #1 (operandTypeCheckFailureMessage)
        push 020h                                                ; type of argument #1 (String'32)
        lea r13, qword ptr [rsp + 038h]                          ; load address of return value's value
        push r13                                                 ; internal argument 6: pointer to return value slot's value
        lea r13, qword ptr [rsp + 038h]                          ; load address of return value's type
        push r13                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        mov qword ptr [rsp + 058h], rax                          ; move blockRefCount variable's value out of rax
        call func$__print                                        ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        ;  - exit(1)
        ; Call exit with 1 arguments
        push 001h                                                ; value of argument #1 (1 (integer))
        push 01fh                                                ; type of argument #1 (Integer'31)
        lea r14, qword ptr [rsp + 038h]                          ; load address of return value's value
        push r14                                                 ; internal argument 6: pointer to return value slot's value
        lea r14, qword ptr [rsp + 038h]                          ; load address of return value's type
        push r14                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$exit                                           ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        mov r12, qword ptr [rsp + 030h]                          ; restoring slots to previous scope state
        mov rax, qword ptr [rsp + 018h]                          ; restoring slots to previous scope state
      func$_garbageCollectorImplementation$while$while$if$4$blockrefcount$TypeMatch:  ; after block
      mov qword ptr [rsp + 030h], rbx                            ; move blockRefCount variable's type out of rbx
      xor rbx, rbx                                               ; clear >= operator result
      cmp rsi, 000h                                              ; compare copy of blockRefCount with 0
      setge bl                                                   ; store result in >= operator result
      ; Call assert with 2 arguments
      mov r13, offset string$11                                  ; reading string for push
      push r13                                                   ; value of argument #2 (string)
      push 020h                                                  ; type of argument #2 (String'32)
      push rbx                                                   ; value of argument #1 (>= operator result)
      push 01eh                                                  ; type of argument #1 (Boolean'30)
      lea r14, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r14                                                   ; internal argument 6: pointer to return value slot's value
      lea r14, qword ptr [rsp + 048h]                            ; load address of return value's type
      push r14                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 002h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 068h], rax                            ; move blockRefCount variable's value out of rax
      call func$assert                                           ; jump to subroutine
      add rsp, 050h                                              ; release shadow space and arguments (result in stack pointer)
      ; Line 226: if (blockRefCount != 0) { ...
      mov r15, qword ptr [rsp + 018h]                            ; make a copy of blockRefCount's value in case it changes before we use it
      mov r10, qword ptr [rsp + 030h]                            ; make a copy of blockRefCount's type in case it changes before we use it
      xor rax, rax                                               ; zero value result of == (testing copy of blockRefCount and 0) to put the boolean in
      cmp r15, 000h                                              ; values equal?
      sete al                                                    ; put result in value result of == (testing copy of blockRefCount and 0)
      mov rbx, 01eh                                              ; value result of == (testing copy of blockRefCount and 0) is a Boolean'30
      xor rsi, rsi                                               ; zero type result of == (testing copy of blockRefCount and 0) to put the boolean in
      cmp r10, 01fh                                              ; types equal?
      sete sil                                                   ; put result in type result of == (testing copy of blockRefCount and 0)
      mov rdi, 01eh                                              ; type result of == (testing copy of blockRefCount and 0) is a Boolean'30
      mov qword ptr [rsp + 030h], r12                            ; move pointer variable's value out of r12
      mov r12, rax                                               ; assign value of value result of == (testing copy of blockRefCount and 0) to value of != operator result
      and r12, rsi                                               ; && type temp and value temp
      xor r12, 001h                                              ; negating <DynamicSlot:Boolean (uninitialized) ("!= operator result") (living: true)>
      cmp r12, 000h                                              ; compare != operator result to false
      je func$_garbageCollectorImplementation$while$while$if$4$if$continuation ; blockRefCount != 0
        ; Line 227: _mark(pointer, _currentTag);
        mov r13, qword ptr [rsp + 030h]                          ; make a copy of pointer's value in case it changes before we use it
        mov r14, qword ptr [rsp + 038h]                          ; make a copy of pointer's type in case it changes before we use it
        mov r9, qword ptr _currentTagValue                       ; make a copy of _currentTag's value in case it changes before we use it
        mov r8, qword ptr _currentTagType                        ; make a copy of _currentTag's type in case it changes before we use it
        ; Call _mark with 2 arguments
        push r9                                                  ; value of argument #2 (copy of _currentTag)
        push r8                                                  ; type of argument #2
        push r13                                                 ; value of argument #1 (copy of pointer)
        push r14                                                 ; type of argument #1
        lea r10, qword ptr [rsp + 048h]                          ; load address of return value's value
        push r10                                                 ; internal argument 6: pointer to return value slot's value
        lea r10, qword ptr [rsp + 048h]                          ; load address of return value's type
        push r10                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 002h                                            ; internal argument 1: number of actual arguments
        call func$_mark                                          ; jump to subroutine
        add rsp, 050h                                            ; release shadow space and arguments (result in stack pointer)
      func$_garbageCollectorImplementation$while$while$if$4$if$continuation:  ; end of if
      mov r12, qword ptr [rsp + 030h]                            ; restoring slots to previous scope state
      mov r13, qword ptr [rsp + 038h]                            ; restoring slots to previous scope state
    func$_garbageCollectorImplementation$while$if$continuation:  ; end of if
    ; Line 230: cursor += _blockEntrySize;
    mov rax, qword ptr [rsp + 048h]                              ; make a copy of cursor's value in case it changes before we use it
    mov rbx, qword ptr [rsp + 040h]                              ; make a copy of cursor's type in case it changes before we use it
    mov rsi, qword ptr _blockEntrySizeValue                      ; make a copy of _blockEntrySize's value in case it changes before we use it
    mov rdi, qword ptr _blockEntrySizeType                       ; make a copy of _blockEntrySize's type in case it changes before we use it
    cmp rbx, 000h                                                ; compare type of copy of cursor to <sentinel>
    jne func$_garbageCollectorImplementation$while$copyOfCursor$TypeMatch ; skip next block if copy of cursor is not sentinel
      ; Error handling block for copy of cursor
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r12, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push r12                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r13, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r13                                                   ; internal argument 6: pointer to return value slot's value
      lea r13, qword ptr [rsp + 048h]                            ; load address of return value's type
      push r13                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 068h], rax                            ; move copy of cursor's value out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r14, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r14                                                   ; internal argument 6: pointer to return value slot's value
      lea r14, qword ptr [rsp + 048h]                            ; load address of return value's type
      push r14                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 028h]                            ; restoring slots to previous scope state
    func$_garbageCollectorImplementation$while$copyOfCursor$TypeMatch:  ; after block
    cmp rdi, 000h                                                ; compare type of copy of _blockEntrySize to <sentinel>
    jne func$_garbageCollectorImplementation$while$copyOfBlockentrysize$TypeMatch ; skip next block if copy of _blockEntrySize is not sentinel
      ; Error handling block for copy of _blockEntrySize
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r15, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push r15                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r10, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 048h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 068h], rax                            ; move copy of cursor's value out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea rax, qword ptr [rsp + 048h]                            ; load address of return value's value
      push rax                                                   ; internal argument 6: pointer to return value slot's value
      lea rax, qword ptr [rsp + 048h]                            ; load address of return value's type
      push rax                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 028h]                            ; restoring slots to previous scope state
    func$_garbageCollectorImplementation$while$copyOfBlockentrysize$TypeMatch:  ; after block
    mov qword ptr [rsp + 038h], rbx                              ; move copy of cursor's type out of rbx
    mov rbx, rax                                                 ; assign value of copy of cursor to value of += operator result
    add rbx, rsi                                                 ; += operator
    mov qword ptr [rsp + 048h], rbx                              ; store value
    mov qword ptr [rsp + 040h], 01fh                             ; store type (Integer'31)
    mov rax, qword ptr [rsp + 048h]                              ; restoring slots to previous scope state
    mov rbx, qword ptr [rsp + 040h]                              ; restoring slots to previous scope state
    jmp func$_garbageCollectorImplementation$while$top           ; return to top of while
  func$_garbageCollectorImplementation$while$bottom:             ; bottom of while
  func$_garbageCollectorImplementation$while$top$1:              ; top of while
    mov r13, rax                                                 ; make a copy of cursor's value in case it changes before we use it
    mov r14, rbx                                                 ; make a copy of cursor's type in case it changes before we use it
    mov r15, qword ptr _blockListStartValue                      ; make a copy of _blockListStart's value in case it changes before we use it
    mov r10, qword ptr _blockListStartType                       ; make a copy of _blockListStart's type in case it changes before we use it
    cmp r14, 000h                                                ; compare type of copy of cursor to <sentinel>
    jne func$_garbageCollectorImplementation$while$cursor$TypeMatch$1 ; skip next block if copy of cursor is not sentinel
      ; Error handling block for cursor
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov qword ptr [rsp + 048h], rax                            ; move cursor variable's value out of rax
      mov rax, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rax                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      mov qword ptr [rsp + 048h], rbx                            ; move cursor variable's type out of rbx
      lea rbx, qword ptr [rsp + 050h]                            ; load address of return value's value
      push rbx                                                   ; internal argument 6: pointer to return value slot's value
      lea rbx, qword ptr [rsp + 048h]                            ; load address of return value's type
      push rbx                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 068h], r10                            ; move copy of _blockListStart's type out of r10
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea rsi, qword ptr [rsp + 050h]                            ; load address of return value's value
      push rsi                                                   ; internal argument 6: pointer to return value slot's value
      lea rsi, qword ptr [rsp + 048h]                            ; load address of return value's type
      push rsi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 048h]                            ; restoring slots to previous scope state
      mov rbx, qword ptr [rsp + 038h]                            ; restoring slots to previous scope state
      mov r10, qword ptr [rsp + 028h]                            ; restoring slots to previous scope state
    func$_garbageCollectorImplementation$while$cursor$TypeMatch$1:  ; after block
    cmp r10, 000h                                                ; compare type of copy of _blockListStart to <sentinel>
    jne func$_garbageCollectorImplementation$while$Blockliststart$TypeMatch ; skip next block if copy of _blockListStart is not sentinel
      ; Error handling block for _blockListStart
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rdi, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rdi                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r12, qword ptr [rsp + 058h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 058h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 078h], r10                            ; move copy of _blockListStart's type out of r10
      mov qword ptr [rsp + 070h], rax                            ; move cursor variable's value out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      mov qword ptr [rsp + 050h], r13                            ; move copy of cursor's value out of r13
      lea r13, qword ptr [rsp + 058h]                            ; load address of return value's value
      push r13                                                   ; internal argument 6: pointer to return value slot's value
      lea r13, qword ptr [rsp + 040h]                            ; load address of return value's type
      push r13                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 030h]                            ; restoring slots to previous scope state
      mov r10, qword ptr [rsp + 038h]                            ; restoring slots to previous scope state
      mov r13, qword ptr [rsp + 040h]                            ; restoring slots to previous scope state
    func$_garbageCollectorImplementation$while$Blockliststart$TypeMatch:  ; after block
    xor r14, r14                                                 ; clear > operator result
    cmp r13, r15                                                 ; compare copy of cursor with copy of _blockListStart
    setg r14b                                                    ; store result in > operator result
    cmp r14, 000h                                                ; compare > operator result to false
    jne func$_garbageCollectorImplementation$while$body$1        ; while condition
    jmp func$_garbageCollectorImplementation$while$bottom$1      ; break out of while
    func$_garbageCollectorImplementation$while$body$1:           ; start of while
    ; Line 233: cursor -= _blockEntrySize;
    mov r15, rax                                                 ; make a copy of cursor's value in case it changes before we use it
    mov r10, rbx                                                 ; make a copy of cursor's type in case it changes before we use it
    mov qword ptr [rsp + 048h], rax                              ; move cursor variable's value out of rax
    mov rax, qword ptr _blockEntrySizeValue                      ; make a copy of _blockEntrySize's value in case it changes before we use it
    mov qword ptr [rsp + 040h], rbx                              ; move cursor variable's type out of rbx
    mov rbx, qword ptr _blockEntrySizeType                       ; make a copy of _blockEntrySize's type in case it changes before we use it
    cmp r10, 000h                                                ; compare type of copy of cursor to <sentinel>
    jne func$_garbageCollectorImplementation$while$copyOfCursor$TypeMatch$1 ; skip next block if copy of cursor is not sentinel
      ; Error handling block for copy of cursor
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rsi, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rsi                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rdi, qword ptr [rsp + 048h]                            ; load address of return value's value
      push rdi                                                   ; internal argument 6: pointer to return value slot's value
      lea rdi, qword ptr [rsp + 048h]                            ; load address of return value's type
      push rdi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 068h], r10                            ; move copy of cursor's type out of r10
      mov qword ptr [rsp + 060h], rax                            ; move copy of _blockEntrySize's value out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r12, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 048h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 020h]                            ; restoring slots to previous scope state
      mov r10, qword ptr [rsp + 028h]                            ; restoring slots to previous scope state
    func$_garbageCollectorImplementation$while$copyOfCursor$TypeMatch$1:  ; after block
    cmp rbx, 000h                                                ; compare type of copy of _blockEntrySize to <sentinel>
    jne func$_garbageCollectorImplementation$while$copyOfBlockentrysize$TypeMatch$1 ; skip next block if copy of _blockEntrySize is not sentinel
      ; Error handling block for copy of _blockEntrySize
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r13, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push r13                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r14, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r14                                                   ; internal argument 6: pointer to return value slot's value
      lea r14, qword ptr [rsp + 048h]                            ; load address of return value's type
      push r14                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 068h], r10                            ; move copy of cursor's type out of r10
      mov qword ptr [rsp + 060h], rax                            ; move copy of _blockEntrySize's value out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      mov qword ptr [rsp + 040h], r15                            ; move copy of cursor's value out of r15
      lea r15, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r15                                                   ; internal argument 6: pointer to return value slot's value
      lea r15, qword ptr [rsp + 030h]                            ; load address of return value's type
      push r15                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 020h]                            ; restoring slots to previous scope state
      mov r15, qword ptr [rsp + 030h]                            ; restoring slots to previous scope state
      mov r10, qword ptr [rsp + 028h]                            ; restoring slots to previous scope state
    func$_garbageCollectorImplementation$while$copyOfBlockentrysize$TypeMatch$1:  ; after block
    mov qword ptr [rsp + 038h], r10                              ; move copy of cursor's type out of r10
    mov r10, r15                                                 ; assign value of copy of cursor to value of -= operator result
    sub r10, rax                                                 ; -= operator
    mov qword ptr [rsp + 048h], r10                              ; store value
    mov qword ptr [rsp + 040h], 01fh                             ; store type (Integer'31)
    ; Line 234: Integer pointer = __readFromAddress(cursor);
    mov rdi, qword ptr [rsp + 048h]                              ; make a copy of cursor's value in case it changes before we use it
    mov r12, qword ptr [rsp + 040h]                              ; make a copy of cursor's type in case it changes before we use it
    ; Call __readFromAddress with 1 arguments
    mov r10, qword ptr [rdi]                                     ; dereference first argument of __readFromAddress
    mov rdi, r10                                                 ; value initialization of variable declaration for pointer variable (dereferenced copy of cursor)
    mov r12, 01fh                                                ; type initialization of variable declaration for pointer variable (Integer'31)
    ; Line 235: if (pointer != 0) { ...
    mov r13, rdi                                                 ; make a copy of pointer's value in case it changes before we use it
    mov r14, r12                                                 ; make a copy of pointer's type in case it changes before we use it
    xor r15, r15                                                 ; zero value result of == (testing copy of pointer and 0) to put the boolean in
    cmp r13, 000h                                                ; values equal?
    sete r15b                                                    ; put result in value result of == (testing copy of pointer and 0)
    mov r10, 01eh                                                ; value result of == (testing copy of pointer and 0) is a Boolean'30
    xor rax, rax                                                 ; zero type result of == (testing copy of pointer and 0) to put the boolean in
    cmp r14, 01fh                                                ; types equal?
    sete al                                                      ; put result in type result of == (testing copy of pointer and 0)
    mov rbx, 01eh                                                ; type result of == (testing copy of pointer and 0) is a Boolean'30
    mov rsi, r15                                                 ; assign value of value result of == (testing copy of pointer and 0) to value of != operator result
    and rsi, rax                                                 ; && type temp and value temp
    xor rsi, 001h                                                ; negating <DynamicSlot:Boolean (uninitialized) ("!= operator result") (living: true)>
    cmp rsi, 000h                                                ; compare != operator result to false
    je func$_garbageCollectorImplementation$while$if$continuation$1 ; pointer != 0
      ; Line 236: Integer blockScratchSpace = __readFromAddress(pointer + _gcBlock...
      mov r9, rdi                                                ; make a copy of pointer's value in case it changes before we use it
      mov r8, r12                                                ; make a copy of pointer's type in case it changes before we use it
      mov rdx, qword ptr _gcBlockHeaderScratchSpaceValue         ; make a copy of _gcBlockHeaderScratchSpace's value in case it changes before we use it
      mov rcx, qword ptr _gcBlockHeaderScratchSpaceType          ; make a copy of _gcBlockHeaderScratchSpace's type in case it changes before we use it
      cmp r8, 000h                                               ; compare type of copy of pointer to <sentinel>
      jne func$_garbageCollectorImplementation$while$while$if$5$pointer$TypeMatch ; skip next block if copy of pointer is not sentinel
        ; Error handling block for pointer
        int 3                                                    ; call debugger
        ;  - print(operandTypeCheckFailureMessage)
        ; Call __print with 1 arguments
        mov qword ptr [rsp + 038h], rdi                          ; move pointer variable's value out of rdi
        mov rdi, offset operandTypeCheckFailureMessage           ; reading operandTypeCheckFailureMessage for push
        push rdi                                                 ; value of argument #1 (operandTypeCheckFailureMessage)
        push 020h                                                ; type of argument #1 (String'32)
        mov qword ptr [rsp + 038h], r12                          ; move pointer variable's type out of r12
        lea r12, qword ptr [rsp + 040h]                          ; load address of return value's value
        push r12                                                 ; internal argument 6: pointer to return value slot's value
        lea r12, qword ptr [rsp + 038h]                          ; load address of return value's type
        push r12                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov qword ptr [rsp + 058h], r9                           ; move copy of pointer's value out of r9
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov qword ptr [rsp + 050h], r8                           ; move copy of pointer's type out of r8
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov qword ptr [rsp + 048h], rdx                          ; move copy of _gcBlockHeaderScratchSpace's value out of rdx
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov qword ptr [rsp + 040h], rcx                          ; move copy of _gcBlockHeaderScratchSpace's type out of rcx
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$__print                                        ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        ;  - exit(1)
        ; Call exit with 1 arguments
        push 001h                                                ; value of argument #1 (1 (integer))
        push 01fh                                                ; type of argument #1 (Integer'31)
        lea r13, qword ptr [rsp + 040h]                          ; load address of return value's value
        push r13                                                 ; internal argument 6: pointer to return value slot's value
        lea r13, qword ptr [rsp + 038h]                          ; load address of return value's type
        push r13                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$exit                                           ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        mov rcx, qword ptr [rsp + 000h]                          ; restoring slots to previous scope state
        mov rdx, qword ptr [rsp + 008h]                          ; restoring slots to previous scope state
        mov rdi, qword ptr [rsp + 038h]                          ; restoring slots to previous scope state
        mov r8, qword ptr [rsp + 010h]                           ; restoring slots to previous scope state
        mov r9, qword ptr [rsp + 018h]                           ; restoring slots to previous scope state
        mov r12, qword ptr [rsp + 028h]                          ; restoring slots to previous scope state
      func$_garbageCollectorImplementation$while$while$if$5$pointer$TypeMatch:  ; after block
      cmp rcx, 000h                                              ; compare type of copy of _gcBlockHeaderScratchSpace to <sentinel>
      jne func$_garbageCollectorImplementation$while$while$if$5$Gcblockheaderscratchspace$TypeMatch ; skip next block if copy of _gcBlockHeaderScratchSpace is not sentinel
        ; Error handling block for _gcBlockHeaderScratchSpace
        int 3                                                    ; call debugger
        ;  - print(operandTypeCheckFailureMessage)
        ; Call __print with 1 arguments
        mov r14, offset operandTypeCheckFailureMessage           ; reading operandTypeCheckFailureMessage for push
        push r14                                                 ; value of argument #1 (operandTypeCheckFailureMessage)
        push 020h                                                ; type of argument #1 (String'32)
        lea r15, qword ptr [rsp + 048h]                          ; load address of return value's value
        push r15                                                 ; internal argument 6: pointer to return value slot's value
        lea r15, qword ptr [rsp + 048h]                          ; load address of return value's type
        push r15                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov qword ptr [rsp + 068h], r9                           ; move copy of pointer's value out of r9
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov qword ptr [rsp + 060h], r8                           ; move copy of pointer's type out of r8
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov qword ptr [rsp + 058h], rdx                          ; move copy of _gcBlockHeaderScratchSpace's value out of rdx
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov qword ptr [rsp + 050h], rcx                          ; move copy of _gcBlockHeaderScratchSpace's type out of rcx
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$__print                                        ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        ;  - exit(1)
        ; Call exit with 1 arguments
        push 001h                                                ; value of argument #1 (1 (integer))
        push 01fh                                                ; type of argument #1 (Integer'31)
        lea r10, qword ptr [rsp + 048h]                          ; load address of return value's value
        push r10                                                 ; internal argument 6: pointer to return value slot's value
        lea r10, qword ptr [rsp + 048h]                          ; load address of return value's type
        push r10                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$exit                                           ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        mov r8, qword ptr [rsp + 020h]                           ; restoring slots to previous scope state
        mov rcx, qword ptr [rsp + 010h]                          ; restoring slots to previous scope state
        mov r9, qword ptr [rsp + 028h]                           ; restoring slots to previous scope state
        mov rdx, qword ptr [rsp + 018h]                          ; restoring slots to previous scope state
      func$_garbageCollectorImplementation$while$while$if$5$Gcblockheaderscratchspace$TypeMatch:  ; after block
      mov rax, r9                                                ; assign value of copy of pointer to value of + operator result
      add rax, rdx                                               ; compute (copy of pointer) + (copy of _gcBlockHeaderScratchSpace) (result in + operator result)
      ; Call __readFromAddress with 1 arguments
      mov qword ptr [rsp + 038h], r12                            ; move pointer variable's type out of r12
      mov r12, qword ptr [rax]                                   ; dereference first argument of __readFromAddress
      mov r10, r12                                               ; value initialization of variable declaration for blockScratchSpace variable (dereferenced + operator result)
      mov rax, 01fh                                              ; type initialization of variable declaration for blockScratchSpace variable (Integer'31)
      ; Line 237: if (blockScratchSpace != _currentTag) { ...
      mov rbx, r10                                               ; make a copy of blockScratchSpace's value in case it changes before we use it
      mov rsi, rax                                               ; make a copy of blockScratchSpace's type in case it changes before we use it
      mov qword ptr [rsp + 030h], rdi                            ; move pointer variable's value out of rdi
      mov rdi, qword ptr _currentTagValue                        ; make a copy of _currentTag's value in case it changes before we use it
      mov r12, qword ptr _currentTagType                         ; make a copy of _currentTag's type in case it changes before we use it
      xor r13, r13                                               ; zero value result of == (testing copy of blockScratchSpace and copy of _currentTag) to put the boolean in
      cmp rbx, rdi                                               ; values equal?
      sete r13b                                                  ; put result in value result of == (testing copy of blockScratchSpace and copy of _currentTag)
      mov r14, 01eh                                              ; value result of == (testing copy of blockScratchSpace and copy of _currentTag) is a Boolean'30
      xor r15, r15                                               ; zero type result of == (testing copy of blockScratchSpace and copy of _currentTag) to put the boolean in
      cmp rsi, r12                                               ; types equal?
      sete r15b                                                  ; put result in type result of == (testing copy of blockScratchSpace and copy of _currentTag)
      mov r9, 01eh                                               ; type result of == (testing copy of blockScratchSpace and copy of _currentTag) is a Boolean'30
      mov r8, r13                                                ; assign value of value result of == (testing copy of blockScratchSpace and copy of _currentTag) to value of != operator result
      and r8, r15                                                ; && type temp and value temp
      xor r8, 001h                                               ; negating <DynamicSlot:Boolean (uninitialized) ("!= operator result") (living: true)>
      cmp r8, 000h                                               ; compare != operator result to false
      je func$_garbageCollectorImplementation$while$while$if$5$if$continuation ; blockScratchSpace != _currentTag
        ; Line 239: _free(pointer);
        mov rdx, qword ptr [rsp + 030h]                          ; make a copy of pointer's value in case it changes before we use it
        mov rcx, qword ptr [rsp + 038h]                          ; make a copy of pointer's type in case it changes before we use it
        ; Call _free with 1 arguments
        push rdx                                                 ; value of argument #1 (copy of pointer)
        push rcx                                                 ; type of argument #1
        lea rsi, qword ptr [rsp + 038h]                          ; load address of return value's value
        push rsi                                                 ; internal argument 6: pointer to return value slot's value
        lea rsi, qword ptr [rsp + 038h]                          ; load address of return value's type
        push rsi                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$_free                                          ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        ; Line 240: __writeToAddress(cursor, 0);
        mov rdi, qword ptr [rsp + 048h]                          ; make a copy of cursor's value in case it changes before we use it
        mov r12, qword ptr [rsp + 040h]                          ; make a copy of cursor's type in case it changes before we use it
        ; Call __writeToAddress with 2 arguments
        mov qword ptr [rdi], 000h                                ; __writeToAddress
        ; Line 241: _debugLiveBlocks -= 1;
        mov r10, qword ptr _debugLiveBlocksValue                 ; make a copy of _debugLiveBlocks's value in case it changes before we use it
        mov rax, qword ptr _debugLiveBlocksType                  ; make a copy of _debugLiveBlocks's type in case it changes before we use it
        cmp rax, 000h                                            ; compare type of copy of _debugLiveBlocks to <sentinel>
        jne func$_garbageCollectorImplementation$while$while$if$5$while$if$5$if$copyOfDebugliveblocks$TypeMatch ; skip next block if copy of _debugLiveBlocks is not sentinel
          ; Error handling block for copy of _debugLiveBlocks
          int 3                                                  ; call debugger
          ;  - print(operandTypeCheckFailureMessage)
          ; Call __print with 1 arguments
          mov rbx, offset operandTypeCheckFailureMessage         ; reading operandTypeCheckFailureMessage for push
          push rbx                                               ; value of argument #1 (operandTypeCheckFailureMessage)
          push 020h                                              ; type of argument #1 (String'32)
          lea rsi, qword ptr [rsp + 038h]                        ; load address of return value's value
          push rsi                                               ; internal argument 6: pointer to return value slot's value
          lea rsi, qword ptr [rsp + 038h]                        ; load address of return value's type
          push rsi                                               ; internal argument 5: pointer to return value slot's type
          sub rsp, 020h                                          ; allocate shadow space
          mov r9, 000h                                           ; internal argument 4: "this" pointer
          mov r8, 000h                                           ; internal argument 3: "this" pointer type
          mov rdx, 000h                                          ; internal argument 2: closure pointer
          mov rcx, 001h                                          ; internal argument 1: number of actual arguments
          mov qword ptr [rsp + 058h], r10                        ; move copy of _debugLiveBlocks's value out of r10
          mov qword ptr [rsp + 050h], rax                        ; move copy of _debugLiveBlocks's type out of rax
          call func$__print                                      ; jump to subroutine
          add rsp, 040h                                          ; release shadow space and arguments (result in stack pointer)
          ;  - exit(1)
          ; Call exit with 1 arguments
          push 001h                                              ; value of argument #1 (1 (integer))
          push 01fh                                              ; type of argument #1 (Integer'31)
          lea rdi, qword ptr [rsp + 038h]                        ; load address of return value's value
          push rdi                                               ; internal argument 6: pointer to return value slot's value
          lea rdi, qword ptr [rsp + 038h]                        ; load address of return value's type
          push rdi                                               ; internal argument 5: pointer to return value slot's type
          sub rsp, 020h                                          ; allocate shadow space
          mov r9, 000h                                           ; internal argument 4: "this" pointer
          mov r8, 000h                                           ; internal argument 3: "this" pointer type
          mov rdx, 000h                                          ; internal argument 2: closure pointer
          mov rcx, 001h                                          ; internal argument 1: number of actual arguments
          call func$exit                                         ; jump to subroutine
          add rsp, 040h                                          ; release shadow space and arguments (result in stack pointer)
          mov rax, qword ptr [rsp + 010h]                        ; restoring slots to previous scope state
          mov r10, qword ptr [rsp + 018h]                        ; restoring slots to previous scope state
        func$_garbageCollectorImplementation$while$while$if$5$while$if$5$if$copyOfDebugliveblocks$TypeMatch:  ; after block
        mov r15, r10                                             ; assign value of copy of _debugLiveBlocks to value of -= operator result
        sub r15, 001h                                            ; -= operator
        mov qword ptr _debugLiveBlocksValue, r15                 ; store value
        mov qword ptr _debugLiveBlocksType, 01fh                 ; store type (Integer'31)
      func$_garbageCollectorImplementation$while$while$if$5$if$continuation:  ; end of if
      mov r12, qword ptr [rsp + 038h]                            ; restoring slots to previous scope state
      mov rdi, qword ptr [rsp + 030h]                            ; restoring slots to previous scope state
    func$_garbageCollectorImplementation$while$if$continuation$1:  ; end of if
    mov rax, qword ptr [rsp + 048h]                              ; restoring slots to previous scope state
    mov rbx, qword ptr [rsp + 040h]                              ; restoring slots to previous scope state
    jmp func$_garbageCollectorImplementation$while$top$1         ; return to top of while
  func$_garbageCollectorImplementation$while$bottom$1:           ; bottom of while
  ; Line 245: _gcLocked -= 1;
  mov rsi, qword ptr _gcLockedValue                              ; make a copy of _gcLocked's value in case it changes before we use it
  mov rdi, qword ptr _gcLockedType                               ; make a copy of _gcLocked's type in case it changes before we use it
  cmp rdi, 000h                                                  ; compare type of copy of _gcLocked to <sentinel>
  jne func$_garbageCollectorImplementation$copyOfGclocked$TypeMatch$1 ; skip next block if copy of _gcLocked is not sentinel
    ; Error handling block for copy of _gcLocked
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r12, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r12                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r13, qword ptr [rsp + 058h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 058h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r14, qword ptr [rsp + 058h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 058h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_garbageCollectorImplementation$copyOfGclocked$TypeMatch$1:  ; after block
  mov rbx, rsi                                                   ; assign value of copy of _gcLocked to value of -= operator result
  sub rbx, 001h                                                  ; -= operator
  mov qword ptr _gcLockedValue, rbx                              ; store value
  mov qword ptr _gcLockedType, 01fh                              ; store type (Integer'31)
  ; Implicit return from _garbageCollectorImplementation
  mov r10, qword ptr [rbp + 030h]                                ; get pointer to return value of _garbageCollectorImplementation into register to dereference it
  mov qword ptr [r10], 000h                                      ; _garbageCollectorImplementation return value
  mov rax, qword ptr [rbp + 028h]                                ; get pointer to return value type of _garbageCollectorImplementation into register to dereference it
  mov qword ptr [rax], 01dh                                      ; type of _garbageCollectorImplementation return value (Null'29)
  func$_garbageCollectorImplementation$epilog: 
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 058h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; _listConstructor
dq func$_listConstructor$annotation
func$_listConstructor:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 0c0h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 0100h]                               ; set up frame pointer
  ; Check parameter count
  cmp rcx, 002h                                                  ; compare parameter count of _listConstructor to 2 (integer)
  je func$_listConstructor$parameterCountCheck$continuation      ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 0c0h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 0c0h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 0c0h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 0c0h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_listConstructor$parameterCountCheck$continuation:        ; end of parameter count check
  ; Check type of parameter 0, typeCode (expecting Integer)
  mov rsi, qword ptr [rbp + 038h]                                ; store typeCode's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that typeCode is Integer
  jc func$_listConstructor$typecode$TypeMatch                    ; skip next block if the type matches
    ; Error handling block for typeCode
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 0c0h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 0c0h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 0c0h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 0c0h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_listConstructor$typecode$TypeMatch:                      ; after block
  ; Check type of parameter 1, initialSize (expecting Integer)
  mov r10, qword ptr [rbp + 048h]                                ; store initialSize's type in testByte value slot
  mov rax, r10                                                   ; move testByte to testByte
  mov rbx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rbx                                                        ; adjust to the relative start of that type's entry in the type table
  mov rsi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rsi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that initialSize is Integer
  jc func$_listConstructor$initialsize$TypeMatch                 ; skip next block if the type matches
    ; Error handling block for initialSize
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 0c0h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 0c0h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 0c0h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 0c0h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_listConstructor$initialsize$TypeMatch:                   ; after block
  ; Line 263: _gcLocked += 1;
  mov r14, qword ptr _gcLockedValue                              ; make a copy of _gcLocked's value in case it changes before we use it
  mov r15, qword ptr _gcLockedType                               ; make a copy of _gcLocked's type in case it changes before we use it
  cmp r15, 000h                                                  ; compare type of copy of _gcLocked to <sentinel>
  jne func$_listConstructor$copyOfGclocked$TypeMatch             ; skip next block if copy of _gcLocked is not sentinel
    ; Error handling block for copy of _gcLocked
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 0c0h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 0c0h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 0c0h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 0c0h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_listConstructor$copyOfGclocked$TypeMatch:                ; after block
  mov r13, r14                                                   ; assign value of copy of _gcLocked to value of += operator result
  add r13, 001h                                                  ; += operator
  mov qword ptr _gcLockedValue, r13                              ; store value
  mov qword ptr _gcLockedType, 01fh                              ; store type (Integer'31)
  ; Line 264: WhateverList list = _constructor(typeCode, 2, 2) as WhateverList...
  ; Call _constructor with 3 arguments
  push 002h                                                      ; value of argument #3 (2)
  push 01fh                                                      ; type of argument #3 (Integer'31)
  push 002h                                                      ; value of argument #2 (2)
  push 01fh                                                      ; type of argument #2 (Integer'31)
  push qword ptr [rbp + 040h]                                    ; value of argument #1 (typeCode)
  push qword ptr [rbp + 038h]                                    ; type of argument #1
  lea rdi, qword ptr [rsp + 0e0h]                                ; load address of return value's value
  push rdi                                                       ; internal argument 6: pointer to return value slot's value
  lea rdi, qword ptr [rsp + 0e0h]                                ; load address of return value's type
  push rdi                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 003h                                                  ; internal argument 1: number of actual arguments
  call func$_constructor                                         ; jump to subroutine
  add rsp, 060h                                                  ; release shadow space and arguments (result in stack pointer)
  mov r12, qword ptr [rsp + 0a8h]                                ; store _constructor return value's type in testByte value slot
  mov rax, r12                                                   ; move testByte to testByte
  mov r13, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r13                                                        ; adjust to the relative start of that type's entry in the type table
  add rax, 001h                                                  ; adjust to the byte containing the bit to check against (result in testByte)
  mov r14, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r14                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 003h                                       ; check that _constructor(typeCode, 2, 2) as WhateverList is WhateverList
  jc func$_listConstructor$ConstructorTypecode22AsWHateverlist$TypeMatch ; skip next block if the type matches
    ; Error handling block for _constructor(typeCode, 2, 2) as WhateverList
    int 3                                                        ; call debugger
    ;  - print(asOperatorFailureMessage)
    ; Call __print with 1 arguments
    mov r15, offset asOperatorFailureMessage                     ; reading asOperatorFailureMessage for push
    push r15                                                     ; value of argument #1 (asOperatorFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r10, qword ptr [rsp + 0b0h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 0b0h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 0b0h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 0b0h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_listConstructor$ConstructorTypecode22AsWHateverlist$TypeMatch:  ; after block
  mov rsi, qword ptr [rsp + 0b0h]                                ; copy value of _constructor return value for cast to WhateverList
  mov rdi, qword ptr [rsp + 0a8h]                                ; copy type of _constructor return value for cast to WhateverList
  cmp rdi, 000h                                                  ; compare type of cast of _constructor return value to WhateverList to <sentinel>
  jne func$_listConstructor$castOfConstructorReturnValueToWHateverlist$TypeMatch ; skip next block if cast of _constructor return value to WhateverList is not sentinel
    ; Error handling block for cast of _constructor return value to WhateverList
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r12, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push r12                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 0b0h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 0b0h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 0b0h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 0b0h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_listConstructor$castOfConstructorReturnValueToWHateverlist$TypeMatch:  ; after block
  mov r14, rsi                                                   ; value initialization of variable declaration for list variable (cast of _constructor return value to WhateverList)
  mov r15, rdi                                                   ; type initialization of variable declaration for list variable
  ; increment reference count for list variable if necessary
  mov r10, r15                                                   ; store list variable's type in testByte value slot
  mov rax, r10                                                   ; move testByte to testByte
  mov rbx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rbx                                                        ; adjust to the relative start of that type's entry in the type table
  mov rsi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rsi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$_listConstructor$AfterGCIncref                        ; if not a GarbageCollectable, skip incref
    inc qword ptr [r14]                                          ; increment reference count of list variable
  func$_listConstructor$AfterGCIncref:                           ; after GarbageCollectable incref
  ; Line 265: __ListData data = _constructor(__typeToCode __ListData, 0, initi...
  ; Call _constructor with 3 arguments
  push qword ptr [rbp + 050h]                                    ; value of argument #3 (initialSize)
  push qword ptr [rbp + 048h]                                    ; type of argument #3
  push 000h                                                      ; value of argument #2 (0)
  push 01fh                                                      ; type of argument #2 (Integer'31)
  push 021h                                                      ; value of argument #1 (code of __ListData)
  push 01fh                                                      ; type of argument #1 (Integer'31)
  mov qword ptr [rsp + 0c8h], r14                                ; move list variable's value out of r14
  lea r14, qword ptr [rsp + 0d0h]                                ; load address of return value's value
  push r14                                                       ; internal argument 6: pointer to return value slot's value
  lea r14, qword ptr [rsp + 0c8h]                                ; load address of return value's type
  push r14                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 003h                                                  ; internal argument 1: number of actual arguments
  call func$_constructor                                         ; jump to subroutine
  add rsp, 060h                                                  ; release shadow space and arguments (result in stack pointer)
  mov qword ptr [rsp + 088h], r15                                ; move list variable's type out of r15
  mov r15, qword ptr [rsp + 090h]                                ; store _constructor return value's type in testByte value slot
  mov rax, r15                                                   ; move testByte to testByte
  mov r10, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r10                                                        ; adjust to the relative start of that type's entry in the type table
  mov rbx, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rbx                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 004h                                       ; check that _constructor(__typeToCode __ListData, 0, initialSize) as __ListData is __ListData
  jc func$_listConstructor$ConstructorTypetocodeLIstdata0InitialsizeAsLIstdata$TypeMatch ; skip next block if the type matches
    ; Error handling block for _constructor(__typeToCode __ListData, 0, initialSize) as __ListData
    int 3                                                        ; call debugger
    ;  - print(asOperatorFailureMessage)
    ; Call __print with 1 arguments
    mov rsi, offset asOperatorFailureMessage                     ; reading asOperatorFailureMessage for push
    push rsi                                                     ; value of argument #1 (asOperatorFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rdi, qword ptr [rsp + 090h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 090h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r12, qword ptr [rsp + 090h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 090h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_listConstructor$ConstructorTypetocodeLIstdata0InitialsizeAsLIstdata$TypeMatch:  ; after block
  mov r13, qword ptr [rsp + 0a0h]                                ; copy value of _constructor return value for cast to __ListData
  mov r14, qword ptr [rsp + 090h]                                ; copy type of _constructor return value for cast to __ListData
  cmp r14, 000h                                                  ; compare type of cast of _constructor return value to __ListData to <sentinel>
  jne func$_listConstructor$castOfConstructorReturnValueToLIstdata$TypeMatch ; skip next block if cast of _constructor return value to __ListData is not sentinel
    ; Error handling block for cast of _constructor return value to __ListData
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r15, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push r15                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 090h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 090h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 090h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 090h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_listConstructor$castOfConstructorReturnValueToLIstdata$TypeMatch:  ; after block
  mov rbx, r13                                                   ; value initialization of variable declaration for data variable (cast of _constructor return value to __ListData)
  mov rsi, r14                                                   ; type initialization of variable declaration for data variable
  ; increment reference count for data variable if necessary
  mov rdi, rsi                                                   ; store data variable's type in testByte value slot
  mov rax, rdi                                                   ; move testByte to testByte
  mov r12, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r12                                                        ; adjust to the relative start of that type's entry in the type table
  mov r13, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r13                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$_listConstructor$AfterGCIncref$1                      ; if not a GarbageCollectable, skip incref
    inc qword ptr [rbx]                                          ; increment reference count of data variable
  func$_listConstructor$AfterGCIncref$1:                         ; after GarbageCollectable incref
  ; Line 266: __writeToAddress(list __as__ Integer + _gcBlockData + 0, __typeO...
  mov r14, qword ptr [rsp + 098h]                                ; make a copy of list's value in case it changes before we use it
  mov r15, qword ptr [rsp + 088h]                                ; make a copy of list's type in case it changes before we use it
  ; increment reference count for copy of list if necessary
  mov r10, r15                                                   ; store copy of list's type in testByte value slot
  mov rax, r10                                                   ; move testByte to testByte
  mov r9, 002h                                                   ; read operand of mul (type table width in bytes) 
  mul r9                                                         ; adjust to the relative start of that type's entry in the type table
  mov r8, offset typeTable                                       ; read second operand of + (type table pointer)
  add rax, r8                                                    ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$_listConstructor$AfterGCIncref$2                      ; if not a GarbageCollectable, skip incref
    inc qword ptr [r14]                                          ; increment reference count of copy of list
  func$_listConstructor$AfterGCIncref$2:                         ; after GarbageCollectable incref
  mov rdx, r14                                                   ; force cast of copy of list to Integer
  mov rcx, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov qword ptr [rsp + 080h], rbx                                ; move data variable's value out of rbx
  mov rbx, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp rbx, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$_listConstructor$Gcblockdata$TypeMatch                ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    mov qword ptr [rsp + 080h], r14                              ; move copy of list's value out of r14
    lea r14, qword ptr [rsp + 088h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 080h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov qword ptr [rsp + 0a0h], rdx                              ; move force cast of copy of list to Integer's value out of rdx
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov qword ptr [rsp + 098h], rcx                              ; move copy of _gcBlockData's value out of rcx
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 078h], r15                              ; move copy of list's type out of r15
    lea r15, qword ptr [rsp + 088h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 068h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r14, qword ptr [rsp + 070h]                              ; restoring slots to previous scope state
    mov r15, qword ptr [rsp + 068h]                              ; restoring slots to previous scope state
    mov rcx, qword ptr [rsp + 058h]                              ; restoring slots to previous scope state
    mov rdx, qword ptr [rsp + 060h]                              ; restoring slots to previous scope state
  func$_listConstructor$Gcblockdata$TypeMatch:                   ; after block
  mov r10, rdx                                                   ; assign value of force cast of copy of list to Integer to value of + operator result
  add r10, rcx                                                   ; compute (force cast of copy of list to Integer) + (copy of _gcBlockData) (result in + operator result)
  mov qword ptr [rsp + 078h], r14                                ; move copy of list's value out of r14
  mov r14, r10                                                   ; compute (+ operator result) + (0)
  mov qword ptr [rsp + 070h], r15                                ; move copy of list's type out of r15
  mov r15, qword ptr [rbp + 048h]                                ; store initialSize's type in __typeOf unary operator result value slot
  ; Call __writeToAddress with 2 arguments
  mov qword ptr [r14], r15                                       ; __writeToAddress
  ; Line 267: __writeToAddress(list __as__ Integer + _gcBlockData + 8, initial...
  mov qword ptr [rsp + 068h], rsi                                ; move data variable's type out of rsi
  mov rsi, qword ptr [rsp + 098h]                                ; make a copy of list's value in case it changes before we use it
  mov rdi, qword ptr [rsp + 088h]                                ; make a copy of list's type in case it changes before we use it
  ; increment reference count for copy of list if necessary
  mov r12, rdi                                                   ; store copy of list's type in testByte value slot
  mov rax, r12                                                   ; move testByte to testByte
  mov r13, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r13                                                        ; adjust to the relative start of that type's entry in the type table
  mov r14, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r14                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$_listConstructor$AfterGCIncref$3                      ; if not a GarbageCollectable, skip incref
    inc qword ptr [rsi]                                          ; increment reference count of copy of list
  func$_listConstructor$AfterGCIncref$3:                         ; after GarbageCollectable incref
  mov r15, rsi                                                   ; force cast of copy of list to Integer
  mov r10, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov rbx, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp rbx, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$_listConstructor$Gcblockdata$TypeMatch$1              ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 060h], rdi                              ; move copy of list's type out of rdi
    mov rdi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 068h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 068h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 088h], r10                              ; move copy of _gcBlockData's value out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rax, qword ptr [rsp + 068h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 068h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 048h]                              ; restoring slots to previous scope state
    mov rdi, qword ptr [rsp + 060h]                              ; restoring slots to previous scope state
  func$_listConstructor$Gcblockdata$TypeMatch$1:                 ; after block
  mov r13, r15                                                   ; assign value of force cast of copy of list to Integer to value of + operator result
  add r13, r10                                                   ; compute (force cast of copy of list to Integer) + (copy of _gcBlockData) (result in + operator result)
  mov r12, r13                                                   ; assign value of + operator result to value of + operator result
  add r12, 008h                                                  ; compute (+ operator result) + (8) (result in + operator result)
  mov rax, qword ptr [rbp + 050h]                                ; force cast of initialSize to Integer
  ; Call __writeToAddress with 2 arguments
  mov qword ptr [r12], rax                                       ; __writeToAddress
  ; Line 268: __writeToAddress(list __as__ Integer + _gcBlockData + 16 /* 0x10...
  mov r10, qword ptr [rsp + 098h]                                ; make a copy of list's value in case it changes before we use it
  mov rbx, qword ptr [rsp + 088h]                                ; make a copy of list's type in case it changes before we use it
  ; increment reference count for copy of list if necessary
  mov qword ptr [rsp + 060h], rsi                                ; move copy of list's value out of rsi
  mov rsi, rbx                                                   ; store copy of list's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov qword ptr [rsp + 058h], rdi                                ; move copy of list's type out of rdi
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$_listConstructor$AfterGCIncref$4                      ; if not a GarbageCollectable, skip incref
    inc qword ptr [r10]                                          ; increment reference count of copy of list
  func$_listConstructor$AfterGCIncref$4:                         ; after GarbageCollectable incref
  mov r13, r10                                                   ; force cast of copy of list to Integer
  mov r14, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov r15, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp r15, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$_listConstructor$Gcblockdata$TypeMatch$2              ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 050h], rbx                              ; move copy of list's type out of rbx
    mov rbx, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rbx                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rsi, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 058h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 078h], r10                              ; move copy of list's value out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rax, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 058h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 038h]                              ; restoring slots to previous scope state
    mov rbx, qword ptr [rsp + 050h]                              ; restoring slots to previous scope state
  func$_listConstructor$Gcblockdata$TypeMatch$2:                 ; after block
  mov rdi, r13                                                   ; assign value of force cast of copy of list to Integer to value of + operator result
  add rdi, r14                                                   ; compute (force cast of copy of list to Integer) + (copy of _gcBlockData) (result in + operator result)
  mov rsi, rdi                                                   ; assign value of + operator result to value of + operator result
  add rsi, 010h                                                  ; compute (+ operator result) + (16 /* 0x10 */) (result in + operator result)
  mov rax, qword ptr [rsp + 080h]                                ; make a copy of data's value in case it changes before we use it
  mov rdi, qword ptr [rsp + 068h]                                ; make a copy of data's type in case it changes before we use it
  ; increment reference count for copy of data if necessary
  mov r12, rdi                                                   ; store copy of data's type in testByte value slot
  mov qword ptr [rsp + 050h], rax                                ; move copy of data's value out of rax
  mov rax, r12                                                   ; move testByte to testByte
  mov r13, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r13                                                        ; adjust to the relative start of that type's entry in the type table
  mov r14, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r14                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$_listConstructor$AfterGCIncref$5                      ; if not a GarbageCollectable, skip incref
    mov r15, qword ptr [rsp + 050h]                              ; read slot into register for dereferencing
    inc qword ptr [r15]                                          ; increment reference count of copy of data
    mov qword ptr [rsp + 050h], r15                              ; restoring slots to previous scope state
  func$_listConstructor$AfterGCIncref$5:                         ; after GarbageCollectable incref
  mov qword ptr [rsp + 048h], r10                                ; move copy of list's value out of r10
  mov r10, rdi                                                   ; store copy of data's type in __typeOf unary operator result value slot
  ; Call __writeToAddress with 2 arguments
  mov qword ptr [rsi], r10                                       ; __writeToAddress
  ; Line 269: __writeToAddress(list __as__ Integer + _gcBlockData + 24 /* 0x18...
  mov qword ptr [rsp + 040h], rdi                                ; move copy of data's type out of rdi
  mov rdi, qword ptr [rsp + 098h]                                ; make a copy of list's value in case it changes before we use it
  mov r12, qword ptr [rsp + 088h]                                ; make a copy of list's type in case it changes before we use it
  ; increment reference count for copy of list if necessary
  mov rax, r12                                                   ; store copy of list's type in testByte value slot
  mov r13, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r13                                                        ; adjust to the relative start of that type's entry in the type table
  mov r14, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r14                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$_listConstructor$AfterGCIncref$6                      ; if not a GarbageCollectable, skip incref
    inc qword ptr [rdi]                                          ; increment reference count of copy of list
  func$_listConstructor$AfterGCIncref$6:                         ; after GarbageCollectable incref
  mov r15, rdi                                                   ; force cast of copy of list to Integer
  mov r10, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov qword ptr [rsp + 038h], rbx                                ; move copy of list's type out of rbx
  mov rbx, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp rbx, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$_listConstructor$Gcblockdata$TypeMatch$3              ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 030h], r12                              ; move copy of list's type out of r12
    mov r12, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r12                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 058h], r10                              ; move copy of _gcBlockData's value out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r12, qword ptr [rsp + 030h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
  func$_listConstructor$Gcblockdata$TypeMatch$3:                 ; after block
  mov r14, r15                                                   ; assign value of force cast of copy of list to Integer to value of + operator result
  add r14, r10                                                   ; compute (force cast of copy of list to Integer) + (copy of _gcBlockData) (result in + operator result)
  mov rax, r14                                                   ; assign value of + operator result to value of + operator result
  add rax, 018h                                                  ; compute (+ operator result) + (24 /* 0x18 */) (result in + operator result)
  mov r13, qword ptr [rsp + 080h]                                ; make a copy of data's value in case it changes before we use it
  mov r14, qword ptr [rsp + 068h]                                ; make a copy of data's type in case it changes before we use it
  ; increment reference count for copy of data if necessary
  mov r15, r14                                                   ; store copy of data's type in testByte value slot
  mov qword ptr [rsp + 030h], rax                                ; move + operator result's value out of rax
  mov rax, r15                                                   ; move testByte to testByte
  mov r10, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r10                                                        ; adjust to the relative start of that type's entry in the type table
  mov rbx, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rbx                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$_listConstructor$AfterGCIncref$7                      ; if not a GarbageCollectable, skip incref
    inc qword ptr [r13]                                          ; increment reference count of copy of data
  func$_listConstructor$AfterGCIncref$7:                         ; after GarbageCollectable incref
  mov rsi, r13                                                   ; force cast of copy of data to Integer
  ; Call __writeToAddress with 2 arguments
  mov qword ptr [rsp + 028h], r14                                ; move copy of data's type out of r14
  mov r14, qword ptr [rsp + 030h]                                ; get + operator result into register to dereference it
  mov qword ptr [r14], rsi                                       ; __writeToAddress
  ; Line 270: _gcLocked -= 1;
  mov r15, qword ptr _gcLockedValue                              ; make a copy of _gcLocked's value in case it changes before we use it
  mov rax, qword ptr _gcLockedType                               ; make a copy of _gcLocked's type in case it changes before we use it
  cmp rax, 000h                                                  ; compare type of copy of _gcLocked to <sentinel>
  jne func$_listConstructor$copyOfGclocked$TypeMatch$1           ; skip next block if copy of _gcLocked is not sentinel
    ; Error handling block for copy of _gcLocked
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rbx, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 058h], rax                              ; move copy of _gcLocked's type out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rsi, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
  func$_listConstructor$copyOfGclocked$TypeMatch$1:              ; after block
  mov r14, r15                                                   ; assign value of copy of _gcLocked to value of -= operator result
  sub r14, 001h                                                  ; -= operator
  mov qword ptr _gcLockedValue, r14                              ; store value
  mov qword ptr _gcLockedType, 01fh                              ; store type (Integer'31)
  ; Line 271: return list;
  mov rbx, qword ptr [rsp + 098h]                                ; make a copy of list's value in case it changes before we use it
  mov rsi, qword ptr [rsp + 088h]                                ; make a copy of list's type in case it changes before we use it
  ; increment reference count for copy of list if necessary
  mov qword ptr [rsp + 030h], rdi                                ; move copy of list's value out of rdi
  mov rdi, rsi                                                   ; store copy of list's type in testByte value slot
  mov rax, rdi                                                   ; move testByte to testByte
  mov qword ptr [rsp + 020h], r12                                ; move copy of list's type out of r12
  mov r12, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r12                                                        ; adjust to the relative start of that type's entry in the type table
  mov qword ptr [rsp + 018h], r13                                ; move copy of data's value out of r13
  mov r13, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r13                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$_listConstructor$AfterGCIncref$8                      ; if not a GarbageCollectable, skip incref
    inc qword ptr [rbx]                                          ; increment reference count of copy of list
  func$_listConstructor$AfterGCIncref$8:                         ; after GarbageCollectable incref
  cmp rsi, 000h                                                  ; compare type of copy of list to <sentinel>
  jne func$_listConstructor$ListconstructorReturnValue$TypeMatch ; skip next block if copy of list is not sentinel
    ; Error handling block for _listConstructor return value
    int 3                                                        ; call debugger
    ;  - print(returnValueTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r14, offset returnValueTypeCheckFailureMessage           ; reading returnValueTypeCheckFailureMessage for push
    push r14                                                     ; value of argument #1 (returnValueTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r15, qword ptr [rsp + 020h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 020h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_listConstructor$ListconstructorReturnValue$TypeMatch:    ; after block
  mov qword ptr [rsp + 010h], rsi                                ; move copy of list's type out of rsi
  mov rsi, qword ptr [rbp + 030h]                                ; get pointer to return value of _listConstructor into register to dereference it
  mov qword ptr [rsi], rbx                                       ; _listConstructor return value
  mov qword ptr [rsp + 008h], rbx                                ; move copy of list's value out of rbx
  mov rbx, qword ptr [rsp + 010h]                                ; reading type of copy of list
  mov rdi, qword ptr [rbp + 028h]                                ; get pointer to return value type of _listConstructor into register to dereference it
  mov qword ptr [rdi], rbx                                       ; type of _listConstructor return value
  ; increment reference count for copy of list if necessary
  mov rax, rbx                                                   ; store copy of list's type in testByte value slot
  mov r12, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r12                                                        ; adjust to the relative start of that type's entry in the type table
  mov r13, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r13                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$_listConstructor$AfterGCIncref$9                      ; if not a GarbageCollectable, skip incref
    mov r14, qword ptr [rsp + 008h]                              ; read slot into register for dereferencing
    inc qword ptr [r14]                                          ; increment reference count of copy of list
    mov qword ptr [rsp + 008h], r14                              ; restoring slots to previous scope state
  func$_listConstructor$AfterGCIncref$9:                         ; after GarbageCollectable incref
  ; Decrement reference count for data variable (static type: __ListData'33) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 088h]                                ; arg #2: data variable's type
  mov rcx, qword ptr [rsp + 0a0h]                                ; arg #1: data variable's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of data (static type: __ListData'33) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 060h]                                ; arg #2: copy of data's type
  mov rcx, qword ptr [rsp + 070h]                                ; arg #1: copy of data's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for _constructor return value (static type: GarbageCollectable'36) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 0c8h]                                ; arg #2: _constructor return value's type
  mov rcx, qword ptr [rsp + 0d0h]                                ; arg #1: _constructor return value's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of list (static type: WhateverList'40) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 040h]                                ; arg #2: copy of list's type
  mov rcx, qword ptr [rsp + 050h]                                ; arg #1: copy of list's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of list (static type: WhateverList'40) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, rbx                                                   ; arg #2: copy of list's type
  mov rcx, qword ptr [rsp + 028h]                                ; arg #1: copy of list's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for list variable (static type: WhateverList'40) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 0a8h]                                ; arg #2: list variable's type
  mov rcx, qword ptr [rsp + 0b8h]                                ; arg #1: list variable's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of list (static type: WhateverList'40) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 090h]                                ; arg #2: copy of list's type
  mov rcx, qword ptr [rsp + 098h]                                ; arg #1: copy of list's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of data (static type: __ListData'33) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 048h]                                ; arg #2: copy of data's type
  mov rcx, qword ptr [rsp + 038h]                                ; arg #1: copy of data's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for _constructor return value (static type: GarbageCollectable'36) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 0b0h]                                ; arg #2: _constructor return value's type
  mov rcx, qword ptr [rsp + 0c0h]                                ; arg #1: _constructor return value's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of list (static type: WhateverList'40) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 078h]                                ; arg #2: copy of list's type
  mov rcx, qword ptr [rsp + 080h]                                ; arg #1: copy of list's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of list (static type: WhateverList'40) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 058h]                                ; arg #2: copy of list's type
  mov rcx, qword ptr [rsp + 068h]                                ; arg #1: copy of list's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 0c0h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; _growList
dq func$_growList$annotation
func$_growList:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 090h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 0d0h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 001h                                                  ; compare parameter count of _growList to 1 (integer)
  je func$_growList$parameterCountCheck$continuation             ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 090h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 090h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 090h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 090h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_growList$parameterCountCheck$continuation:               ; end of parameter count check
  ; Check type of parameter 0, list (expecting WhateverList)
  mov rsi, qword ptr [rbp + 038h]                                ; store list's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  add rax, 001h                                                  ; adjust to the byte containing the bit to check against (result in testByte)
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 003h                                       ; check that list is WhateverList
  jc func$_growList$list$TypeMatch                               ; skip next block if the type matches
    ; Error handling block for list
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 090h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 090h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 090h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 090h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_growList$list$TypeMatch:                                 ; after block
  ; Line 275: _gcLocked += 1;
  mov r10, qword ptr _gcLockedValue                              ; make a copy of _gcLocked's value in case it changes before we use it
  mov rbx, qword ptr _gcLockedType                               ; make a copy of _gcLocked's type in case it changes before we use it
  cmp rbx, 000h                                                  ; compare type of copy of _gcLocked to <sentinel>
  jne func$_growList$copyOfGclocked$TypeMatch                    ; skip next block if copy of _gcLocked is not sentinel
    ; Error handling block for copy of _gcLocked
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rsi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rsi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 090h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 090h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 0b0h], r10                              ; move copy of _gcLocked's value out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rdi, qword ptr [rsp + 090h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 090h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 070h]                              ; restoring slots to previous scope state
  func$_growList$copyOfGclocked$TypeMatch:                       ; after block
  mov r15, r10                                                   ; assign value of copy of _gcLocked to value of += operator result
  add r15, 001h                                                  ; += operator
  mov qword ptr _gcLockedValue, r15                              ; store value
  mov qword ptr _gcLockedType, 01fh                              ; store type (Integer'31)
  ; Line 276: Integer newSize = len(list) * 2;
  ; Call len with 1 arguments
  push qword ptr [rbp + 040h]                                    ; value of argument #1 (list)
  push qword ptr [rbp + 038h]                                    ; type of argument #1
  lea r13, qword ptr [rsp + 090h]                                ; load address of return value's value
  push r13                                                       ; internal argument 6: pointer to return value slot's value
  lea r13, qword ptr [rsp + 090h]                                ; load address of return value's type
  push r13                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call func$len                                                  ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  cmp qword ptr [rsp + 078h], 000h                               ; compare type of len return value to <sentinel>
  jne func$_growList$lenList$TypeMatch                           ; skip next block if len return value is not sentinel
    ; Error handling block for len(list)
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r14, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r14                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r15, qword ptr [rsp + 080h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 080h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 080h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 080h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_growList$lenList$TypeMatch:                              ; after block
  mov r12, qword ptr [rsp + 080h]                                ; read left hand side operand of imul (len return value)
  imul rdi, r12, 002h                                            ; compute (len return value) * (2) (result in * operator result)
  mov r10, rdi                                                   ; value initialization of variable declaration for newSize variable (* operator result)
  mov rbx, 01fh                                                  ; type initialization of variable declaration for newSize variable (Integer'31)
  ; Line 277: __ListData newData = _constructor(__typeToCode __ListData, len(l...
  ; Call len with 1 arguments
  push qword ptr [rbp + 040h]                                    ; value of argument #1 (list)
  push qword ptr [rbp + 038h]                                    ; type of argument #1
  lea r12, qword ptr [rsp + 090h]                                ; load address of return value's value
  push r12                                                       ; internal argument 6: pointer to return value slot's value
  lea r12, qword ptr [rsp + 090h]                                ; load address of return value's type
  push r12                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  mov qword ptr [rsp + 0b0h], r10                                ; move newSize variable's value out of r10
  call func$len                                                  ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  mov r13, qword ptr [rsp + 070h]                                ; make a copy of newSize's value in case it changes before we use it
  mov r14, rbx                                                   ; make a copy of newSize's type in case it changes before we use it
  ; Call _constructor with 3 arguments
  push r13                                                       ; value of argument #3 (copy of newSize)
  push r14                                                       ; type of argument #3
  push qword ptr [rsp + 090h]                                    ; value of argument #2 (len return value)
  push qword ptr [rsp + 090h]                                    ; type of argument #2
  push 021h                                                      ; value of argument #1 (code of __ListData)
  push 01fh                                                      ; type of argument #1 (Integer'31)
  lea rsi, qword ptr [rsp + 0b0h]                                ; load address of return value's value
  push rsi                                                       ; internal argument 6: pointer to return value slot's value
  lea rsi, qword ptr [rsp + 0b0h]                                ; load address of return value's type
  push rsi                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 003h                                                  ; internal argument 1: number of actual arguments
  call func$_constructor                                         ; jump to subroutine
  add rsp, 060h                                                  ; release shadow space and arguments (result in stack pointer)
  mov rax, qword ptr [rsp + 078h]                                ; store _constructor return value's type in testByte value slot
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 004h                                       ; check that _constructor(__typeToCode __ListData, len(list), newSize) as __ListData is __ListData
  jc func$_growList$ConstructorTypetocodeLIstdataLenListNewsizeAsLIstdata$TypeMatch ; skip next block if the type matches
    ; Error handling block for _constructor(__typeToCode __ListData, len(list), newSize) as __ListData
    int 3                                                        ; call debugger
    ;  - print(asOperatorFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset asOperatorFailureMessage                     ; reading asOperatorFailureMessage for push
    push r13                                                     ; value of argument #1 (asOperatorFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 078h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 078h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 078h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 078h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_growList$ConstructorTypetocodeLIstdataLenListNewsizeAsLIstdata$TypeMatch:  ; after block
  mov r10, qword ptr [rsp + 080h]                                ; copy value of _constructor return value for cast to __ListData
  mov qword ptr [rsp + 068h], rbx                                ; move newSize variable's type out of rbx
  mov rbx, qword ptr [rsp + 078h]                                ; copy type of _constructor return value for cast to __ListData
  cmp rbx, 000h                                                  ; compare type of cast of _constructor return value to __ListData to <sentinel>
  jne func$_growList$castOfConstructorReturnValueToLIstdata$TypeMatch ; skip next block if cast of _constructor return value to __ListData is not sentinel
    ; Error handling block for cast of _constructor return value to __ListData
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rsi, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push rsi                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 070h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 070h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 090h], r10                              ; move cast of _constructor return value to __ListData's value out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rdi, qword ptr [rsp + 070h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 070h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 050h]                              ; restoring slots to previous scope state
  func$_growList$castOfConstructorReturnValueToLIstdata$TypeMatch:  ; after block
  mov r12, r10                                                   ; value initialization of variable declaration for newData variable (cast of _constructor return value to __ListData)
  mov r13, rbx                                                   ; type initialization of variable declaration for newData variable
  ; increment reference count for newData variable if necessary
  mov r14, r13                                                   ; store newData variable's type in testByte value slot
  mov rax, r14                                                   ; move testByte to testByte
  mov r15, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r15                                                        ; adjust to the relative start of that type's entry in the type table
  mov r10, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r10                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$_growList$AfterGCIncref                               ; if not a GarbageCollectable, skip incref
    inc qword ptr [r12]                                          ; increment reference count of newData variable
  func$_growList$AfterGCIncref:                                  ; after GarbageCollectable incref
  ; Line 278: __ListData oldData = __readFromAddress(list __as__ Integer + _gc...
  mov rbx, qword ptr [rbp + 040h]                                ; force cast of list to Integer
  mov rsi, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov rdi, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp rdi, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$_growList$Gcblockdata$TypeMatch                       ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 060h], r13                              ; move newData variable's type out of r13
    mov r13, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 068h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 068h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rax, qword ptr [rsp + 068h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 068h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r13, qword ptr [rsp + 060h]                              ; restoring slots to previous scope state
  func$_growList$Gcblockdata$TypeMatch:                          ; after block
  mov r15, rbx                                                   ; assign value of force cast of list to Integer to value of + operator result
  add r15, rsi                                                   ; compute (force cast of list to Integer) + (copy of _gcBlockData) (result in + operator result)
  mov r14, r15                                                   ; assign value of + operator result to value of + operator result
  add r14, 010h                                                  ; compute (+ operator result) + (16 /* 0x10 */) (result in + operator result)
  mov qword ptr [rsp + 060h], r12                                ; move newData variable's value out of r12
  mov r12, r14                                                   ; assign value of + operator result to value of + operator result
  add r12, 008h                                                  ; compute (+ operator result) + (8) (result in + operator result)
  ; Call __readFromAddress with 1 arguments
  mov r15, qword ptr [r12]                                       ; dereference first argument of __readFromAddress
  mov r10, r15                                                   ; force cast of dereferenced + operator result to __ListData
  mov r12, r10                                                   ; value initialization of variable declaration for oldData variable (force cast of dereferenced + operator result to __ListData)
  mov qword ptr [rsp + 058h], r13                                ; move newData variable's type out of r13
  mov r13, 021h                                                  ; type initialization of variable declaration for oldData variable (__ListData'33)
  ; increment reference count for oldData variable if necessary
  mov r14, r13                                                   ; store oldData variable's type in testByte value slot
  mov rax, r14                                                   ; move testByte to testByte
  mov r15, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r15                                                        ; adjust to the relative start of that type's entry in the type table
  mov r10, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r10                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$_growList$AfterGCIncref$1                             ; if not a GarbageCollectable, skip incref
    inc qword ptr [r12]                                          ; increment reference count of oldData variable
  func$_growList$AfterGCIncref$1:                                ; after GarbageCollectable incref
  ; Line 279: _moveBytes(oldData __as__ Integer + _gcBlockData, newData __as__...
  mov rbx, r12                                                   ; make a copy of oldData's value in case it changes before we use it
  mov rsi, r13                                                   ; make a copy of oldData's type in case it changes before we use it
  ; increment reference count for copy of oldData if necessary
  mov rdi, rsi                                                   ; store copy of oldData's type in testByte value slot
  mov rax, rdi                                                   ; move testByte to testByte
  mov r9, 002h                                                   ; read operand of mul (type table width in bytes) 
  mul r9                                                         ; adjust to the relative start of that type's entry in the type table
  mov r8, offset typeTable                                       ; read second operand of + (type table pointer)
  add rax, r8                                                    ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$_growList$AfterGCIncref$2                             ; if not a GarbageCollectable, skip incref
    inc qword ptr [rbx]                                          ; increment reference count of copy of oldData
  func$_growList$AfterGCIncref$2:                                ; after GarbageCollectable incref
  mov rdx, rbx                                                   ; force cast of copy of oldData to Integer
  mov rcx, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov qword ptr [rsp + 050h], r12                                ; move oldData variable's value out of r12
  mov r12, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp r12, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$_growList$Gcblockdata$TypeMatch$1                     ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    mov qword ptr [rsp + 050h], rbx                              ; move copy of oldData's value out of rbx
    lea rbx, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 050h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov qword ptr [rsp + 070h], rdx                              ; move force cast of copy of oldData to Integer's value out of rdx
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov qword ptr [rsp + 068h], rcx                              ; move copy of _gcBlockData's value out of rcx
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 048h], rsi                              ; move copy of oldData's type out of rsi
    lea rsi, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rbx, qword ptr [rsp + 040h]                              ; restoring slots to previous scope state
    mov rcx, qword ptr [rsp + 028h]                              ; restoring slots to previous scope state
    mov rdx, qword ptr [rsp + 030h]                              ; restoring slots to previous scope state
    mov rsi, qword ptr [rsp + 038h]                              ; restoring slots to previous scope state
  func$_growList$Gcblockdata$TypeMatch$1:                        ; after block
  mov rdi, rdx                                                   ; assign value of force cast of copy of oldData to Integer to value of + operator result
  add rdi, rcx                                                   ; compute (force cast of copy of oldData to Integer) + (copy of _gcBlockData) (result in + operator result)
  mov rax, qword ptr [rsp + 060h]                                ; make a copy of newData's value in case it changes before we use it
  mov r12, qword ptr [rsp + 058h]                                ; make a copy of newData's type in case it changes before we use it
  ; increment reference count for copy of newData if necessary
  mov qword ptr [rsp + 048h], r13                                ; move oldData variable's type out of r13
  mov r13, r12                                                   ; store copy of newData's type in testByte value slot
  mov qword ptr [rsp + 040h], rax                                ; move copy of newData's value out of rax
  mov rax, r13                                                   ; move testByte to testByte
  mov r14, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r14                                                        ; adjust to the relative start of that type's entry in the type table
  mov r15, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r15                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$_growList$AfterGCIncref$3                             ; if not a GarbageCollectable, skip incref
    mov r10, qword ptr [rsp + 040h]                              ; read slot into register for dereferencing
    inc qword ptr [r10]                                          ; increment reference count of copy of newData
    mov qword ptr [rsp + 040h], r10                              ; restoring slots to previous scope state
  func$_growList$AfterGCIncref$3:                                ; after GarbageCollectable incref
  mov qword ptr [rsp + 038h], rbx                                ; move copy of oldData's value out of rbx
  mov rbx, qword ptr [rsp + 040h]                                ; force cast of copy of newData to Integer
  mov qword ptr [rsp + 030h], rsi                                ; move copy of oldData's type out of rsi
  mov rsi, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov r9, qword ptr _gcBlockDataType                             ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp r9, 000h                                                   ; compare type of copy of _gcBlockData to <sentinel>
  jne func$_growList$Gcblockdata$TypeMatch$2                     ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 028h], r12                              ; move copy of newData's type out of r12
    mov r12, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r12                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r13, qword ptr [rsp + 030h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 030h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov qword ptr [rsp + 050h], r9                               ; move copy of _gcBlockData's type out of r9
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rax, qword ptr [rsp + 030h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 030h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r12, qword ptr [rsp + 028h]                              ; restoring slots to previous scope state
    mov r9, qword ptr [rsp + 010h]                               ; restoring slots to previous scope state
  func$_growList$Gcblockdata$TypeMatch$2:                        ; after block
  mov r14, rbx                                                   ; assign value of force cast of copy of newData to Integer to value of + operator result
  add r14, rsi                                                   ; compute (force cast of copy of newData to Integer) + (copy of _gcBlockData) (result in + operator result)
  ; Call len with 1 arguments
  push qword ptr [rbp + 040h]                                    ; value of argument #1 (list)
  push qword ptr [rbp + 038h]                                    ; type of argument #1
  lea rsi, qword ptr [rsp + 038h]                                ; load address of return value's value
  push rsi                                                       ; internal argument 6: pointer to return value slot's value
  lea rsi, qword ptr [rsp + 038h]                                ; load address of return value's type
  push rsi                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call func$len                                                  ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  cmp qword ptr [rsp + 020h], 000h                               ; compare type of len return value to <sentinel>
  jne func$_growList$lenList$TypeMatch$1                         ; skip next block if len return value is not sentinel
    ; Error handling block for len(list)
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 018h], rdi                              ; move + operator result's value out of rdi
    mov rdi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    mov qword ptr [rsp + 018h], r12                              ; move copy of newData's type out of r12
    lea r12, qword ptr [rsp + 020h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 020h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r12, qword ptr [rsp + 008h]                              ; restoring slots to previous scope state
    mov rdi, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
  func$_growList$lenList$TypeMatch$1:                            ; after block
  mov rbx, qword ptr [rsp + 028h]                                ; read left hand side operand of imul (len return value)
  imul r10, rbx, 010h                                            ; compute (len return value) * (16 /* 0x10 */) (result in * operator result)
  ; Call _moveBytes with 3 arguments
  push r10                                                       ; value of argument #3 (* operator result)
  push 01fh                                                      ; type of argument #3 (Integer'31)
  push r14                                                       ; value of argument #2 (+ operator result)
  push 01fh                                                      ; type of argument #2 (Integer'31)
  push rdi                                                       ; value of argument #1 (+ operator result)
  push 01fh                                                      ; type of argument #1 (Integer'31)
  lea r13, qword ptr [rsp + 058h]                                ; load address of return value's value
  push r13                                                       ; internal argument 6: pointer to return value slot's value
  lea r13, qword ptr [rsp + 058h]                                ; load address of return value's type
  push r13                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 003h                                                  ; internal argument 1: number of actual arguments
  call func$_moveBytes                                           ; jump to subroutine
  add rsp, 060h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 280: __writeToAddress(list __as__ Integer + _gcBlockData + 8, newSize...
  mov rax, qword ptr [rbp + 040h]                                ; force cast of list to Integer
  mov r14, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov r15, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp r15, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$_growList$Gcblockdata$TypeMatch$3                     ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    mov qword ptr [rsp + 030h], r12                              ; move copy of newData's type out of r12
    lea r12, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 030h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 050h], rax                              ; move force cast of list to Integer's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 030h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 010h]                              ; restoring slots to previous scope state
    mov r12, qword ptr [rsp + 020h]                              ; restoring slots to previous scope state
  func$_growList$Gcblockdata$TypeMatch$3:                        ; after block
  mov qword ptr [rsp + 028h], rax                                ; move force cast of list to Integer's value out of rax
  mov rax, qword ptr [rsp + 028h]                                ; assign value of force cast of list to Integer to value of + operator result
  add rax, r14                                                   ; compute (force cast of list to Integer) + (copy of _gcBlockData) (result in + operator result)
  mov qword ptr [rsp + 028h], r12                                ; move copy of newData's type out of r12
  mov r12, rax                                                   ; assign value of + operator result to value of + operator result
  add r12, 008h                                                  ; compute (+ operator result) + (8) (result in + operator result)
  mov r13, qword ptr [rsp + 070h]                                ; make a copy of newSize's value in case it changes before we use it
  mov rax, qword ptr [rsp + 068h]                                ; make a copy of newSize's type in case it changes before we use it
  ; Call __writeToAddress with 2 arguments
  mov qword ptr [r12], r13                                       ; __writeToAddress
  ; Line 281: __writeToAddress(list __as__ Integer + _gcBlockData + 16 /* 0x10...
  mov rbx, qword ptr [rbp + 040h]                                ; force cast of list to Integer
  mov rsi, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov rdi, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp rdi, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$_growList$Gcblockdata$TypeMatch$4                     ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r14, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r14                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r15, qword ptr [rsp + 080h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 080h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 080h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 080h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_growList$Gcblockdata$TypeMatch$4:                        ; after block
  mov qword ptr [rsp + 070h], rbx                                ; move force cast of list to Integer's value out of rbx
  mov rbx, qword ptr [rsp + 070h]                                ; assign value of force cast of list to Integer to value of + operator result
  add rbx, rsi                                                   ; compute (force cast of list to Integer) + (copy of _gcBlockData) (result in + operator result)
  mov r15, rbx                                                   ; assign value of + operator result to value of + operator result
  add r15, 010h                                                  ; compute (+ operator result) + (16 /* 0x10 */) (result in + operator result)
  mov rax, r15                                                   ; assign value of + operator result to value of + operator result
  add rax, 008h                                                  ; compute (+ operator result) + (8) (result in + operator result)
  mov r14, qword ptr [rsp + 060h]                                ; make a copy of newData's value in case it changes before we use it
  mov r15, qword ptr [rsp + 058h]                                ; make a copy of newData's type in case it changes before we use it
  ; increment reference count for copy of newData if necessary
  mov r10, r15                                                   ; store copy of newData's type in testByte value slot
  mov qword ptr [rsp + 070h], rax                                ; move + operator result's value out of rax
  mov rax, r10                                                   ; move testByte to testByte
  mov rbx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rbx                                                        ; adjust to the relative start of that type's entry in the type table
  mov rsi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rsi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$_growList$AfterGCIncref$4                             ; if not a GarbageCollectable, skip incref
    inc qword ptr [r14]                                          ; increment reference count of copy of newData
  func$_growList$AfterGCIncref$4:                                ; after GarbageCollectable incref
  mov rdi, r14                                                   ; force cast of copy of newData to Integer
  ; Call __writeToAddress with 2 arguments
  mov qword ptr [rsp + 068h], r15                                ; move copy of newData's type out of r15
  mov r15, qword ptr [rsp + 070h]                                ; get + operator result into register to dereference it
  mov qword ptr [r15], rdi                                       ; __writeToAddress
  ; Line 282: _gcLocked -= 1;
  mov r10, qword ptr _gcLockedValue                              ; make a copy of _gcLocked's value in case it changes before we use it
  mov rax, qword ptr _gcLockedType                               ; make a copy of _gcLocked's type in case it changes before we use it
  cmp rax, 000h                                                  ; compare type of copy of _gcLocked to <sentinel>
  jne func$_growList$copyOfGclocked$TypeMatch$1                  ; skip next block if copy of _gcLocked is not sentinel
    ; Error handling block for copy of _gcLocked
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rbx, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rbx                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rsi, qword ptr [rsp + 080h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 058h], r10                              ; move copy of _gcLocked's value out of r10
    mov qword ptr [rsp + 050h], rax                              ; move copy of _gcLocked's type out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rdi, qword ptr [rsp + 080h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 010h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
  func$_growList$copyOfGclocked$TypeMatch$1:                     ; after block
  mov r15, r10                                                   ; assign value of copy of _gcLocked to value of -= operator result
  sub r15, 001h                                                  ; -= operator
  mov qword ptr _gcLockedValue, r15                              ; store value
  mov qword ptr _gcLockedType, 01fh                              ; store type (Integer'31)
  ; Implicit return from _growList
  mov r13, qword ptr [rbp + 030h]                                ; get pointer to return value of _growList into register to dereference it
  mov qword ptr [r13], 000h                                      ; _growList return value
  mov qword ptr [rsp + 070h], r14                                ; move copy of newData's value out of r14
  mov r14, qword ptr [rbp + 028h]                                ; get pointer to return value type of _growList into register to dereference it
  mov qword ptr [r14], 01dh                                      ; type of _growList return value (Null'29)
  ; Decrement reference count for oldData variable (static type: __ListData'33) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 068h]                                ; arg #2: oldData variable's type
  mov rcx, qword ptr [rsp + 070h]                                ; arg #1: oldData variable's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for newData variable (static type: __ListData'33) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 078h]                                ; arg #2: newData variable's type
  mov rcx, qword ptr [rsp + 080h]                                ; arg #1: newData variable's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of oldData (static type: __ListData'33) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 050h]                                ; arg #2: copy of oldData's type
  mov rcx, qword ptr [rsp + 058h]                                ; arg #1: copy of oldData's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for _constructor return value (static type: GarbageCollectable'36) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 098h]                                ; arg #2: _constructor return value's type
  mov rcx, qword ptr [rsp + 0a0h]                                ; arg #1: _constructor return value's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of newData (static type: __ListData'33) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 088h]                                ; arg #2: copy of newData's type
  mov rcx, qword ptr [rsp + 090h]                                ; arg #1: copy of newData's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of newData (static type: __ListData'33) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 048h]                                ; arg #2: copy of newData's type
  mov rcx, qword ptr [rsp + 060h]                                ; arg #1: copy of newData's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 090h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; append
dq func$append$annotation
func$append:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 050h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 090h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 002h                                                  ; compare parameter count of append to 2 (integer)
  je func$append$parameterCountCheck$continuation                ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 050h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 050h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 050h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 050h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$append$parameterCountCheck$continuation:                  ; end of parameter count check
  ; Check type of parameter 0, list (expecting WhateverList)
  mov rsi, qword ptr [rbp + 038h]                                ; store list's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  add rax, 001h                                                  ; adjust to the byte containing the bit to check against (result in testByte)
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 003h                                       ; check that list is WhateverList
  jc func$append$list$TypeMatch                                  ; skip next block if the type matches
    ; Error handling block for list
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 050h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 050h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 050h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 050h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$append$list$TypeMatch:                                    ; after block
  ; Check type of parameter 1, element (expecting Anything)
  mov r10, qword ptr [rbp + 048h]                                ; store element's type in testByte value slot
  mov rax, r10                                                   ; move testByte to testByte
  mov rbx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rbx                                                        ; adjust to the relative start of that type's entry in the type table
  mov rsi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rsi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 006h                                       ; check that element is Anything
  jc func$append$element$TypeMatch                               ; skip next block if the type matches
    ; Error handling block for element
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 050h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 050h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 050h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 050h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$append$element$TypeMatch:                                 ; after block
  ; Line 286: _gcLocked += 1;
  mov r14, qword ptr _gcLockedValue                              ; make a copy of _gcLocked's value in case it changes before we use it
  mov r15, qword ptr _gcLockedType                               ; make a copy of _gcLocked's type in case it changes before we use it
  cmp r15, 000h                                                  ; compare type of copy of _gcLocked to <sentinel>
  jne func$append$copyOfGclocked$TypeMatch                       ; skip next block if copy of _gcLocked is not sentinel
    ; Error handling block for copy of _gcLocked
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 050h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 050h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 050h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 050h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$append$copyOfGclocked$TypeMatch:                          ; after block
  mov r13, r14                                                   ; assign value of copy of _gcLocked to value of += operator result
  add r13, 001h                                                  ; += operator
  mov qword ptr _gcLockedValue, r13                              ; store value
  mov qword ptr _gcLockedType, 01fh                              ; store type (Integer'31)
  ; Line 287: Integer intermediaryAddress = list __as__ Integer;
  mov rax, qword ptr [rbp + 040h]                                ; force cast of list to Integer
  mov r12, rax                                                   ; value initialization of variable declaration for intermediaryAddress variable (force cast of list to Integer)
  mov r13, 01fh                                                  ; type initialization of variable declaration for intermediaryAddress variable (Integer'31)
  ; Line 288: Integer size = __readFromAddress(intermediaryAddress + _gcBlockD...
  mov r14, r12                                                   ; make a copy of intermediaryAddress's value in case it changes before we use it
  mov r15, r13                                                   ; make a copy of intermediaryAddress's type in case it changes before we use it
  mov r10, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov rax, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp r15, 000h                                                  ; compare type of copy of intermediaryAddress to <sentinel>
  jne func$append$intermediaryaddress$TypeMatch                  ; skip next block if copy of intermediaryAddress is not sentinel
    ; Error handling block for intermediaryAddress
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rbx, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rbx                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rsi, qword ptr [rsp + 050h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 050h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 070h], r10                              ; move copy of _gcBlockData's value out of r10
    mov qword ptr [rsp + 068h], rax                              ; move copy of _gcBlockData's type out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rdi, qword ptr [rsp + 050h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 050h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 028h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 030h]                              ; restoring slots to previous scope state
  func$append$intermediaryaddress$TypeMatch:                     ; after block
  cmp rax, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$append$Gcblockdata$TypeMatch                          ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 040h], r12                              ; move intermediaryAddress variable's value out of r12
    mov r12, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r12                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    mov qword ptr [rsp + 040h], r13                              ; move intermediaryAddress variable's type out of r13
    lea r13, qword ptr [rsp + 048h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 040h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 060h], r10                              ; move copy of _gcBlockData's value out of r10
    mov qword ptr [rsp + 058h], rax                              ; move copy of _gcBlockData's type out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 038h], r14                              ; move copy of intermediaryAddress's value out of r14
    lea r14, qword ptr [rsp + 048h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 020h]                              ; restoring slots to previous scope state
    mov r12, qword ptr [rsp + 040h]                              ; restoring slots to previous scope state
    mov r13, qword ptr [rsp + 030h]                              ; restoring slots to previous scope state
    mov r14, qword ptr [rsp + 028h]                              ; restoring slots to previous scope state
  func$append$Gcblockdata$TypeMatch:                             ; after block
  mov qword ptr [rsp + 040h], r15                                ; move copy of intermediaryAddress's type out of r15
  mov r15, r14                                                   ; assign value of copy of intermediaryAddress to value of + operator result
  add r15, r10                                                   ; compute (copy of intermediaryAddress) + (copy of _gcBlockData) (result in + operator result)
  mov qword ptr [rsp + 040h], r13                                ; move intermediaryAddress variable's type out of r13
  mov r13, r15                                                   ; compute (+ operator result) + (0)
  mov rdi, r13                                                   ; assign value of + operator result to value of + operator result
  add rdi, 008h                                                  ; compute (+ operator result) + (8) (result in + operator result)
  ; Call __readFromAddress with 1 arguments
  mov r15, qword ptr [rdi]                                       ; dereference first argument of __readFromAddress
  mov rsi, r15                                                   ; value initialization of variable declaration for size variable (dereferenced + operator result)
  mov rdi, 01fh                                                  ; type initialization of variable declaration for size variable (Integer'31)
  ; Line 289: Integer dataAddress = __readFromAddress(intermediaryAddress + _g...
  mov qword ptr [rsp + 038h], r12                                ; move intermediaryAddress variable's value out of r12
  mov r12, qword ptr [rsp + 038h]                                ; make a copy of intermediaryAddress's value in case it changes before we use it
  mov r13, qword ptr [rsp + 040h]                                ; make a copy of intermediaryAddress's type in case it changes before we use it
  mov r14, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov r15, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp r13, 000h                                                  ; compare type of copy of intermediaryAddress to <sentinel>
  jne func$append$intermediaryaddress$TypeMatch$1                ; skip next block if copy of intermediaryAddress is not sentinel
    ; Error handling block for intermediaryAddress
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 040h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 040h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$append$intermediaryaddress$TypeMatch$1:                   ; after block
  cmp r15, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$append$Gcblockdata$TypeMatch$1                        ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 030h], rsi                              ; move size variable's value out of rsi
    mov rsi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rsi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    mov qword ptr [rsp + 030h], rdi                              ; move size variable's type out of rdi
    lea rdi, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 030h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 028h], r12                              ; move copy of intermediaryAddress's value out of r12
    lea r12, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rsi, qword ptr [rsp + 030h]                              ; restoring slots to previous scope state
    mov r12, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
    mov rdi, qword ptr [rsp + 020h]                              ; restoring slots to previous scope state
  func$append$Gcblockdata$TypeMatch$1:                           ; after block
  mov qword ptr [rsp + 030h], r13                                ; move copy of intermediaryAddress's type out of r13
  mov r13, r12                                                   ; assign value of copy of intermediaryAddress to value of + operator result
  add r13, r14                                                   ; compute (copy of intermediaryAddress) + (copy of _gcBlockData) (result in + operator result)
  mov qword ptr [rsp + 030h], rdi                                ; move size variable's type out of rdi
  mov rdi, r13                                                   ; assign value of + operator result to value of + operator result
  add rdi, 010h                                                  ; compute (+ operator result) + (16 /* 0x10 */) (result in + operator result)
  mov rbx, rdi                                                   ; assign value of + operator result to value of + operator result
  add rbx, 008h                                                  ; compute (+ operator result) + (8) (result in + operator result)
  ; Call __readFromAddress with 1 arguments
  mov r13, qword ptr [rbx]                                       ; dereference first argument of __readFromAddress
  mov rax, r13                                                   ; value initialization of variable declaration for dataAddress variable (dereferenced + operator result)
  mov rbx, 01fh                                                  ; type initialization of variable declaration for dataAddress variable (Integer'31)
  ; Line 290: Integer length = len(list);
  ; Call len with 1 arguments
  push qword ptr [rbp + 040h]                                    ; value of argument #1 (list)
  push qword ptr [rbp + 038h]                                    ; type of argument #1
  lea r13, qword ptr [rsp + 038h]                                ; load address of return value's value
  push r13                                                       ; internal argument 6: pointer to return value slot's value
  lea r13, qword ptr [rsp + 038h]                                ; load address of return value's type
  push r13                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  mov qword ptr [rsp + 058h], rax                                ; move dataAddress variable's value out of rax
  call func$len                                                  ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  cmp qword ptr [rsp + 020h], 000h                               ; compare type of len return value to <sentinel>
  jne func$append$lenReturnValue$TypeMatch                       ; skip next block if len return value is not sentinel
    ; Error handling block for len return value
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r14, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push r14                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r15, qword ptr [rsp + 020h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 020h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$append$lenReturnValue$TypeMatch:                          ; after block
  mov rax, qword ptr [rsp + 028h]                                ; value initialization of variable declaration for length variable (len return value)
  mov qword ptr [rsp + 010h], rbx                                ; move dataAddress variable's type out of rbx
  mov rbx, qword ptr [rsp + 020h]                                ; type initialization of variable declaration for length variable
  ; Line 291: if (length == size) { ...
  mov qword ptr [rsp + 028h], rsi                                ; move size variable's value out of rsi
  mov rsi, rax                                                   ; make a copy of length's value in case it changes before we use it
  mov rdi, rbx                                                   ; make a copy of length's type in case it changes before we use it
  mov r12, qword ptr [rsp + 028h]                                ; make a copy of size's value in case it changes before we use it
  mov r13, qword ptr [rsp + 030h]                                ; make a copy of size's type in case it changes before we use it
  xor r14, r14                                                   ; zero value result of == (testing copy of length and copy of size) to put the boolean in
  cmp rsi, r12                                                   ; values equal?
  sete r14b                                                      ; put result in value result of == (testing copy of length and copy of size)
  mov r15, 01eh                                                  ; value result of == (testing copy of length and copy of size) is a Boolean'30
  xor r10, r10                                                   ; zero type result of == (testing copy of length and copy of size) to put the boolean in
  cmp rdi, r13                                                   ; types equal?
  sete r10b                                                      ; put result in type result of == (testing copy of length and copy of size)
  mov r9, 01eh                                                   ; type result of == (testing copy of length and copy of size) is a Boolean'30
  mov r8, r14                                                    ; assign value of value result of == (testing copy of length and copy of size) to value of == operator result
  and r8, r10                                                    ; && type temp and value temp
  cmp r8, 000h                                                   ; compare == operator result to false
  je func$append$if$continuation                                 ; length == size
    ; Line 292: _growList(list);
    ; Call _growList with 1 arguments
    push qword ptr [rbp + 040h]                                  ; value of argument #1 (list)
    push qword ptr [rbp + 038h]                                  ; type of argument #1
    mov qword ptr [rsp + 038h], rbx                              ; move length variable's type out of rbx
    lea rbx, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 048h], rax                              ; move length variable's value out of rax
    call func$_growList                                          ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ; Line 293: dataAddress = __readFromAddress(intermediaryAddress + _gcBlockDa...
    mov rsi, qword ptr [rsp + 038h]                              ; make a copy of intermediaryAddress's value in case it changes before we use it
    mov rdi, qword ptr [rsp + 040h]                              ; make a copy of intermediaryAddress's type in case it changes before we use it
    mov r12, qword ptr _gcBlockDataValue                         ; make a copy of _gcBlockData's value in case it changes before we use it
    mov r13, qword ptr _gcBlockDataType                          ; make a copy of _gcBlockData's type in case it changes before we use it
    cmp rdi, 000h                                                ; compare type of copy of intermediaryAddress to <sentinel>
    jne func$append$append$if$intermediaryaddress$TypeMatch      ; skip next block if copy of intermediaryAddress is not sentinel
      ; Error handling block for intermediaryAddress
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r14, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push r14                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r15, qword ptr [rsp + 040h]                            ; load address of return value's value
      push r15                                                   ; internal argument 6: pointer to return value slot's value
      lea r15, qword ptr [rsp + 038h]                            ; load address of return value's type
      push r15                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r10, qword ptr [rsp + 040h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 038h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
    func$append$append$if$intermediaryaddress$TypeMatch:         ; after block
    cmp r13, 000h                                                ; compare type of copy of _gcBlockData to <sentinel>
    jne func$append$append$if$Gcblockdata$TypeMatch              ; skip next block if copy of _gcBlockData is not sentinel
      ; Error handling block for _gcBlockData
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rax, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rax                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rbx, qword ptr [rsp + 040h]                            ; load address of return value's value
      push rbx                                                   ; internal argument 6: pointer to return value slot's value
      lea rbx, qword ptr [rsp + 038h]                            ; load address of return value's type
      push rbx                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      mov qword ptr [rsp + 030h], rsi                            ; move copy of intermediaryAddress's value out of rsi
      lea rsi, qword ptr [rsp + 040h]                            ; load address of return value's value
      push rsi                                                   ; internal argument 6: pointer to return value slot's value
      lea rsi, qword ptr [rsp + 018h]                            ; load address of return value's type
      push rsi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rsi, qword ptr [rsp + 020h]                            ; restoring slots to previous scope state
    func$append$append$if$Gcblockdata$TypeMatch:                 ; after block
    mov qword ptr [rsp + 030h], rdi                              ; move copy of intermediaryAddress's type out of rdi
    mov rdi, rsi                                                 ; assign value of copy of intermediaryAddress to value of + operator result
    add rdi, r12                                                 ; compute (copy of intermediaryAddress) + (copy of _gcBlockData) (result in + operator result)
    mov rbx, rdi                                                 ; assign value of + operator result to value of + operator result
    add rbx, 010h                                                ; compute (+ operator result) + (16 /* 0x10 */) (result in + operator result)
    mov r10, rbx                                                 ; assign value of + operator result to value of + operator result
    add r10, 008h                                                ; compute (+ operator result) + (8) (result in + operator result)
    ; Call __readFromAddress with 1 arguments
    mov rdi, qword ptr [r10]                                     ; dereference first argument of __readFromAddress
    mov qword ptr [rsp + 018h], rdi                              ; store value
    mov qword ptr [rsp + 010h], 01fh                             ; store type (Integer'31)
    mov rax, qword ptr [rsp + 008h]                              ; restoring slots to previous scope state
    mov rbx, qword ptr [rsp + 028h]                              ; restoring slots to previous scope state
  func$append$if$continuation:                                   ; end of if
  ; Line 295: __writeToAddress(dataAddress + _gcBlockData + length * 16 /* 0x1...
  mov r15, qword ptr [rsp + 018h]                                ; make a copy of dataAddress's value in case it changes before we use it
  mov r10, qword ptr [rsp + 010h]                                ; make a copy of dataAddress's type in case it changes before we use it
  mov qword ptr [rsp + 040h], rax                                ; move length variable's value out of rax
  mov rax, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov qword ptr [rsp + 038h], rbx                                ; move length variable's type out of rbx
  mov rbx, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp r10, 000h                                                  ; compare type of copy of dataAddress to <sentinel>
  jne func$append$dataaddress$TypeMatch                          ; skip next block if copy of dataAddress is not sentinel
    ; Error handling block for dataAddress
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rsi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rsi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rdi, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 040h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 060h], r10                              ; move copy of dataAddress's type out of r10
    mov qword ptr [rsp + 048h], rax                              ; move copy of _gcBlockData's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r12, qword ptr [rsp + 040h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 040h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 008h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 020h]                              ; restoring slots to previous scope state
  func$append$dataaddress$TypeMatch:                             ; after block
  cmp rbx, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$append$Gcblockdata$TypeMatch$2                        ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 040h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 040h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 060h], r10                              ; move copy of dataAddress's type out of r10
    mov qword ptr [rsp + 048h], rax                              ; move copy of _gcBlockData's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 038h], r15                              ; move copy of dataAddress's value out of r15
    lea r15, qword ptr [rsp + 040h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 008h]                              ; restoring slots to previous scope state
    mov r15, qword ptr [rsp + 028h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 020h]                              ; restoring slots to previous scope state
  func$append$Gcblockdata$TypeMatch$2:                           ; after block
  mov qword ptr [rsp + 030h], r10                                ; move copy of dataAddress's type out of r10
  mov r10, r15                                                   ; assign value of copy of dataAddress to value of + operator result
  add r10, rax                                                   ; compute (copy of dataAddress) + (copy of _gcBlockData) (result in + operator result)
  mov rax, qword ptr [rsp + 040h]                                ; make a copy of length's value in case it changes before we use it
  mov rbx, qword ptr [rsp + 038h]                                ; make a copy of length's type in case it changes before we use it
  cmp rbx, 000h                                                  ; compare type of copy of length to <sentinel>
  jne func$append$length$TypeMatch                               ; skip next block if copy of length is not sentinel
    ; Error handling block for length
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rsi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rsi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rdi, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 040h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 060h], r10                              ; move + operator result's value out of r10
    mov qword ptr [rsp + 048h], rax                              ; move copy of length's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r12, qword ptr [rsp + 040h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 040h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 008h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 020h]                              ; restoring slots to previous scope state
  func$append$length$TypeMatch:                                  ; after block
  mov qword ptr [rsp + 030h], r10                                ; move + operator result's value out of r10
  imul r10, rax, 010h                                            ; compute (copy of length) * (16 /* 0x10 */) (result in * operator result)
  mov r14, qword ptr [rsp + 030h]                                ; assign value of + operator result to value of + operator result
  add r14, r10                                                   ; compute (+ operator result) + (* operator result) (result in + operator result)
  mov r15, qword ptr [rbp + 048h]                                ; store element's type in __typeOf unary operator result value slot
  ; Call __writeToAddress with 2 arguments
  mov qword ptr [r14], r15                                       ; __writeToAddress
  ; Line 296: __writeToAddress(dataAddress + _gcBlockData + length * 16 /* 0x1...
  mov rsi, qword ptr [rsp + 018h]                                ; make a copy of dataAddress's value in case it changes before we use it
  mov rdi, qword ptr [rsp + 010h]                                ; make a copy of dataAddress's type in case it changes before we use it
  mov r12, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov r13, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp rdi, 000h                                                  ; compare type of copy of dataAddress to <sentinel>
  jne func$append$dataaddress$TypeMatch$1                        ; skip next block if copy of dataAddress is not sentinel
    ; Error handling block for dataAddress
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r14, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r14                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r15, qword ptr [rsp + 040h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 040h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 040h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 040h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$append$dataaddress$TypeMatch$1:                           ; after block
  cmp r13, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$append$Gcblockdata$TypeMatch$3                        ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rax, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rax                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rbx, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 040h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 038h], rsi                              ; move copy of dataAddress's value out of rsi
    lea rsi, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rsi, qword ptr [rsp + 028h]                              ; restoring slots to previous scope state
  func$append$Gcblockdata$TypeMatch$3:                           ; after block
  mov qword ptr [rsp + 030h], rdi                                ; move copy of dataAddress's type out of rdi
  mov rdi, rsi                                                   ; assign value of copy of dataAddress to value of + operator result
  add rdi, r12                                                   ; compute (copy of dataAddress) + (copy of _gcBlockData) (result in + operator result)
  mov r12, qword ptr [rsp + 040h]                                ; make a copy of length's value in case it changes before we use it
  mov r13, qword ptr [rsp + 038h]                                ; make a copy of length's type in case it changes before we use it
  cmp r13, 000h                                                  ; compare type of copy of length to <sentinel>
  jne func$append$length$TypeMatch$1                             ; skip next block if copy of length is not sentinel
    ; Error handling block for length
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r14, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r14                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r15, qword ptr [rsp + 040h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 040h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 040h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 040h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$append$length$TypeMatch$1:                                ; after block
  mov qword ptr [rsp + 030h], rdi                                ; move + operator result's value out of rdi
  imul rdi, r12, 010h                                            ; compute (copy of length) * (16 /* 0x10 */) (result in * operator result)
  mov rbx, qword ptr [rsp + 030h]                                ; assign value of + operator result to value of + operator result
  add rbx, rdi                                                   ; compute (+ operator result) + (* operator result) (result in + operator result)
  mov r10, rbx                                                   ; assign value of + operator result to value of + operator result
  add r10, 008h                                                  ; compute (+ operator result) + (8) (result in + operator result)
  mov rax, qword ptr [rbp + 050h]                                ; force cast of element to Integer
  ; Call __writeToAddress with 2 arguments
  mov qword ptr [r10], rax                                       ; __writeToAddress
  ; Line 297: __writeToAddress(dataAddress + _gcBlockHeaderLength, length + 1)...
  mov r12, qword ptr [rsp + 018h]                                ; make a copy of dataAddress's value in case it changes before we use it
  mov r13, qword ptr [rsp + 010h]                                ; make a copy of dataAddress's type in case it changes before we use it
  mov r14, qword ptr _gcBlockHeaderLengthValue                   ; make a copy of _gcBlockHeaderLength's value in case it changes before we use it
  mov r15, qword ptr _gcBlockHeaderLengthType                    ; make a copy of _gcBlockHeaderLength's type in case it changes before we use it
  cmp r13, 000h                                                  ; compare type of copy of dataAddress to <sentinel>
  jne func$append$dataaddress$TypeMatch$2                        ; skip next block if copy of dataAddress is not sentinel
    ; Error handling block for dataAddress
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 040h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 040h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$append$dataaddress$TypeMatch$2:                           ; after block
  cmp r15, 000h                                                  ; compare type of copy of _gcBlockHeaderLength to <sentinel>
  jne func$append$Gcblockheaderlength$TypeMatch                  ; skip next block if copy of _gcBlockHeaderLength is not sentinel
    ; Error handling block for _gcBlockHeaderLength
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rsi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rsi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rdi, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 040h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 038h], r12                              ; move copy of dataAddress's value out of r12
    lea r12, qword ptr [rsp + 040h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r12, qword ptr [rsp + 028h]                              ; restoring slots to previous scope state
  func$append$Gcblockheaderlength$TypeMatch:                     ; after block
  mov qword ptr [rsp + 030h], r13                                ; move copy of dataAddress's type out of r13
  mov r13, r12                                                   ; assign value of copy of dataAddress to value of + operator result
  add r13, r14                                                   ; compute (copy of dataAddress) + (copy of _gcBlockHeaderLength) (result in + operator result)
  mov r14, qword ptr [rsp + 040h]                                ; make a copy of length's value in case it changes before we use it
  mov r15, qword ptr [rsp + 038h]                                ; make a copy of length's type in case it changes before we use it
  cmp r15, 000h                                                  ; compare type of copy of length to <sentinel>
  jne func$append$length$TypeMatch$2                             ; skip next block if copy of length is not sentinel
    ; Error handling block for length
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 050h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 050h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 050h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 050h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$append$length$TypeMatch$2:                                ; after block
  mov qword ptr [rsp + 040h], r13                                ; move + operator result's value out of r13
  mov r13, r14                                                   ; assign value of copy of length to value of + operator result
  add r13, 001h                                                  ; compute (copy of length) + (1) (result in + operator result)
  ; Call __writeToAddress with 2 arguments
  mov rax, qword ptr [rsp + 040h]                                ; get + operator result into register to dereference it
  mov qword ptr [rax], r13                                       ; __writeToAddress
  ; Line 298: __incref(element);
  ; Call __incref with 1 arguments
  ; increment reference count for element if necessary
  cmp qword ptr [rbp + 048h], 020h                               ; compare type of element to String
  jne func$append$AfterStringIncref                              ; if not a String, skip incref
    mov r12, qword ptr [rbp + 050h]                              ; get element into register to dereference it
    mov r13, qword ptr [r12]                                     ; dereference string to get to reference count
    cmp r13, 0                                                   ; compare string reference count to 0
    jns func$append$StringIncref                                 ; if reference count is negative (constant strings), skip incref
    jmp func$append$AfterStringIncref                            ; skip incref for string constants
    func$append$StringIncref:                                    ; real String
      mov r14, qword ptr [rbp + 050h]                            ; read slot into register for dereferencing
      inc qword ptr [r14]                                        ; increment reference count of element
  func$append$AfterStringIncref:                                 ; after String incref
  ; Line 299: _gcLocked -= 1;
  mov r15, qword ptr _gcLockedValue                              ; make a copy of _gcLocked's value in case it changes before we use it
  mov r10, qword ptr _gcLockedType                               ; make a copy of _gcLocked's type in case it changes before we use it
  cmp r10, 000h                                                  ; compare type of copy of _gcLocked to <sentinel>
  jne func$append$copyOfGclocked$TypeMatch$1                     ; skip next block if copy of _gcLocked is not sentinel
    ; Error handling block for copy of _gcLocked
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rax, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rax                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rbx, qword ptr [rsp + 050h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 050h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 070h], r10                              ; move copy of _gcLocked's type out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rsi, qword ptr [rsp + 050h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 050h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 030h]                              ; restoring slots to previous scope state
  func$append$copyOfGclocked$TypeMatch$1:                        ; after block
  mov r14, r15                                                   ; assign value of copy of _gcLocked to value of -= operator result
  sub r14, 001h                                                  ; -= operator
  mov qword ptr _gcLockedValue, r14                              ; store value
  mov qword ptr _gcLockedType, 01fh                              ; store type (Integer'31)
  ; Implicit return from append
  mov r12, qword ptr [rbp + 030h]                                ; get pointer to return value of append into register to dereference it
  mov qword ptr [r12], 000h                                      ; append return value
  mov r13, qword ptr [rbp + 028h]                                ; get pointer to return value type of append into register to dereference it
  mov qword ptr [r13], 01dh                                      ; type of append return value (Null'29)
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 050h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; current
dq func$current$annotation
func$current:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 040h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 080h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 001h                                                  ; compare parameter count of current to 1 (integer)
  je func$current$parameterCountCheck$continuation               ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 040h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 040h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$current$parameterCountCheck$continuation:                 ; end of parameter count check
  ; Check type of parameter 0, iterator (expecting WhateverIterator)
  mov rsi, qword ptr [rbp + 038h]                                ; store iterator's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  add rax, 001h                                                  ; adjust to the byte containing the bit to check against (result in testByte)
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 004h                                       ; check that iterator is WhateverIterator
  jc func$current$iterator$TypeMatch                             ; skip next block if the type matches
    ; Error handling block for iterator
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 040h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 040h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 040h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 040h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$current$iterator$TypeMatch:                               ; after block
  ; Line 316: WhateverList list = __readFromAddress(iterator __as__ Integer + ...
  mov r10, qword ptr [rbp + 040h]                                ; force cast of iterator to Integer
  mov rbx, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov rsi, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp rsi, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$current$Gcblockdata$TypeMatch                         ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 040h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 040h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 060h], r10                              ; move force cast of iterator to Integer's value out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 040h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 040h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 020h]                              ; restoring slots to previous scope state
  func$current$Gcblockdata$TypeMatch:                            ; after block
  mov qword ptr [rsp + 030h], r10                                ; move force cast of iterator to Integer's value out of r10
  mov r10, qword ptr [rsp + 030h]                                ; assign value of force cast of iterator to Integer to value of + operator result
  add r10, rbx                                                   ; compute (force cast of iterator to Integer) + (copy of _gcBlockData) (result in + operator result)
  mov r14, r10                                                   ; assign value of + operator result to value of + operator result
  add r14, 008h                                                  ; compute (+ operator result) + (8) (result in + operator result)
  ; Call __readFromAddress with 1 arguments
  mov rsi, qword ptr [r14]                                       ; dereference first argument of __readFromAddress
  mov rax, qword ptr [rbp + 040h]                                ; force cast of iterator to Integer
  mov rdi, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov r12, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp r12, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$current$Gcblockdata$TypeMatch$1                       ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rbx, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 040h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 060h], rax                              ; move force cast of iterator to Integer's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 038h], rsi                              ; move dereferenced + operator result's value out of rsi
    lea rsi, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 030h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 020h]                              ; restoring slots to previous scope state
    mov rsi, qword ptr [rsp + 028h]                              ; restoring slots to previous scope state
  func$current$Gcblockdata$TypeMatch$1:                          ; after block
  mov qword ptr [rsp + 030h], rax                                ; move force cast of iterator to Integer's value out of rax
  mov rax, qword ptr [rsp + 030h]                                ; assign value of force cast of iterator to Integer to value of + operator result
  add rax, rdi                                                   ; compute (force cast of iterator to Integer) + (copy of _gcBlockData) (result in + operator result)
  mov rbx, rax                                                   ; compute (+ operator result) + (0)
  ; Call __readFromAddress with 1 arguments
  mov r12, qword ptr [rbx]                                       ; dereference first argument of __readFromAddress
  mov r13, rsi                                                   ; force cast of dereferenced + operator result to the type with code dereferenced + operator result
  mov r14, r12                                                   ; store dereferenced + operator result value in force cast of dereferenced + operator result to the type with code dereferenced + operator result's type slot
  mov r15, r14                                                   ; store force cast of dereferenced + operator result to the type with code dereferenced + operator result's type in testByte value slot
  mov rax, r15                                                   ; move testByte to testByte
  mov r10, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r10                                                        ; adjust to the relative start of that type's entry in the type table
  add rax, 001h                                                  ; adjust to the byte containing the bit to check against (result in testByte)
  mov rbx, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rbx                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 003h                                       ; check that __readFromAddress(iterator __as__ Integer + _gcBlockData + 8) __dynamic_as__ __readFromAddress(iterator __as__ Integer + _gcBlockData + 0) as WhateverList is WhateverList
  jc func$current$ReadfromaddressIteratorAsINtegerGcblockdata8DynamicAsReadfromaddressIteratorAsINtegerGcblockdata0AsWHateverlist$TypeMatch ; skip next block if the type matches
    ; Error handling block for __readFromAddress(iterator __as__ Integer + _gcBlockData + 8) __dynamic_as__ __readFromAddress(iterator __as__ Integer + _gcBlockData + 0) as WhateverList
    int 3                                                        ; call debugger
    ;  - print(asOperatorFailureMessage)
    ; Call __print with 1 arguments
    mov rsi, offset asOperatorFailureMessage                     ; reading asOperatorFailureMessage for push
    push rsi                                                     ; value of argument #1 (asOperatorFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rdi, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 040h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r12, qword ptr [rsp + 040h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 040h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$current$ReadfromaddressIteratorAsINtegerGcblockdata8DynamicAsReadfromaddressIteratorAsINtegerGcblockdata0AsWHateverlist$TypeMatch:  ; after block
  mov qword ptr [rsp + 030h], r13                                ; move force cast of dereferenced + operator result to the type with code dereferenced + operator result's value out of r13
  mov r13, qword ptr [rsp + 030h]                                ; copy value of force cast of dereferenced + operator result to the type with code dereferenced + operator result for cast to WhateverList
  mov qword ptr [rsp + 028h], r14                                ; move force cast of dereferenced + operator result to the type with code dereferenced + operator result's type out of r14
  mov r14, qword ptr [rsp + 028h]                                ; copy type of force cast of dereferenced + operator result to the type with code dereferenced + operator result for cast to WhateverList
  cmp r14, 000h                                                  ; compare type of cast of force cast of dereferenced + operator result to the type with code dereferenced + operator result to WhateverList to <sentinel>
  jne func$current$castOfForceCastOfDereferencedOperatorResultToTheTypeWithCodeDereferencedOperatorResultToWHateverlist$TypeMatch ; skip next block if cast of force cast of dereferenced + operator result to the type with code dereferenced + operator result to WhateverList is not sentinel
    ; Error handling block for cast of force cast of dereferenced + operator result to the type with code dereferenced + operator result to WhateverList
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r15, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push r15                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 040h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 040h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 040h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$current$castOfForceCastOfDereferencedOperatorResultToTheTypeWithCodeDereferencedOperatorResultToWHateverlist$TypeMatch:  ; after block
  mov rbx, r13                                                   ; value initialization of variable declaration for list variable (cast of force cast of dereferenced + operator result to the type with code dereferenced + operator result to WhateverList)
  mov rsi, r14                                                   ; type initialization of variable declaration for list variable
  ; increment reference count for list variable if necessary
  mov rdi, rsi                                                   ; store list variable's type in testByte value slot
  mov rax, rdi                                                   ; move testByte to testByte
  mov r12, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r12                                                        ; adjust to the relative start of that type's entry in the type table
  mov r13, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r13                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$current$AfterGCIncref                                 ; if not a GarbageCollectable, skip incref
    inc qword ptr [rbx]                                          ; increment reference count of list variable
  func$current$AfterGCIncref:                                    ; after GarbageCollectable incref
  ; Line 317: Integer index = __readFromAddress(iterator __as__ Integer + _gcB...
  mov r14, qword ptr [rbp + 040h]                                ; force cast of iterator to Integer
  mov r15, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov r10, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp r10, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$current$Gcblockdata$TypeMatch$2                       ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 030h], rsi                              ; move list variable's type out of rsi
    mov rsi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rsi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rdi, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 058h], r10                              ; move copy of _gcBlockData's type out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rax, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rsi, qword ptr [rsp + 030h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
  func$current$Gcblockdata$TypeMatch$2:                          ; after block
  mov r12, r14                                                   ; assign value of force cast of iterator to Integer to value of + operator result
  add r12, r15                                                   ; compute (force cast of iterator to Integer) + (copy of _gcBlockData) (result in + operator result)
  mov rdi, r12                                                   ; assign value of + operator result to value of + operator result
  add rdi, 018h                                                  ; compute (+ operator result) + (24 /* 0x18 */) (result in + operator result)
  ; Call __readFromAddress with 1 arguments
  mov r14, qword ptr [rdi]                                       ; dereference first argument of __readFromAddress
  mov r15, qword ptr [rbp + 040h]                                ; force cast of iterator to Integer
  mov r10, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov qword ptr [rsp + 030h], rbx                                ; move list variable's value out of rbx
  mov rbx, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp rbx, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$current$Gcblockdata$TypeMatch$3                       ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r12, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r12                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r13, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 058h], r10                              ; move copy of _gcBlockData's value out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 030h], r14                              ; move dereferenced + operator result's value out of r14
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
    mov r14, qword ptr [rsp + 020h]                              ; restoring slots to previous scope state
  func$current$Gcblockdata$TypeMatch$3:                          ; after block
  mov qword ptr [rsp + 028h], r15                                ; move force cast of iterator to Integer's value out of r15
  mov r15, qword ptr [rsp + 028h]                                ; assign value of force cast of iterator to Integer to value of + operator result
  add r15, r10                                                   ; compute (force cast of iterator to Integer) + (copy of _gcBlockData) (result in + operator result)
  mov r13, r15                                                   ; assign value of + operator result to value of + operator result
  add r13, 010h                                                  ; compute (+ operator result) + (16 /* 0x10 */) (result in + operator result)
  ; Call __readFromAddress with 1 arguments
  mov rbx, qword ptr [r13]                                       ; dereference first argument of __readFromAddress
  mov qword ptr [rsp + 028h], rsi                                ; move list variable's type out of rsi
  mov rsi, r14                                                   ; force cast of dereferenced + operator result to the type with code dereferenced + operator result
  mov rdi, rbx                                                   ; store dereferenced + operator result value in force cast of dereferenced + operator result to the type with code dereferenced + operator result's type slot
  mov rax, rdi                                                   ; store force cast of dereferenced + operator result to the type with code dereferenced + operator result's type in testByte value slot
  mov r12, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r12                                                        ; adjust to the relative start of that type's entry in the type table
  mov r13, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r13                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that __readFromAddress(iterator __as__ Integer + _gcBlockData + 24 /* 0x18 */) __dynamic_as__ __readFromAddress(iterator __as__ Integer + _gcBlockData + 16 /* 0x10 */) as Integer is Integer
  jc func$current$ReadfromaddressIteratorAsINtegerGcblockdata240X18DynamicAsReadfromaddressIteratorAsINtegerGcblockdata160X10AsINteger$TypeMatch ; skip next block if the type matches
    ; Error handling block for __readFromAddress(iterator __as__ Integer + _gcBlockData + 24 /* 0x18 */) __dynamic_as__ __readFromAddress(iterator __as__ Integer + _gcBlockData + 16 /* 0x10 */) as Integer
    int 3                                                        ; call debugger
    ;  - print(asOperatorFailureMessage)
    ; Call __print with 1 arguments
    mov r14, offset asOperatorFailureMessage                     ; reading asOperatorFailureMessage for push
    push r14                                                     ; value of argument #1 (asOperatorFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r15, qword ptr [rsp + 030h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 030h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 030h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 030h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$current$ReadfromaddressIteratorAsINtegerGcblockdata240X18DynamicAsReadfromaddressIteratorAsINtegerGcblockdata160X10AsINteger$TypeMatch:  ; after block
  mov rbx, rsi                                                   ; copy value of force cast of dereferenced + operator result to the type with code dereferenced + operator result for cast to Integer
  mov qword ptr [rsp + 020h], rsi                                ; move force cast of dereferenced + operator result to the type with code dereferenced + operator result's value out of rsi
  mov rsi, rdi                                                   ; copy type of force cast of dereferenced + operator result to the type with code dereferenced + operator result for cast to Integer
  cmp rsi, 000h                                                  ; compare type of cast of force cast of dereferenced + operator result to the type with code dereferenced + operator result to Integer to <sentinel>
  jne func$current$castOfForceCastOfDereferencedOperatorResultToTheTypeWithCodeDereferencedOperatorResultToINteger$TypeMatch ; skip next block if cast of force cast of dereferenced + operator result to the type with code dereferenced + operator result to Integer is not sentinel
    ; Error handling block for cast of force cast of dereferenced + operator result to the type with code dereferenced + operator result to Integer
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 030h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 030h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r12, qword ptr [rsp + 030h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 030h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$current$castOfForceCastOfDereferencedOperatorResultToTheTypeWithCodeDereferencedOperatorResultToINteger$TypeMatch:  ; after block
  mov r13, rbx                                                   ; value initialization of variable declaration for index variable (cast of force cast of dereferenced + operator result to the type with code dereferenced + operator result to Integer)
  mov r14, rsi                                                   ; type initialization of variable declaration for index variable
  ; Line 318: return list[index];
  mov r15, qword ptr [rsp + 030h]                                ; make a copy of list's value in case it changes before we use it
  mov r10, qword ptr [rsp + 028h]                                ; make a copy of list's type in case it changes before we use it
  ; increment reference count for copy of list if necessary
  mov rbx, r10                                                   ; store copy of list's type in testByte value slot
  mov rax, rbx                                                   ; move testByte to testByte
  mov rsi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rsi                                                        ; adjust to the relative start of that type's entry in the type table
  mov rdi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rdi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$current$AfterGCIncref$1                               ; if not a GarbageCollectable, skip incref
    inc qword ptr [r15]                                          ; increment reference count of copy of list
  func$current$AfterGCIncref$1:                                  ; after GarbageCollectable incref
  cmp r10, 000h                                                  ; compare type of copy of list to <sentinel>
  jne func$current$list$TypeMatch                                ; skip next block if copy of list is not sentinel
    ; Error handling block for list
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r12, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r12                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r9, qword ptr [rsp + 030h]                               ; load address of return value's value
    push r9                                                      ; internal argument 6: pointer to return value slot's value
    lea r9, qword ptr [rsp + 030h]                               ; load address of return value's type
    push r9                                                      ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 050h], r10                              ; move copy of list's type out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 028h], r13                              ; move index variable's value out of r13
    lea r13, qword ptr [rsp + 030h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 010h]                              ; restoring slots to previous scope state
    mov r13, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
  func$current$list$TypeMatch:                                   ; after block
  mov qword ptr [rsp + 020h], r14                                ; move index variable's type out of r14
  mov r14, r13                                                   ; make a copy of index's value in case it changes before we use it
  mov qword ptr [rsp + 018h], r15                                ; move copy of list's value out of r15
  mov r15, qword ptr [rsp + 020h]                                ; make a copy of index's type in case it changes before we use it
  cmp r15, 000h                                                  ; compare type of copy of index to <sentinel>
  jne func$current$copyOfIndex$TypeMatch                         ; skip next block if copy of index is not sentinel
    ; Error handling block for copy of index
    int 3                                                        ; call debugger
    ;  - print(subscriptTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 020h], r10                              ; move copy of list's type out of r10
    mov r10, offset subscriptTypeCheckFailureMessage             ; reading subscriptTypeCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (subscriptTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rbx, qword ptr [rsp + 020h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rax, qword ptr [rsp + 020h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 020h]                              ; restoring slots to previous scope state
  func$current$copyOfIndex$TypeMatch:                            ; after block
  mov rsi, qword ptr [rsp + 018h]                                ; get copy of list into register to dereference it
  mov rdi, qword ptr [rsi + 038h]                                ; list data is the second field in its block
  mov r12, qword ptr [rdi + 008h]                                ; read length from the list data block's metadata
  lea r13, qword ptr [rdi + 020h]                                ; compute address of 0th entry in list data block
  cmp r14, r12                                                   ; compare copy of index to length of list
  jge func$current$subscript$boundsError                         ; index out of range (too high)
  cmp r14, 000h                                                  ; compare copy of index to 0 (integer)
  jge func$current$subscript$inBounds                            ; index not out of range (not negative)
  func$current$subscript$boundsError:                            ; invalid index
    ; Error handling block for subscript bounds error
    int 3                                                        ; call debugger
    ;  - print(boundsFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 020h], r14                              ; move copy of index's value out of r14
    mov r14, offset boundsFailureMessage                         ; reading boundsFailureMessage for push
    push r14                                                     ; value of argument #1 (boundsFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    mov qword ptr [rsp + 020h], r15                              ; move copy of index's type out of r15
    lea r15, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 040h], r10                              ; move copy of list's type out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r14, qword ptr [rsp + 020h]                              ; restoring slots to previous scope state
    mov r15, qword ptr [rsp + 010h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 000h]                              ; restoring slots to previous scope state
  func$current$subscript$inBounds:                               ; valid index
  mov rbx, r14                                                   ; assign value of copy of index to value of index into list * 16
  shl rbx, 004h                                                  ; multiply by 8*2
  mov rax, r13                                                   ; assign value of base address of list to value of pointer to copy of list[copy of index]
  add rax, rbx                                                   ; compute address of specified list entry (result in pointer to copy of list[copy of index])
  mov qword ptr [rsp + 020h], rsi                                ; move copy of list's value out of rsi
  mov rsi, qword ptr [rax + 008h]                                ; value of copy of list[copy of index]
  mov rdi, qword ptr [rax]                                       ; type of copy of list[copy of index]
  ; increment reference count for copy of copy of list[copy of index] if necessary
  mov r12, rdi                                                   ; store copy of copy of list[copy of index]'s type in testByte value slot
  mov rax, r12                                                   ; move testByte to testByte
  mov r13, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r13                                                        ; adjust to the relative start of that type's entry in the type table
  mov r14, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r14                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$current$AfterGCIncref$2                               ; if not a GarbageCollectable, skip incref
    inc qword ptr [rsi]                                          ; increment reference count of copy of copy of list[copy of index]
  func$current$AfterGCIncref$2:                                  ; after GarbageCollectable incref
  cmp rdi, 020h                                                  ; compare type of copy of copy of list[copy of index] to String
  jne func$current$AfterStringIncref                             ; if not a String, skip incref
    mov r15, qword ptr [rsi]                                     ; dereference string to get to reference count
    cmp r15, 0                                                   ; compare string reference count to 0
    jns func$current$StringIncref                                ; if reference count is negative (constant strings), skip incref
    jmp func$current$AfterStringIncref                           ; skip incref for string constants
    func$current$StringIncref:                                   ; real String
      inc qword ptr [rsi]                                        ; increment reference count of copy of copy of list[copy of index]
  func$current$AfterStringIncref:                                ; after String incref
  cmp rdi, 000h                                                  ; compare type of copy of copy of list[copy of index] to <sentinel>
  jne func$current$currentReturnValue$TypeMatch                  ; skip next block if copy of copy of list[copy of index] is not sentinel
    ; Error handling block for current return value
    int 3                                                        ; call debugger
    ;  - print(returnValueTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 018h], r10                              ; move copy of list's type out of r10
    mov r10, offset returnValueTypeCheckFailureMessage           ; reading returnValueTypeCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (returnValueTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r9, qword ptr [rsp + 020h]                               ; load address of return value's value
    push r9                                                      ; internal argument 6: pointer to return value slot's value
    lea r9, qword ptr [rsp + 020h]                               ; load address of return value's type
    push r9                                                      ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 020h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
  func$current$currentReturnValue$TypeMatch:                     ; after block
  mov qword ptr [rsp + 018h], rdi                                ; move copy of copy of list[copy of index]'s type out of rdi
  mov rdi, qword ptr [rbp + 030h]                                ; get pointer to return value of current into register to dereference it
  mov qword ptr [rdi], rsi                                       ; current return value
  mov qword ptr [rsp + 010h], rsi                                ; move copy of copy of list[copy of index]'s value out of rsi
  mov rsi, qword ptr [rsp + 018h]                                ; reading type of copy of copy of list[copy of index]
  mov r12, qword ptr [rbp + 028h]                                ; get pointer to return value type of current into register to dereference it
  mov qword ptr [r12], rsi                                       ; type of current return value
  ; increment reference count for copy of copy of list[copy of index] if necessary
  mov rax, rsi                                                   ; store copy of copy of list[copy of index]'s type in testByte value slot
  mov r13, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r13                                                        ; adjust to the relative start of that type's entry in the type table
  mov r14, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r14                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$current$AfterGCIncref$3                               ; if not a GarbageCollectable, skip incref
    mov r15, qword ptr [rsp + 010h]                              ; read slot into register for dereferencing
    inc qword ptr [r15]                                          ; increment reference count of copy of copy of list[copy of index]
    mov qword ptr [rsp + 010h], r15                              ; restoring slots to previous scope state
  func$current$AfterGCIncref$3:                                  ; after GarbageCollectable incref
  cmp rsi, 020h                                                  ; compare type of copy of copy of list[copy of index] to String
  jne func$current$AfterStringIncref$1                           ; if not a String, skip incref
    mov qword ptr [rsp + 018h], r10                              ; move copy of list's type out of r10
    mov r10, qword ptr [rsp + 010h]                              ; get copy of copy of list[copy of index] into register to dereference it
    mov rbx, qword ptr [r10]                                     ; dereference string to get to reference count
    cmp rbx, 0                                                   ; compare string reference count to 0
    jns func$current$StringIncref$1                              ; if reference count is negative (constant strings), skip incref
    mov qword ptr [rsp + 010h], r10                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
    jmp func$current$AfterStringIncref$1                         ; skip incref for string constants
    func$current$StringIncref$1:                                 ; real String
      inc qword ptr [r10]                                        ; increment reference count of copy of copy of list[copy of index]
    mov qword ptr [rsp + 010h], r10                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
  func$current$AfterStringIncref$1:                              ; after String incref
  ; Decrement reference count for copy of list (static type: WhateverList'40) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, r10                                                   ; arg #2: copy of list's type
  mov rcx, qword ptr [rsp + 040h]                                ; arg #1: copy of list's value
  mov qword ptr [rsp + 038h], r10                                ; move copy of list's type out of r10
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for list variable (static type: WhateverList'40) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 048h]                                ; arg #2: list variable's type
  mov rcx, qword ptr [rsp + 050h]                                ; arg #1: list variable's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of copy of list[copy of index] (static type: Whatever) via decrefMaybeGCOrString
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, rsi                                                   ; arg #2: copy of copy of list[copy of index]'s type
  mov rcx, qword ptr [rsp + 030h]                                ; arg #1: copy of copy of list[copy of index]'s value
  call decrefMaybeGCOrString                                     ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 040h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; next
dq func$next$annotation
func$next:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 050h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 090h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 001h                                                  ; compare parameter count of next to 1 (integer)
  je func$next$parameterCountCheck$continuation                  ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 050h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 050h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 050h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 050h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$next$parameterCountCheck$continuation:                    ; end of parameter count check
  ; Check type of parameter 0, iterator (expecting WhateverIterator)
  mov rsi, qword ptr [rbp + 038h]                                ; store iterator's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  add rax, 001h                                                  ; adjust to the byte containing the bit to check against (result in testByte)
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 004h                                       ; check that iterator is WhateverIterator
  jc func$next$iterator$TypeMatch                                ; skip next block if the type matches
    ; Error handling block for iterator
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 050h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 050h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 050h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 050h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$next$iterator$TypeMatch:                                  ; after block
  ; Line 325: WhateverList list = __readFromAddress(iterator __as__ Integer + ...
  mov r10, qword ptr [rbp + 040h]                                ; force cast of iterator to Integer
  mov rbx, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov rsi, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp rsi, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$next$Gcblockdata$TypeMatch                            ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 050h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 050h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 070h], r10                              ; move force cast of iterator to Integer's value out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 050h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 050h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 030h]                              ; restoring slots to previous scope state
  func$next$Gcblockdata$TypeMatch:                               ; after block
  mov qword ptr [rsp + 040h], r10                                ; move force cast of iterator to Integer's value out of r10
  mov r10, qword ptr [rsp + 040h]                                ; assign value of force cast of iterator to Integer to value of + operator result
  add r10, rbx                                                   ; compute (force cast of iterator to Integer) + (copy of _gcBlockData) (result in + operator result)
  mov r14, r10                                                   ; assign value of + operator result to value of + operator result
  add r14, 008h                                                  ; compute (+ operator result) + (8) (result in + operator result)
  ; Call __readFromAddress with 1 arguments
  mov rsi, qword ptr [r14]                                       ; dereference first argument of __readFromAddress
  mov rax, qword ptr [rbp + 040h]                                ; force cast of iterator to Integer
  mov rdi, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov r12, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp r12, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$next$Gcblockdata$TypeMatch$1                          ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rbx, qword ptr [rsp + 050h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 050h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 070h], rax                              ; move force cast of iterator to Integer's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 048h], rsi                              ; move dereferenced + operator result's value out of rsi
    lea rsi, qword ptr [rsp + 050h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 040h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 030h]                              ; restoring slots to previous scope state
    mov rsi, qword ptr [rsp + 038h]                              ; restoring slots to previous scope state
  func$next$Gcblockdata$TypeMatch$1:                             ; after block
  mov qword ptr [rsp + 040h], rax                                ; move force cast of iterator to Integer's value out of rax
  mov rax, qword ptr [rsp + 040h]                                ; assign value of force cast of iterator to Integer to value of + operator result
  add rax, rdi                                                   ; compute (force cast of iterator to Integer) + (copy of _gcBlockData) (result in + operator result)
  mov rbx, rax                                                   ; compute (+ operator result) + (0)
  ; Call __readFromAddress with 1 arguments
  mov r12, qword ptr [rbx]                                       ; dereference first argument of __readFromAddress
  mov r13, rsi                                                   ; force cast of dereferenced + operator result to the type with code dereferenced + operator result
  mov r14, r12                                                   ; store dereferenced + operator result value in force cast of dereferenced + operator result to the type with code dereferenced + operator result's type slot
  mov r15, r14                                                   ; store force cast of dereferenced + operator result to the type with code dereferenced + operator result's type in testByte value slot
  mov rax, r15                                                   ; move testByte to testByte
  mov r10, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r10                                                        ; adjust to the relative start of that type's entry in the type table
  add rax, 001h                                                  ; adjust to the byte containing the bit to check against (result in testByte)
  mov rbx, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rbx                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 003h                                       ; check that __readFromAddress(iterator __as__ Integer + _gcBlockData + 8) __dynamic_as__ __readFromAddress(iterator __as__ Integer + _gcBlockData + 0) as WhateverList is WhateverList
  jc func$next$ReadfromaddressIteratorAsINtegerGcblockdata8DynamicAsReadfromaddressIteratorAsINtegerGcblockdata0AsWHateverlist$TypeMatch ; skip next block if the type matches
    ; Error handling block for __readFromAddress(iterator __as__ Integer + _gcBlockData + 8) __dynamic_as__ __readFromAddress(iterator __as__ Integer + _gcBlockData + 0) as WhateverList
    int 3                                                        ; call debugger
    ;  - print(asOperatorFailureMessage)
    ; Call __print with 1 arguments
    mov rsi, offset asOperatorFailureMessage                     ; reading asOperatorFailureMessage for push
    push rsi                                                     ; value of argument #1 (asOperatorFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rdi, qword ptr [rsp + 050h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 050h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r12, qword ptr [rsp + 050h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 050h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$next$ReadfromaddressIteratorAsINtegerGcblockdata8DynamicAsReadfromaddressIteratorAsINtegerGcblockdata0AsWHateverlist$TypeMatch:  ; after block
  mov qword ptr [rsp + 040h], r13                                ; move force cast of dereferenced + operator result to the type with code dereferenced + operator result's value out of r13
  mov r13, qword ptr [rsp + 040h]                                ; copy value of force cast of dereferenced + operator result to the type with code dereferenced + operator result for cast to WhateverList
  mov qword ptr [rsp + 038h], r14                                ; move force cast of dereferenced + operator result to the type with code dereferenced + operator result's type out of r14
  mov r14, qword ptr [rsp + 038h]                                ; copy type of force cast of dereferenced + operator result to the type with code dereferenced + operator result for cast to WhateverList
  cmp r14, 000h                                                  ; compare type of cast of force cast of dereferenced + operator result to the type with code dereferenced + operator result to WhateverList to <sentinel>
  jne func$next$castOfForceCastOfDereferencedOperatorResultToTheTypeWithCodeDereferencedOperatorResultToWHateverlist$TypeMatch ; skip next block if cast of force cast of dereferenced + operator result to the type with code dereferenced + operator result to WhateverList is not sentinel
    ; Error handling block for cast of force cast of dereferenced + operator result to the type with code dereferenced + operator result to WhateverList
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r15, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push r15                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 050h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 050h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 050h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 050h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$next$castOfForceCastOfDereferencedOperatorResultToTheTypeWithCodeDereferencedOperatorResultToWHateverlist$TypeMatch:  ; after block
  mov rbx, r13                                                   ; value initialization of variable declaration for list variable (cast of force cast of dereferenced + operator result to the type with code dereferenced + operator result to WhateverList)
  mov rsi, r14                                                   ; type initialization of variable declaration for list variable
  ; increment reference count for list variable if necessary
  mov rdi, rsi                                                   ; store list variable's type in testByte value slot
  mov rax, rdi                                                   ; move testByte to testByte
  mov r12, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r12                                                        ; adjust to the relative start of that type's entry in the type table
  mov r13, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r13                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$next$AfterGCIncref                                    ; if not a GarbageCollectable, skip incref
    inc qword ptr [rbx]                                          ; increment reference count of list variable
  func$next$AfterGCIncref:                                       ; after GarbageCollectable incref
  ; Line 326: Integer index = __readFromAddress(iterator __as__ Integer + _gcB...
  mov r14, qword ptr [rbp + 040h]                                ; force cast of iterator to Integer
  mov r15, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov r10, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp r10, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$next$Gcblockdata$TypeMatch$2                          ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 040h], rsi                              ; move list variable's type out of rsi
    mov rsi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rsi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rdi, qword ptr [rsp + 048h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 048h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 068h], r10                              ; move copy of _gcBlockData's type out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rax, qword ptr [rsp + 048h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 048h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rsi, qword ptr [rsp + 040h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 028h]                              ; restoring slots to previous scope state
  func$next$Gcblockdata$TypeMatch$2:                             ; after block
  mov r12, r14                                                   ; assign value of force cast of iterator to Integer to value of + operator result
  add r12, r15                                                   ; compute (force cast of iterator to Integer) + (copy of _gcBlockData) (result in + operator result)
  mov rdi, r12                                                   ; assign value of + operator result to value of + operator result
  add rdi, 018h                                                  ; compute (+ operator result) + (24 /* 0x18 */) (result in + operator result)
  ; Call __readFromAddress with 1 arguments
  mov r14, qword ptr [rdi]                                       ; dereference first argument of __readFromAddress
  mov r15, qword ptr [rbp + 040h]                                ; force cast of iterator to Integer
  mov r10, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov qword ptr [rsp + 040h], rbx                                ; move list variable's value out of rbx
  mov rbx, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp rbx, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$next$Gcblockdata$TypeMatch$3                          ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r12, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r12                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r13, qword ptr [rsp + 048h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 048h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 068h], r10                              ; move copy of _gcBlockData's value out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 040h], r14                              ; move dereferenced + operator result's value out of r14
    lea r14, qword ptr [rsp + 048h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 028h]                              ; restoring slots to previous scope state
    mov r14, qword ptr [rsp + 030h]                              ; restoring slots to previous scope state
  func$next$Gcblockdata$TypeMatch$3:                             ; after block
  mov qword ptr [rsp + 038h], r15                                ; move force cast of iterator to Integer's value out of r15
  mov r15, qword ptr [rsp + 038h]                                ; assign value of force cast of iterator to Integer to value of + operator result
  add r15, r10                                                   ; compute (force cast of iterator to Integer) + (copy of _gcBlockData) (result in + operator result)
  mov r13, r15                                                   ; assign value of + operator result to value of + operator result
  add r13, 010h                                                  ; compute (+ operator result) + (16 /* 0x10 */) (result in + operator result)
  ; Call __readFromAddress with 1 arguments
  mov rbx, qword ptr [r13]                                       ; dereference first argument of __readFromAddress
  mov qword ptr [rsp + 038h], rsi                                ; move list variable's type out of rsi
  mov rsi, r14                                                   ; force cast of dereferenced + operator result to the type with code dereferenced + operator result
  mov rdi, rbx                                                   ; store dereferenced + operator result value in force cast of dereferenced + operator result to the type with code dereferenced + operator result's type slot
  mov rax, rdi                                                   ; store force cast of dereferenced + operator result to the type with code dereferenced + operator result's type in testByte value slot
  mov r12, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r12                                                        ; adjust to the relative start of that type's entry in the type table
  mov r13, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r13                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that __readFromAddress(iterator __as__ Integer + _gcBlockData + 24 /* 0x18 */) __dynamic_as__ __readFromAddress(iterator __as__ Integer + _gcBlockData + 16 /* 0x10 */) as Integer is Integer
  jc func$next$ReadfromaddressIteratorAsINtegerGcblockdata240X18DynamicAsReadfromaddressIteratorAsINtegerGcblockdata160X10AsINteger$TypeMatch ; skip next block if the type matches
    ; Error handling block for __readFromAddress(iterator __as__ Integer + _gcBlockData + 24 /* 0x18 */) __dynamic_as__ __readFromAddress(iterator __as__ Integer + _gcBlockData + 16 /* 0x10 */) as Integer
    int 3                                                        ; call debugger
    ;  - print(asOperatorFailureMessage)
    ; Call __print with 1 arguments
    mov r14, offset asOperatorFailureMessage                     ; reading asOperatorFailureMessage for push
    push r14                                                     ; value of argument #1 (asOperatorFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r15, qword ptr [rsp + 040h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 040h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 040h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 040h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$next$ReadfromaddressIteratorAsINtegerGcblockdata240X18DynamicAsReadfromaddressIteratorAsINtegerGcblockdata160X10AsINteger$TypeMatch:  ; after block
  mov rbx, rsi                                                   ; copy value of force cast of dereferenced + operator result to the type with code dereferenced + operator result for cast to Integer
  mov qword ptr [rsp + 030h], rsi                                ; move force cast of dereferenced + operator result to the type with code dereferenced + operator result's value out of rsi
  mov rsi, rdi                                                   ; copy type of force cast of dereferenced + operator result to the type with code dereferenced + operator result for cast to Integer
  cmp rsi, 000h                                                  ; compare type of cast of force cast of dereferenced + operator result to the type with code dereferenced + operator result to Integer to <sentinel>
  jne func$next$castOfForceCastOfDereferencedOperatorResultToTheTypeWithCodeDereferencedOperatorResultToINteger$TypeMatch ; skip next block if cast of force cast of dereferenced + operator result to the type with code dereferenced + operator result to Integer is not sentinel
    ; Error handling block for cast of force cast of dereferenced + operator result to the type with code dereferenced + operator result to Integer
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 040h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r12, qword ptr [rsp + 040h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 040h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$next$castOfForceCastOfDereferencedOperatorResultToTheTypeWithCodeDereferencedOperatorResultToINteger$TypeMatch:  ; after block
  mov r13, rbx                                                   ; value initialization of variable declaration for index variable (cast of force cast of dereferenced + operator result to the type with code dereferenced + operator result to Integer)
  mov r14, rsi                                                   ; type initialization of variable declaration for index variable
  ; Line 327: index += 1;
  mov r15, r13                                                   ; make a copy of index's value in case it changes before we use it
  mov r10, r14                                                   ; make a copy of index's type in case it changes before we use it
  cmp r10, 000h                                                  ; compare type of copy of index to <sentinel>
  jne func$next$copyOfIndex$TypeMatch                            ; skip next block if copy of index is not sentinel
    ; Error handling block for copy of index
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rbx, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rbx                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rsi, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 040h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 060h], r10                              ; move copy of index's type out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rdi, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 040h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 020h]                              ; restoring slots to previous scope state
  func$next$copyOfIndex$TypeMatch:                               ; after block
  mov qword ptr [rsp + 030h], r14                                ; move index variable's type out of r14
  mov r14, r15                                                   ; assign value of copy of index to value of += operator result
  add r14, 001h                                                  ; += operator
  mov r13, r14                                                   ; store value
  mov qword ptr [rsp + 030h], 01fh                               ; store type (Integer'31)
  ; Line 328: __writeToAddress(iterator __as__ Integer + _gcBlockData + 24 /* ...
  mov rsi, qword ptr [rbp + 040h]                                ; force cast of iterator to Integer
  mov rdi, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov rax, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp rax, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$next$Gcblockdata$TypeMatch$4                          ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r15, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r15                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r10, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 058h], rax                              ; move copy of _gcBlockData's type out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
  func$next$Gcblockdata$TypeMatch$4:                             ; after block
  mov qword ptr [rsp + 028h], rsi                                ; move force cast of iterator to Integer's value out of rsi
  mov rsi, qword ptr [rsp + 028h]                                ; assign value of force cast of iterator to Integer to value of + operator result
  add rsi, rdi                                                   ; compute (force cast of iterator to Integer) + (copy of _gcBlockData) (result in + operator result)
  mov r10, rsi                                                   ; assign value of + operator result to value of + operator result
  add r10, 018h                                                  ; compute (+ operator result) + (24 /* 0x18 */) (result in + operator result)
  mov rbx, r13                                                   ; make a copy of index's value in case it changes before we use it
  mov rsi, qword ptr [rsp + 030h]                                ; make a copy of index's type in case it changes before we use it
  ; Call __writeToAddress with 2 arguments
  mov qword ptr [r10], rbx                                       ; __writeToAddress
  ; Line 329: return index < len(list);
  mov qword ptr [rsp + 028h], r13                                ; move index variable's value out of r13
  mov r13, qword ptr [rsp + 028h]                                ; make a copy of index's value in case it changes before we use it
  mov r14, qword ptr [rsp + 030h]                                ; make a copy of index's type in case it changes before we use it
  mov r15, qword ptr [rsp + 040h]                                ; make a copy of list's value in case it changes before we use it
  mov r10, qword ptr [rsp + 038h]                                ; make a copy of list's type in case it changes before we use it
  ; increment reference count for copy of list if necessary
  mov rbx, r10                                                   ; store copy of list's type in testByte value slot
  mov rax, rbx                                                   ; move testByte to testByte
  mov rsi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rsi                                                        ; adjust to the relative start of that type's entry in the type table
  mov rdi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rdi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$next$AfterGCIncref$1                                  ; if not a GarbageCollectable, skip incref
    inc qword ptr [r15]                                          ; increment reference count of copy of list
  func$next$AfterGCIncref$1:                                     ; after GarbageCollectable incref
  ; Call len with 1 arguments
  push r15                                                       ; value of argument #1 (copy of list)
  push r10                                                       ; type of argument #1
  mov qword ptr [rsp + 038h], r14                                ; move copy of index's type out of r14
  lea r14, qword ptr [rsp + 040h]                                ; load address of return value's value
  push r14                                                       ; internal argument 6: pointer to return value slot's value
  lea r14, qword ptr [rsp + 038h]                                ; load address of return value's type
  push r14                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  mov qword ptr [rsp + 058h], r10                                ; move copy of list's type out of r10
  call func$len                                                  ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  cmp qword ptr [rsp + 028h], 000h                               ; compare type of copy of index to <sentinel>
  jne func$next$index$TypeMatch                                  ; skip next block if copy of index is not sentinel
    ; Error handling block for index
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 010h], r15                              ; move copy of list's value out of r15
    mov r15, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r15                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r10, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 018h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 018h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r15, qword ptr [rsp + 010h]                              ; restoring slots to previous scope state
  func$next$index$TypeMatch:                                     ; after block
  cmp qword ptr [rsp + 020h], 000h                               ; compare type of len return value to <sentinel>
  jne func$next$lenList$TypeMatch                                ; skip next block if len return value is not sentinel
    ; Error handling block for len(list)
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rax, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rax                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rsi, qword ptr [rsp + 020h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rdi, qword ptr [rsp + 020h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$next$lenList$TypeMatch:                                   ; after block
  xor r12, r12                                                   ; clear < operator result
  cmp r13, qword ptr [rsp + 030h]                                ; compare copy of index with len return value
  setl r12b                                                      ; store result in < operator result
  mov r10, qword ptr [rbp + 030h]                                ; get pointer to return value of next into register to dereference it
  mov qword ptr [r10], r12                                       ; next return value
  mov rbx, qword ptr [rbp + 028h]                                ; get pointer to return value type of next into register to dereference it
  mov qword ptr [rbx], 01eh                                      ; type of next return value (Boolean'30)
  ; Decrement reference count for list variable (static type: WhateverList'40) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 058h]                                ; arg #2: list variable's type
  mov rcx, qword ptr [rsp + 060h]                                ; arg #1: list variable's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of list (static type: WhateverList'40) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 038h]                                ; arg #2: copy of list's type
  mov rcx, r15                                                   ; arg #1: copy of list's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 050h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; iterator
dq func$iterator$annotation
func$iterator:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 078h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 0b8h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 001h                                                  ; compare parameter count of iterator to 1 (integer)
  je func$iterator$parameterCountCheck$continuation              ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 078h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 078h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 078h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 078h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$iterator$parameterCountCheck$continuation:                ; end of parameter count check
  ; Check type of parameter 0, iterable (expecting WhateverIterable)
  mov rsi, qword ptr [rbp + 038h]                                ; store iterable's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  add rax, 001h                                                  ; adjust to the byte containing the bit to check against (result in testByte)
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that iterable is WhateverIterable
  jc func$iterator$iterable$TypeMatch                            ; skip next block if the type matches
    ; Error handling block for iterable
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 078h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 078h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 078h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 078h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$iterator$iterable$TypeMatch:                              ; after block
  ; Line 334: assert(iterable is WhateverList, 'iterables are only implemented...
  mov r10, qword ptr [rbp + 038h]                                ; store iterable's type in testByte value slot
  mov rax, r10                                                   ; move testByte to testByte
  mov rbx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rbx                                                        ; adjust to the relative start of that type's entry in the type table
  add rax, 001h                                                  ; adjust to the byte containing the bit to check against (result in testByte)
  mov rsi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rsi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 003h                                       ; check that iterable is WhateverList
  mov rdi, 000h                                                  ; clear is expression result
  setc dil                                                       ; store result in is expression result
  ; Call assert with 2 arguments
  mov r15, offset string$12                                      ; reading string for push
  push r15                                                       ; value of argument #2 (string)
  push 020h                                                      ; type of argument #2 (String'32)
  push rdi                                                       ; value of argument #1 (is expression result)
  push 01eh                                                      ; type of argument #1 (Boolean'30)
  lea r10, qword ptr [rsp + 088h]                                ; load address of return value's value
  push r10                                                       ; internal argument 6: pointer to return value slot's value
  lea r10, qword ptr [rsp + 088h]                                ; load address of return value's type
  push r10                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 002h                                                  ; internal argument 1: number of actual arguments
  call func$assert                                               ; jump to subroutine
  add rsp, 050h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 335: _gcLocked += 1;
  mov rax, qword ptr _gcLockedValue                              ; make a copy of _gcLocked's value in case it changes before we use it
  mov rbx, qword ptr _gcLockedType                               ; make a copy of _gcLocked's type in case it changes before we use it
  cmp rbx, 000h                                                  ; compare type of copy of _gcLocked to <sentinel>
  jne func$iterator$copyOfGclocked$TypeMatch                     ; skip next block if copy of _gcLocked is not sentinel
    ; Error handling block for copy of _gcLocked
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rsi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rsi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rdi, qword ptr [rsp + 078h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 078h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 098h], rax                              ; move copy of _gcLocked's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r12, qword ptr [rsp + 078h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 078h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 058h]                              ; restoring slots to previous scope state
  func$iterator$copyOfGclocked$TypeMatch:                        ; after block
  mov r10, rax                                                   ; assign value of copy of _gcLocked to value of += operator result
  add r10, 001h                                                  ; += operator
  mov qword ptr _gcLockedValue, r10                              ; store value
  mov qword ptr _gcLockedType, 01fh                              ; store type (Integer'31)
  ; Line 336: WhateverIterator iterator = _constructor(__iteratorTypeOf__typeO...
  mov rdi, qword ptr [rbp + 038h]                                ; store iterable's type in __typeOf unary operator result value slot
  mov r15, rdi                                                   ; assign value of __typeOf unary operator result to value of __iteratorTypeOf unary operator result
  shl r15, 002h                                                  ; multiply type code by 4
  mov r10, offset iteratorTypeTable                              ; read second operand of + (iterator type table pointer)
  add r15, r10                                                   ; offset by the start of the iterator type table (result in __iteratorTypeOf unary operator result)
  mov rax, r15                                                   ; get __iteratorTypeOf unary operator result into register to avoid memory-to-memory mov
  xor r15, r15                                                   ; clear target
  mov r15d, dword ptr [rax]                                      ; dereference to get iterator type
  ; Call _constructor with 3 arguments
  push 002h                                                      ; value of argument #3 (2)
  push 01fh                                                      ; type of argument #3 (Integer'31)
  push 002h                                                      ; value of argument #2 (2)
  push 01fh                                                      ; type of argument #2 (Integer'31)
  push r15                                                       ; value of argument #1 (__iteratorTypeOf unary operator result)
  push 01fh                                                      ; type of argument #1 (Integer'31)
  lea r12, qword ptr [rsp + 098h]                                ; load address of return value's value
  push r12                                                       ; internal argument 6: pointer to return value slot's value
  lea r12, qword ptr [rsp + 098h]                                ; load address of return value's type
  push r12                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 003h                                                  ; internal argument 1: number of actual arguments
  call func$_constructor                                         ; jump to subroutine
  add rsp, 060h                                                  ; release shadow space and arguments (result in stack pointer)
  mov r13, qword ptr [rsp + 060h]                                ; store _constructor return value's type in testByte value slot
  mov rax, r13                                                   ; move testByte to testByte
  mov r14, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r14                                                        ; adjust to the relative start of that type's entry in the type table
  add rax, 001h                                                  ; adjust to the byte containing the bit to check against (result in testByte)
  mov r15, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r15                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 004h                                       ; check that _constructor(__iteratorTypeOf__typeOfiterable, 2, 2) as WhateverIterator is WhateverIterator
  jc func$iterator$ConstructorIteratortypeofTypeofiterable22AsWHateveriterator$TypeMatch ; skip next block if the type matches
    ; Error handling block for _constructor(__iteratorTypeOf__typeOfiterable, 2, 2) as WhateverIterator
    int 3                                                        ; call debugger
    ;  - print(asOperatorFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset asOperatorFailureMessage                     ; reading asOperatorFailureMessage for push
    push r10                                                     ; value of argument #1 (asOperatorFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rbx, qword ptr [rsp + 068h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 068h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rsi, qword ptr [rsp + 068h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 068h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$iterator$ConstructorIteratortypeofTypeofiterable22AsWHateveriterator$TypeMatch:  ; after block
  mov rdi, qword ptr [rsp + 068h]                                ; copy value of _constructor return value for cast to WhateverIterator
  mov r12, qword ptr [rsp + 060h]                                ; copy type of _constructor return value for cast to WhateverIterator
  cmp r12, 000h                                                  ; compare type of cast of _constructor return value to WhateverIterator to <sentinel>
  jne func$iterator$castOfConstructorReturnValueToWHateveriterator$TypeMatch ; skip next block if cast of _constructor return value to WhateverIterator is not sentinel
    ; Error handling block for cast of _constructor return value to WhateverIterator
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 068h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 068h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r14, qword ptr [rsp + 068h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 068h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$iterator$castOfConstructorReturnValueToWHateveriterator$TypeMatch:  ; after block
  mov r15, rdi                                                   ; value initialization of variable declaration for iterator variable (cast of _constructor return value to WhateverIterator)
  mov r10, r12                                                   ; type initialization of variable declaration for iterator variable
  ; increment reference count for iterator variable if necessary
  mov rbx, r10                                                   ; store iterator variable's type in testByte value slot
  mov rax, rbx                                                   ; move testByte to testByte
  mov rsi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rsi                                                        ; adjust to the relative start of that type's entry in the type table
  mov rdi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rdi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$iterator$AfterGCIncref                                ; if not a GarbageCollectable, skip incref
    inc qword ptr [r15]                                          ; increment reference count of iterator variable
  func$iterator$AfterGCIncref:                                   ; after GarbageCollectable incref
  ; Line 337: __writeToAddress(iterator __as__ Integer + _gcBlockData + 0, __t...
  mov r12, r15                                                   ; make a copy of iterator's value in case it changes before we use it
  mov r13, r10                                                   ; make a copy of iterator's type in case it changes before we use it
  ; increment reference count for copy of iterator if necessary
  mov r14, r13                                                   ; store copy of iterator's type in testByte value slot
  mov rax, r14                                                   ; move testByte to testByte
  mov r9, 002h                                                   ; read operand of mul (type table width in bytes) 
  mul r9                                                         ; adjust to the relative start of that type's entry in the type table
  mov r8, offset typeTable                                       ; read second operand of + (type table pointer)
  add rax, r8                                                    ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$iterator$AfterGCIncref$1                              ; if not a GarbageCollectable, skip incref
    inc qword ptr [r12]                                          ; increment reference count of copy of iterator
  func$iterator$AfterGCIncref$1:                                 ; after GarbageCollectable incref
  mov rdx, r12                                                   ; force cast of copy of iterator to Integer
  mov rcx, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov qword ptr [rsp + 058h], r15                                ; move iterator variable's value out of r15
  mov r15, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp r15, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$iterator$Gcblockdata$TypeMatch                        ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    mov qword ptr [rsp + 058h], r12                              ; move copy of iterator's value out of r12
    lea r12, qword ptr [rsp + 060h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 058h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov qword ptr [rsp + 078h], rdx                              ; move force cast of copy of iterator to Integer's value out of rdx
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov qword ptr [rsp + 070h], rcx                              ; move copy of _gcBlockData's value out of rcx
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 068h], r10                              ; move iterator variable's type out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    mov qword ptr [rsp + 050h], r13                              ; move copy of iterator's type out of r13
    lea r13, qword ptr [rsp + 060h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rcx, qword ptr [rsp + 030h]                              ; restoring slots to previous scope state
    mov rdx, qword ptr [rsp + 038h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 028h]                              ; restoring slots to previous scope state
    mov r12, qword ptr [rsp + 048h]                              ; restoring slots to previous scope state
    mov r13, qword ptr [rsp + 040h]                              ; restoring slots to previous scope state
  func$iterator$Gcblockdata$TypeMatch:                           ; after block
  mov r14, rdx                                                   ; assign value of force cast of copy of iterator to Integer to value of + operator result
  add r14, rcx                                                   ; compute (force cast of copy of iterator to Integer) + (copy of _gcBlockData) (result in + operator result)
  mov qword ptr [rsp + 050h], r12                                ; move copy of iterator's value out of r12
  mov r12, r14                                                   ; compute (+ operator result) + (0)
  mov qword ptr [rsp + 048h], r13                                ; move copy of iterator's type out of r13
  mov r13, qword ptr [rbp + 038h]                                ; store iterable's type in __typeOf unary operator result value slot
  ; Call __writeToAddress with 2 arguments
  mov qword ptr [r12], r13                                       ; __writeToAddress
  ; Line 338: __writeToAddress(iterator __as__ Integer + _gcBlockData + 8, ite...
  mov qword ptr [rsp + 040h], r10                                ; move iterator variable's type out of r10
  mov r10, qword ptr [rsp + 058h]                                ; make a copy of iterator's value in case it changes before we use it
  mov rbx, qword ptr [rsp + 040h]                                ; make a copy of iterator's type in case it changes before we use it
  ; increment reference count for copy of iterator if necessary
  mov rsi, rbx                                                   ; store copy of iterator's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$iterator$AfterGCIncref$2                              ; if not a GarbageCollectable, skip incref
    inc qword ptr [r10]                                          ; increment reference count of copy of iterator
  func$iterator$AfterGCIncref$2:                                 ; after GarbageCollectable incref
  mov r13, r10                                                   ; force cast of copy of iterator to Integer
  mov r14, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov r15, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp r15, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$iterator$Gcblockdata$TypeMatch$1                      ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 038h], rbx                              ; move copy of iterator's type out of rbx
    mov rbx, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rbx                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rsi, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 040h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 060h], r10                              ; move copy of iterator's value out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rax, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 040h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 020h]                              ; restoring slots to previous scope state
    mov rbx, qword ptr [rsp + 038h]                              ; restoring slots to previous scope state
  func$iterator$Gcblockdata$TypeMatch$1:                         ; after block
  mov rdi, r13                                                   ; assign value of force cast of copy of iterator to Integer to value of + operator result
  add rdi, r14                                                   ; compute (force cast of copy of iterator to Integer) + (copy of _gcBlockData) (result in + operator result)
  mov rsi, rdi                                                   ; assign value of + operator result to value of + operator result
  add rsi, 008h                                                  ; compute (+ operator result) + (8) (result in + operator result)
  mov rax, qword ptr [rbp + 040h]                                ; force cast of iterable to Integer
  ; Call __writeToAddress with 2 arguments
  mov qword ptr [rsi], rax                                       ; __writeToAddress
  ; Line 339: __writeToAddress(iterator __as__ Integer + _gcBlockData + 16 /* ...
  mov r14, qword ptr [rsp + 058h]                                ; make a copy of iterator's value in case it changes before we use it
  mov r15, qword ptr [rsp + 040h]                                ; make a copy of iterator's type in case it changes before we use it
  ; increment reference count for copy of iterator if necessary
  mov qword ptr [rsp + 038h], r10                                ; move copy of iterator's value out of r10
  mov r10, r15                                                   ; store copy of iterator's type in testByte value slot
  mov rax, r10                                                   ; move testByte to testByte
  mov qword ptr [rsp + 030h], rbx                                ; move copy of iterator's type out of rbx
  mov rbx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rbx                                                        ; adjust to the relative start of that type's entry in the type table
  mov rsi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rsi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$iterator$AfterGCIncref$3                              ; if not a GarbageCollectable, skip incref
    inc qword ptr [r14]                                          ; increment reference count of copy of iterator
  func$iterator$AfterGCIncref$3:                                 ; after GarbageCollectable incref
  mov rdi, r14                                                   ; force cast of copy of iterator to Integer
  mov r12, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov r13, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp r13, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$iterator$Gcblockdata$TypeMatch$2                      ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 028h], r15                              ; move copy of iterator's type out of r15
    mov r15, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r15                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r10, qword ptr [rsp + 030h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 030h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rax, qword ptr [rsp + 030h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 030h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r15, qword ptr [rsp + 028h]                              ; restoring slots to previous scope state
  func$iterator$Gcblockdata$TypeMatch$2:                         ; after block
  mov rbx, rdi                                                   ; assign value of force cast of copy of iterator to Integer to value of + operator result
  add rbx, r12                                                   ; compute (force cast of copy of iterator to Integer) + (copy of _gcBlockData) (result in + operator result)
  mov r10, rbx                                                   ; assign value of + operator result to value of + operator result
  add r10, 010h                                                  ; compute (+ operator result) + (16 /* 0x10 */) (result in + operator result)
  ; Call __writeToAddress with 2 arguments
  mov qword ptr [r10], 01fh                                      ; __writeToAddress
  ; Line 340: __writeToAddress(iterator __as__ Integer + _gcBlockData + 24 /* ...
  mov rdi, qword ptr [rsp + 058h]                                ; make a copy of iterator's value in case it changes before we use it
  mov r12, qword ptr [rsp + 040h]                                ; make a copy of iterator's type in case it changes before we use it
  ; increment reference count for copy of iterator if necessary
  mov r13, r12                                                   ; store copy of iterator's type in testByte value slot
  mov rax, r13                                                   ; move testByte to testByte
  mov qword ptr [rsp + 028h], r14                                ; move copy of iterator's value out of r14
  mov r14, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r14                                                        ; adjust to the relative start of that type's entry in the type table
  mov qword ptr [rsp + 020h], r15                                ; move copy of iterator's type out of r15
  mov r15, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r15                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$iterator$AfterGCIncref$4                              ; if not a GarbageCollectable, skip incref
    inc qword ptr [rdi]                                          ; increment reference count of copy of iterator
  func$iterator$AfterGCIncref$4:                                 ; after GarbageCollectable incref
  mov r10, rdi                                                   ; force cast of copy of iterator to Integer
  mov rbx, qword ptr _gcBlockDataValue                           ; make a copy of _gcBlockData's value in case it changes before we use it
  mov rsi, qword ptr _gcBlockDataType                            ; make a copy of _gcBlockData's type in case it changes before we use it
  cmp rsi, 000h                                                  ; compare type of copy of _gcBlockData to <sentinel>
  jne func$iterator$Gcblockdata$TypeMatch$3                      ; skip next block if copy of _gcBlockData is not sentinel
    ; Error handling block for _gcBlockData
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 018h], r12                              ; move copy of iterator's type out of r12
    mov r12, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r12                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r13, qword ptr [rsp + 020h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 040h], r10                              ; move force cast of copy of iterator to Integer's value out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rax, qword ptr [rsp + 020h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r12, qword ptr [rsp + 018h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 000h]                              ; restoring slots to previous scope state
  func$iterator$Gcblockdata$TypeMatch$3:                         ; after block
  mov r14, r10                                                   ; assign value of force cast of copy of iterator to Integer to value of + operator result
  add r14, rbx                                                   ; compute (force cast of copy of iterator to Integer) + (copy of _gcBlockData) (result in + operator result)
  mov r13, r14                                                   ; assign value of + operator result to value of + operator result
  add r13, 018h                                                  ; compute (+ operator result) + (24 /* 0x18 */) (result in + operator result)
  mov r10, 001h                                                  ; assign value of 1 to value of - unary operator result
  neg r10                                                        ; - unary operator
  ; Call __writeToAddress with 2 arguments
  mov qword ptr [r13], r10                                       ; __writeToAddress
  ; Line 341: _gcLocked -= 1;
  mov qword ptr [rsp + 018h], r12                                ; move copy of iterator's type out of r12
  mov r12, qword ptr _gcLockedValue                              ; make a copy of _gcLocked's value in case it changes before we use it
  mov r13, qword ptr _gcLockedType                               ; make a copy of _gcLocked's type in case it changes before we use it
  cmp r13, 000h                                                  ; compare type of copy of _gcLocked to <sentinel>
  jne func$iterator$copyOfGclocked$TypeMatch$1                   ; skip next block if copy of _gcLocked is not sentinel
    ; Error handling block for copy of _gcLocked
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rax, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rax                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 020h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 020h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$iterator$copyOfGclocked$TypeMatch$1:                      ; after block
  mov qword ptr [rsp + 010h], rdi                                ; move copy of iterator's value out of rdi
  mov rdi, r12                                                   ; assign value of copy of _gcLocked to value of -= operator result
  sub rdi, 001h                                                  ; -= operator
  mov qword ptr _gcLockedValue, rdi                              ; store value
  mov qword ptr _gcLockedType, 01fh                              ; store type (Integer'31)
  ; Line 342: return iterator;
  mov r14, qword ptr [rsp + 058h]                                ; make a copy of iterator's value in case it changes before we use it
  mov r15, qword ptr [rsp + 040h]                                ; make a copy of iterator's type in case it changes before we use it
  ; increment reference count for copy of iterator if necessary
  mov r10, r15                                                   ; store copy of iterator's type in testByte value slot
  mov rax, r10                                                   ; move testByte to testByte
  mov rbx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rbx                                                        ; adjust to the relative start of that type's entry in the type table
  mov rsi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rsi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$iterator$AfterGCIncref$5                              ; if not a GarbageCollectable, skip incref
    inc qword ptr [r14]                                          ; increment reference count of copy of iterator
  func$iterator$AfterGCIncref$5:                                 ; after GarbageCollectable incref
  cmp r15, 000h                                                  ; compare type of copy of iterator to <sentinel>
  jne func$iterator$iteratorReturnValue$TypeMatch                ; skip next block if copy of iterator is not sentinel
    ; Error handling block for iterator return value
    int 3                                                        ; call debugger
    ;  - print(returnValueTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset returnValueTypeCheckFailureMessage           ; reading returnValueTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (returnValueTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$iterator$iteratorReturnValue$TypeMatch:                   ; after block
  mov qword ptr [rsp + 008h], r15                                ; move copy of iterator's type out of r15
  mov r15, qword ptr [rbp + 030h]                                ; get pointer to return value of iterator into register to dereference it
  mov qword ptr [r15], r14                                       ; iterator return value
  mov qword ptr [rsp + 000h], r14                                ; move copy of iterator's value out of r14
  mov r14, qword ptr [rsp + 008h]                                ; reading type of copy of iterator
  mov r10, qword ptr [rbp + 028h]                                ; get pointer to return value type of iterator into register to dereference it
  mov qword ptr [r10], r14                                       ; type of iterator return value
  ; increment reference count for copy of iterator if necessary
  mov rax, r14                                                   ; store copy of iterator's type in testByte value slot
  mov rbx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rbx                                                        ; adjust to the relative start of that type's entry in the type table
  mov rsi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rsi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 007h                                       ; check that possibly GarbageCollectable value is GarbageCollectable
  jnc func$iterator$AfterGCIncref$6                              ; if not a GarbageCollectable, skip incref
    mov rdi, qword ptr [rsp + 000h]                              ; read slot into register for dereferencing
    inc qword ptr [rdi]                                          ; increment reference count of copy of iterator
    mov qword ptr [rsp + 000h], rdi                              ; restoring slots to previous scope state
  func$iterator$AfterGCIncref$6:                                 ; after GarbageCollectable incref
  ; Decrement reference count for copy of iterator (static type: WhateverIterator'41) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 050h]                                ; arg #2: copy of iterator's type
  mov rcx, qword ptr [rsp + 058h]                                ; arg #1: copy of iterator's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of iterator (static type: WhateverIterator'41) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 038h]                                ; arg #2: copy of iterator's type
  mov rcx, qword ptr [rsp + 030h]                                ; arg #1: copy of iterator's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for iterator variable (static type: WhateverIterator'41) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 060h]                                ; arg #2: iterator variable's type
  mov rcx, qword ptr [rsp + 078h]                                ; arg #1: iterator variable's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of iterator (static type: WhateverIterator'41) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 068h]                                ; arg #2: copy of iterator's type
  mov rcx, qword ptr [rsp + 070h]                                ; arg #1: copy of iterator's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of iterator (static type: WhateverIterator'41) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, r14                                                   ; arg #2: copy of iterator's type
  mov rcx, qword ptr [rsp + 020h]                                ; arg #1: copy of iterator's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of iterator (static type: WhateverIterator'41) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 040h]                                ; arg #2: copy of iterator's type
  mov rcx, qword ptr [rsp + 048h]                                ; arg #1: copy of iterator's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for _constructor return value (static type: GarbageCollectable'36) via decrefMaybeGC
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 080h]                                ; arg #2: _constructor return value's type
  mov rcx, qword ptr [rsp + 088h]                                ; arg #1: _constructor return value's value
  call decrefMaybeGC                                             ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 078h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; _stringByteLength
dq func$_stringByteLength$annotation
func$_stringByteLength:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 020h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 060h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 001h                                                  ; compare parameter count of _stringByteLength to 1 (integer)
  je func$_stringByteLength$parameterCountCheck$continuation     ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 020h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 020h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_stringByteLength$parameterCountCheck$continuation:       ; end of parameter count check
  ; Check type of parameter 0, data (expecting String)
  mov rsi, qword ptr [rbp + 038h]                                ; store data's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 003h                                       ; check that data is String
  jc func$_stringByteLength$data$TypeMatch                       ; skip next block if the type matches
    ; Error handling block for data
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 020h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 020h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_stringByteLength$data$TypeMatch:                         ; after block
  ; Line 391: Integer pointer = data __as__ Integer;
  mov r10, qword ptr [rbp + 040h]                                ; force cast of data to Integer
  mov rdi, r10                                                   ; value initialization of variable declaration for pointer variable (force cast of data to Integer)
  mov r12, 01fh                                                  ; type initialization of variable declaration for pointer variable (Integer'31)
  ; Line 392: return __readFromAddress(pointer + 8);
  mov r13, rdi                                                   ; make a copy of pointer's value in case it changes before we use it
  mov r14, r12                                                   ; make a copy of pointer's type in case it changes before we use it
  cmp r14, 000h                                                  ; compare type of copy of pointer to <sentinel>
  jne func$_stringByteLength$pointer$TypeMatch                   ; skip next block if copy of pointer is not sentinel
    ; Error handling block for pointer
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r15, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r15                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r10, qword ptr [rsp + 020h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 020h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 020h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 020h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_stringByteLength$pointer$TypeMatch:                      ; after block
  mov r12, r13                                                   ; assign value of copy of pointer to value of + operator result
  add r12, 008h                                                  ; compute (copy of pointer) + (8) (result in + operator result)
  ; Call __readFromAddress with 1 arguments
  mov r10, qword ptr [r12]                                       ; dereference first argument of __readFromAddress
  mov rdi, qword ptr [rbp + 030h]                                ; get pointer to return value of _stringByteLength into register to dereference it
  mov qword ptr [rdi], r10                                       ; _stringByteLength return value
  mov r12, qword ptr [rbp + 028h]                                ; get pointer to return value type of _stringByteLength into register to dereference it
  mov qword ptr [r12], 01fh                                      ; type of _stringByteLength return value (Integer'31)
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 020h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; concat
dq func$concat$annotation
func$concat:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 0a8h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 0e8h]                                ; set up frame pointer
  ; Varargs parameter type check; expecting parameters to be String
  lea r10, qword ptr [rbp + 038h]                                ; get base address of varargs, where loop will start
  mov rax, rcx                                                   ; assign value of parameter count of concat to value of pointer to last argument
  mov rbx, 010h                                                  ; read operand of mul (10 (integer)) 
  mul rbx                                                        ; end of loop is the number of arguments times the width of each argument (010h)...
  add rax, r10                                                   ; ...offset from the initial index (result in pointer to last argument)
  func$concat$varargTypeChecks$Loop:                             ; top of loop
    mov qword ptr [rsp + 098h], 000h                             ; move pointer to indexth argument's type into a mutable location
    cmp r10, rax                                                 ; compare pointer to indexth argument to pointer to last argument
    je func$concat$varargTypeChecks$TypesAllMatch                ; we have type-checked all the arguments
    mov rsi, qword ptr [r10]                                     ; load type of indexth argument into indexth argument
    mov rdi, rsi                                                 ; store indexth argument's type in testByte value slot
    mov qword ptr [rsp + 090h], rax                              ; move pointer to last argument's value out of rax
    mov rax, rdi                                                 ; move testByte to testByte
    mov r12, 002h                                                ; read operand of mul (type table width in bytes) 
    mul r12                                                      ; adjust to the relative start of that type's entry in the type table
    mov r13, offset typeTable                                    ; read second operand of + (type table pointer)
    add rax, r13                                                 ; finally offset all of that by the start of the type table itself (result in testByte)
    bt qword ptr [rax], 003h                                     ; check that vararg types is String
    jc func$concat$varargTypeChecks$TypeMatch                    ; skip next block if the type matches
      ; Error handling block for vararg types
      int 3                                                      ; call debugger
      ;  - print(parameterTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r14, offset parameterTypeCheckFailureMessage           ; reading parameterTypeCheckFailureMessage for push
      push r14                                                   ; value of argument #1 (parameterTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r15, qword ptr [rsp + 098h]                            ; load address of return value's value
      push r15                                                   ; internal argument 6: pointer to return value slot's value
      lea r15, qword ptr [rsp + 098h]                            ; load address of return value's type
      push r15                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov qword ptr [rsp + 0b8h], rcx                            ; move parameter count of concat's value out of rcx
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 0b0h], r10                            ; move pointer to indexth argument's value out of r10
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r10, qword ptr [rsp + 098h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 098h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov r10, qword ptr [rsp + 070h]                            ; restoring slots to previous scope state
      mov rcx, qword ptr [rsp + 078h]                            ; restoring slots to previous scope state
    func$concat$varargTypeChecks$TypeMatch:                      ; after block
    add r10, 010h                                                ; next argument (result in pointer to indexth argument)
    mov rax, qword ptr [rsp + 090h]                              ; restoring slots to previous scope state
    jmp func$concat$varargTypeChecks$Loop                        ; return to top of loop
    func$concat$varargTypeChecks$TypesAllMatch:                  ; after loop
    mov rax, qword ptr [rsp + 090h]                              ; restoring slots to previous scope state
  ; Line 396: Integer length = 0;
  mov rax, 000h                                                  ; value initialization of variable declaration for length variable (0)
  mov r12, 01fh                                                  ; type initialization of variable declaration for length variable (Integer'31)
  ; Line 397: Integer index = 0;
  mov r10, 000h                                                  ; value initialization of variable declaration for index variable (0)
  mov rbx, 01fh                                                  ; type initialization of variable declaration for index variable (Integer'31)
  func$concat$while$top:                                         ; top of while
    mov rsi, r10                                                 ; make a copy of index's value in case it changes before we use it
    mov rdi, rbx                                                 ; make a copy of index's type in case it changes before we use it
    ; Call len with 1 arguments
    cmp rdi, 000h                                                ; compare type of copy of index to <sentinel>
    jne func$concat$while$index$TypeMatch                        ; skip next block if copy of index is not sentinel
      ; Error handling block for index
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r14, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push r14                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r15, qword ptr [rsp + 0a8h]                            ; load address of return value's value
      push r15                                                   ; internal argument 6: pointer to return value slot's value
      lea r15, qword ptr [rsp + 0a8h]                            ; load address of return value's type
      push r15                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov qword ptr [rsp + 0c8h], rcx                            ; move parameter count of concat's value out of rcx
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 0c0h], r10                            ; move index variable's value out of r10
      mov qword ptr [rsp + 0b8h], rax                            ; move length variable's value out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r10, qword ptr [rsp + 0a8h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 0a8h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 078h]                            ; restoring slots to previous scope state
      mov rcx, qword ptr [rsp + 088h]                            ; restoring slots to previous scope state
      mov r10, qword ptr [rsp + 080h]                            ; restoring slots to previous scope state
    func$concat$while$index$TypeMatch:                           ; after block
    mov qword ptr [rsp + 098h], rax                              ; move length variable's value out of rax
    xor rax, rax                                                 ; clear < operator result
    cmp rsi, rcx                                                 ; compare copy of index with parameter count of concat
    setl al                                                      ; store result in < operator result
    cmp rax, 000h                                                ; compare < operator result to false
    jne func$concat$while$body                                   ; while condition
    mov rax, qword ptr [rsp + 098h]                              ; restoring slots to previous scope state
    jmp func$concat$while$bottom                                 ; break out of while
    func$concat$while$body:                                      ; start of while
    ; Line 399: length += _stringByteLength(arguments[index]);
    mov qword ptr [rsp + 090h], r12                              ; move length variable's type out of r12
    mov r12, qword ptr [rsp + 098h]                              ; make a copy of length's value in case it changes before we use it
    mov r13, qword ptr [rsp + 090h]                              ; make a copy of length's type in case it changes before we use it
    mov qword ptr [rsp + 088h], rbx                              ; move index variable's type out of rbx
    mov rbx, r10                                                 ; make a copy of index's value in case it changes before we use it
    mov rsi, qword ptr [rsp + 088h]                              ; make a copy of index's type in case it changes before we use it
    cmp rsi, 000h                                                ; compare type of copy of index to <sentinel>
    jne func$concat$while$copyOfIndex$TypeMatch                  ; skip next block if copy of index is not sentinel
      ; Error handling block for copy of index
      int 3                                                      ; call debugger
      ;  - print(subscriptTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rdi, offset subscriptTypeCheckFailureMessage           ; reading subscriptTypeCheckFailureMessage for push
      push rdi                                                   ; value of argument #1 (subscriptTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rax, qword ptr [rsp + 090h]                            ; load address of return value's value
      push rax                                                   ; internal argument 6: pointer to return value slot's value
      lea rax, qword ptr [rsp + 090h]                            ; load address of return value's type
      push rax                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov qword ptr [rsp + 0b0h], rcx                            ; move parameter count of concat's value out of rcx
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 0a8h], r10                            ; move index variable's value out of r10
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      mov qword ptr [rsp + 088h], r12                            ; move copy of length's value out of r12
      lea r12, qword ptr [rsp + 090h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 078h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rcx, qword ptr [rsp + 070h]                            ; restoring slots to previous scope state
      mov r10, qword ptr [rsp + 068h]                            ; restoring slots to previous scope state
      mov r12, qword ptr [rsp + 078h]                            ; restoring slots to previous scope state
    func$concat$while$copyOfIndex$TypeMatch:                     ; after block
    mov qword ptr [rsp + 080h], r13                              ; move copy of length's type out of r13
    lea r13, qword ptr [rbp + 038h]                              ; base address of varargs
    cmp rbx, rcx                                                 ; compare copy of index to parameter count of concat
    jge func$concat$while$subscript$boundsError                  ; index out of range (too high)
    cmp rbx, 000h                                                ; compare copy of index to 0 (integer)
    jge func$concat$while$subscript$inBounds                     ; index not out of range (not negative)
    func$concat$while$subscript$boundsError:                     ; invalid index
      ; Error handling block for subscript bounds error
      int 3                                                      ; call debugger
      ;  - print(boundsFailureMessage)
      ; Call __print with 1 arguments
      mov r14, offset boundsFailureMessage                       ; reading boundsFailureMessage for push
      push r14                                                   ; value of argument #1 (boundsFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r15, qword ptr [rsp + 088h]                            ; load address of return value's value
      push r15                                                   ; internal argument 6: pointer to return value slot's value
      lea r15, qword ptr [rsp + 088h]                            ; load address of return value's type
      push r15                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov qword ptr [rsp + 0a8h], rcx                            ; move parameter count of concat's value out of rcx
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 0a0h], r10                            ; move index variable's value out of r10
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r10, qword ptr [rsp + 088h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 088h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov r10, qword ptr [rsp + 060h]                            ; restoring slots to previous scope state
      mov rcx, qword ptr [rsp + 068h]                            ; restoring slots to previous scope state
    func$concat$while$subscript$inBounds:                        ; valid index
    mov qword ptr [rsp + 078h], rbx                              ; move copy of index's value out of rbx
    mov rbx, qword ptr [rsp + 078h]                              ; assign value of copy of index to value of index into list * 16
    shl rbx, 004h                                                ; multiply by 8*2
    mov rsi, r13                                                 ; assign value of base address of varargs to value of pointer to arguments[copy of index]
    add rsi, rbx                                                 ; compute address of specified list entry (result in pointer to arguments[copy of index])
    mov rdi, qword ptr [rsi + 008h]                              ; value of arguments[copy of index]
    mov rax, qword ptr [rsi]                                     ; type of arguments[copy of index]
    ; increment reference count for copy of arguments[copy of index] if necessary
    cmp rax, 020h                                                ; compare type of copy of arguments[copy of index] to String
    jne func$concat$while$AfterStringIncref                      ; if not a String, skip incref
      mov qword ptr [rsp + 078h], r12                            ; move copy of length's value out of r12
      mov r12, qword ptr [rdi]                                   ; dereference string to get to reference count
      cmp r12, 0                                                 ; compare string reference count to 0
      jns func$concat$while$StringIncref                         ; if reference count is negative (constant strings), skip incref
      mov r12, qword ptr [rsp + 078h]                            ; restoring slots to previous scope state
      jmp func$concat$while$AfterStringIncref                    ; skip incref for string constants
      func$concat$while$StringIncref:                            ; real String
        inc qword ptr [rdi]                                      ; increment reference count of copy of arguments[copy of index]
      mov r12, qword ptr [rsp + 078h]                            ; restoring slots to previous scope state
    func$concat$while$AfterStringIncref:                         ; after String incref
    ; Call _stringByteLength with 1 arguments
    push rdi                                                     ; value of argument #1 (copy of arguments[copy of index])
    push rax                                                     ; type of argument #1
    mov qword ptr [rsp + 080h], r10                              ; move index variable's value out of r10
    lea r10, qword ptr [rsp + 088h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 080h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov qword ptr [rsp + 0a0h], rcx                              ; move parameter count of concat's value out of rcx
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 098h], rax                              ; move copy of arguments[copy of index]'s type out of rax
    call func$_stringByteLength                                  ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    cmp qword ptr [rsp + 080h], 000h                             ; compare type of copy of length to <sentinel>
    jne func$concat$while$copyOfLength$TypeMatch                 ; skip next block if copy of length is not sentinel
      ; Error handling block for copy of length
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rbx, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rbx                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rsi, qword ptr [rsp + 060h]                            ; load address of return value's value
      push rsi                                                   ; internal argument 6: pointer to return value slot's value
      lea rsi, qword ptr [rsp + 060h]                            ; load address of return value's type
      push rsi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      mov qword ptr [rsp + 058h], rdi                            ; move copy of arguments[copy of index]'s value out of rdi
      lea rdi, qword ptr [rsp + 060h]                            ; load address of return value's value
      push rdi                                                   ; internal argument 6: pointer to return value slot's value
      lea rdi, qword ptr [rsp + 058h]                            ; load address of return value's type
      push rdi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rdi, qword ptr [rsp + 048h]                            ; restoring slots to previous scope state
    func$concat$while$copyOfLength$TypeMatch:                    ; after block
    cmp qword ptr [rsp + 068h], 000h                             ; compare type of _stringByteLength return value to <sentinel>
    jne func$concat$while$StringbytelengthReturnValue$TypeMatch  ; skip next block if _stringByteLength return value is not sentinel
      ; Error handling block for _stringByteLength return value
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rax, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rax                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      mov qword ptr [rsp + 058h], r12                            ; move copy of length's value out of r12
      lea r12, qword ptr [rsp + 060h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 058h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r13, qword ptr [rsp + 060h]                            ; load address of return value's value
      push r13                                                   ; internal argument 6: pointer to return value slot's value
      lea r13, qword ptr [rsp + 058h]                            ; load address of return value's type
      push r13                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov r12, qword ptr [rsp + 048h]                            ; restoring slots to previous scope state
    func$concat$while$StringbytelengthReturnValue$TypeMatch:     ; after block
    mov r14, r12                                                 ; assign value of copy of length to value of += operator result
    add r14, qword ptr [rsp + 078h]                              ; += operator
    mov qword ptr [rsp + 098h], r14                              ; store value
    mov qword ptr [rsp + 090h], 01fh                             ; store type (Integer'31)
    ; Line 400: index += 1;
    mov rsi, qword ptr [rsp + 070h]                              ; make a copy of index's value in case it changes before we use it
    mov qword ptr [rsp + 080h], rdi                              ; move copy of arguments[copy of index]'s value out of rdi
    mov rdi, qword ptr [rsp + 088h]                              ; make a copy of index's type in case it changes before we use it
    cmp rdi, 000h                                                ; compare type of copy of index to <sentinel>
    jne func$concat$while$copyOfIndex$TypeMatch$1                ; skip next block if copy of index is not sentinel
      ; Error handling block for copy of index
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rax, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rax                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r12, qword ptr [rsp + 088h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 080h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r13, qword ptr [rsp + 088h]                            ; load address of return value's value
      push r13                                                   ; internal argument 6: pointer to return value slot's value
      lea r13, qword ptr [rsp + 080h]                            ; load address of return value's type
      push r13                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
    func$concat$while$copyOfIndex$TypeMatch$1:                   ; after block
    mov rbx, rsi                                                 ; assign value of copy of index to value of += operator result
    add rbx, 001h                                                ; += operator
    mov qword ptr [rsp + 070h], rbx                              ; store value
    mov qword ptr [rsp + 088h], 01fh                             ; store type (Integer'31)
    ; Decrement reference count for copy of arguments[copy of index] (static type: String'32) via decrefMaybeString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, qword ptr [rsp + 078h]                              ; arg #2: copy of arguments[copy of index]'s type
    mov rcx, qword ptr [rsp + 0a0h]                              ; arg #1: copy of arguments[copy of index]'s value
    call decrefMaybeString                                       ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    mov rax, qword ptr [rsp + 098h]                              ; restoring slots to previous scope state
    mov rbx, qword ptr [rsp + 088h]                              ; restoring slots to previous scope state
    mov rcx, qword ptr [rsp + 060h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 070h]                              ; restoring slots to previous scope state
    mov r12, qword ptr [rsp + 090h]                              ; restoring slots to previous scope state
    jmp func$concat$while$top                                    ; return to top of while
  func$concat$while$bottom:                                      ; bottom of while
  ; Line 402: assert(length >= 0, 'negative length detected');
  mov qword ptr [rsp + 098h], r12                                ; move length variable's type out of r12
  mov r12, rax                                                   ; make a copy of length's value in case it changes before we use it
  mov r13, qword ptr [rsp + 098h]                                ; make a copy of length's type in case it changes before we use it
  cmp r13, 000h                                                  ; compare type of copy of length to <sentinel>
  jne func$concat$length$TypeMatch                               ; skip next block if copy of length is not sentinel
    ; Error handling block for length
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r14, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r14                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r15, qword ptr [rsp + 0a0h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 0a0h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov qword ptr [rsp + 0c0h], rcx                              ; move parameter count of concat's value out of rcx
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 0b8h], r10                              ; move index variable's value out of r10
    mov qword ptr [rsp + 0b0h], rax                              ; move length variable's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 0a0h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 0a0h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 070h]                              ; restoring slots to previous scope state
    mov rcx, qword ptr [rsp + 080h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 078h]                              ; restoring slots to previous scope state
  func$concat$length$TypeMatch:                                  ; after block
  mov qword ptr [rsp + 090h], rax                                ; move length variable's value out of rax
  xor rax, rax                                                   ; clear >= operator result
  cmp r12, 000h                                                  ; compare copy of length with 0
  setge al                                                       ; store result in >= operator result
  ; Call assert with 2 arguments
  mov r15, offset string$14                                      ; reading string for push
  push r15                                                       ; value of argument #2 (string)
  push 020h                                                      ; type of argument #2 (String'32)
  push rax                                                       ; value of argument #1 (>= operator result)
  push 01eh                                                      ; type of argument #1 (Boolean'30)
  mov qword ptr [rsp + 0a0h], r10                                ; move index variable's value out of r10
  lea r10, qword ptr [rsp + 0a8h]                                ; load address of return value's value
  push r10                                                       ; internal argument 6: pointer to return value slot's value
  lea r10, qword ptr [rsp + 0a0h]                                ; load address of return value's type
  push r10                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov qword ptr [rsp + 0c0h], rcx                                ; move parameter count of concat's value out of rcx
  mov rcx, 002h                                                  ; internal argument 1: number of actual arguments
  call func$assert                                               ; jump to subroutine
  add rsp, 050h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 403: if (length >= 2147483648 /* 0x80000000 */) { ...
  mov qword ptr [rsp + 088h], rbx                                ; move index variable's type out of rbx
  mov rbx, qword ptr [rsp + 090h]                                ; make a copy of length's value in case it changes before we use it
  mov rsi, qword ptr [rsp + 098h]                                ; make a copy of length's type in case it changes before we use it
  cmp rsi, 000h                                                  ; compare type of copy of length to <sentinel>
  jne func$concat$length$TypeMatch$1                             ; skip next block if copy of length is not sentinel
    ; Error handling block for length
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 088h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 080h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r12, qword ptr [rsp + 088h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 080h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$concat$length$TypeMatch$1:                                ; after block
  mov r10, 080000000h                                            ; reading second value to compare (<ImmediateIntegerSlot:Integer'31 ("2147483648 /* 0x80000000 */")>)
  xor rsi, rsi                                                   ; clear >= operator result
  cmp rbx, r10                                                   ; compare copy of length with 2147483648 /* 0x80000000 */
  setge sil                                                      ; store result in >= operator result
  cmp rsi, 000h                                                  ; compare >= operator result to false
  je func$concat$if$continuation                                 ; length >= 2147483648 /* 0x80000000 */
    ; Line 404: __print('absurd length detected (as exit code)\n');
    ; Call __print with 1 arguments
    mov r12, offset string$15                                    ; reading string for push
    push r12                                                     ; value of argument #1 (string)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r13, qword ptr [rsp + 088h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 080h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ; Line 405: exit(length);
    mov r14, qword ptr [rsp + 090h]                              ; make a copy of length's value in case it changes before we use it
    mov r15, qword ptr [rsp + 098h]                              ; make a copy of length's type in case it changes before we use it
    ; Call exit with 1 arguments
    push r14                                                     ; value of argument #1 (copy of length)
    push r15                                                     ; type of argument #1
    lea rdi, qword ptr [rsp + 088h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 080h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$concat$if$continuation:                                   ; end of if
  ; Line 407: Integer resultPointer = _alloc(16 /* 0x10 */ + length);
  mov rax, qword ptr [rsp + 090h]                                ; make a copy of length's value in case it changes before we use it
  mov r12, qword ptr [rsp + 098h]                                ; make a copy of length's type in case it changes before we use it
  cmp r12, 000h                                                  ; compare type of copy of length to <sentinel>
  jne func$concat$length$TypeMatch$2                             ; skip next block if copy of length is not sentinel
    ; Error handling block for length
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rsi, qword ptr [rsp + 088h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 080h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 0a0h], rax                              ; move copy of length's value out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 088h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 080h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 060h]                              ; restoring slots to previous scope state
  func$concat$length$TypeMatch$2:                                ; after block
  mov rdi, 010h                                                  ; assign value of 16 /* 0x10 */ to value of + operator result
  add rdi, rax                                                   ; compute (16 /* 0x10 */) + (copy of length) (result in + operator result)
  ; Call _alloc with 1 arguments
  push rdi                                                       ; value of argument #1 (+ operator result)
  push 01fh                                                      ; type of argument #1 (Integer'31)
  lea r14, qword ptr [rsp + 088h]                                ; load address of return value's value
  push r14                                                       ; internal argument 6: pointer to return value slot's value
  lea r14, qword ptr [rsp + 080h]                                ; load address of return value's type
  push r14                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call func$_alloc                                               ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  cmp qword ptr [rsp + 068h], 000h                               ; compare type of _alloc return value to <sentinel>
  jne func$concat$AllocReturnValue$TypeMatch                     ; skip next block if _alloc return value is not sentinel
    ; Error handling block for _alloc return value
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r15, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push r15                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r10, qword ptr [rsp + 070h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 070h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rsi, qword ptr [rsp + 070h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 070h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$concat$AllocReturnValue$TypeMatch:                        ; after block
  mov rbx, qword ptr [rsp + 078h]                                ; value initialization of variable declaration for resultPointer variable (_alloc return value)
  mov rdi, qword ptr [rsp + 068h]                                ; type initialization of variable declaration for resultPointer variable
  ; Line 408: __writeToAddress(resultPointer, 0);
  mov rax, rbx                                                   ; make a copy of resultPointer's value in case it changes before we use it
  mov r12, rdi                                                   ; make a copy of resultPointer's type in case it changes before we use it
  ; Call __writeToAddress with 2 arguments
  mov qword ptr [rax], 000h                                      ; __writeToAddress
  ; Line 409: __writeToAddress(resultPointer + 8, length);
  mov r10, rbx                                                   ; make a copy of resultPointer's value in case it changes before we use it
  mov rsi, rdi                                                   ; make a copy of resultPointer's type in case it changes before we use it
  cmp rsi, 000h                                                  ; compare type of copy of resultPointer to <sentinel>
  jne func$concat$resultpointer$TypeMatch                        ; skip next block if copy of resultPointer is not sentinel
    ; Error handling block for resultPointer
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov qword ptr [rsp + 078h], rbx                              ; move resultPointer variable's value out of rbx
    mov rbx, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rbx                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    mov qword ptr [rsp + 070h], rdi                              ; move resultPointer variable's type out of rdi
    lea rdi, qword ptr [rsp + 078h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 070h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 090h], r10                              ; move copy of resultPointer's value out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rax, qword ptr [rsp + 078h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 070h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rbx, qword ptr [rsp + 078h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 050h]                              ; restoring slots to previous scope state
    mov rdi, qword ptr [rsp + 060h]                              ; restoring slots to previous scope state
  func$concat$resultpointer$TypeMatch:                           ; after block
  mov r15, r10                                                   ; assign value of copy of resultPointer to value of + operator result
  add r15, 008h                                                  ; compute (copy of resultPointer) + (8) (result in + operator result)
  mov r10, qword ptr [rsp + 090h]                                ; make a copy of length's value in case it changes before we use it
  mov rsi, qword ptr [rsp + 098h]                                ; make a copy of length's type in case it changes before we use it
  ; Call __writeToAddress with 2 arguments
  mov qword ptr [r15], r10                                       ; __writeToAddress
  ; Line 410: Integer cursor = resultPointer + 16 /* 0x10 */;
  mov r12, rbx                                                   ; make a copy of resultPointer's value in case it changes before we use it
  mov r13, rdi                                                   ; make a copy of resultPointer's type in case it changes before we use it
  cmp r13, 000h                                                  ; compare type of copy of resultPointer to <sentinel>
  jne func$concat$resultpointer$TypeMatch$1                      ; skip next block if copy of resultPointer is not sentinel
    ; Error handling block for resultPointer
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r14, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r14                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r15, qword ptr [rsp + 0a8h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 0a8h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 0a8h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 0a8h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$concat$resultpointer$TypeMatch$1:                         ; after block
  mov rax, r12                                                   ; assign value of copy of resultPointer to value of + operator result
  add rax, 010h                                                  ; compute (copy of resultPointer) + (16 /* 0x10 */) (result in + operator result)
  mov r15, rax                                                   ; value initialization of variable declaration for cursor variable (+ operator result)
  mov r10, 01fh                                                  ; type initialization of variable declaration for cursor variable (Integer'31)
  ; Line 411: index = 0;
  mov qword ptr [rsp + 080h], 000h                               ; store value
  mov qword ptr [rsp + 088h], 01fh                               ; store type (Integer'31)
  func$concat$while$top$1:                                       ; top of while
    mov rax, qword ptr [rsp + 080h]                              ; make a copy of index's value in case it changes before we use it
    mov r12, qword ptr [rsp + 088h]                              ; make a copy of index's type in case it changes before we use it
    ; Call len with 1 arguments
    cmp r12, 000h                                                ; compare type of copy of index to <sentinel>
    jne func$concat$while$index$TypeMatch$1                      ; skip next block if copy of index is not sentinel
      ; Error handling block for index
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov qword ptr [rsp + 098h], r10                            ; move cursor variable's type out of r10
      mov r10, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push r10                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rsi, qword ptr [rsp + 0a0h]                            ; load address of return value's value
      push rsi                                                   ; internal argument 6: pointer to return value slot's value
      lea rsi, qword ptr [rsp + 090h]                            ; load address of return value's type
      push rsi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 0a8h], rax                            ; move copy of index's value out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      mov qword ptr [rsp + 088h], rbx                            ; move resultPointer variable's value out of rbx
      lea rbx, qword ptr [rsp + 0a0h]                            ; load address of return value's value
      push rbx                                                   ; internal argument 6: pointer to return value slot's value
      lea rbx, qword ptr [rsp + 078h]                            ; load address of return value's type
      push rbx                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 068h]                            ; restoring slots to previous scope state
      mov rbx, qword ptr [rsp + 078h]                            ; restoring slots to previous scope state
      mov r10, qword ptr [rsp + 098h]                            ; restoring slots to previous scope state
    func$concat$while$index$TypeMatch$1:                         ; after block
    xor r13, r13                                                 ; clear < operator result
    cmp rax, qword ptr [rsp + 070h]                              ; compare copy of index with parameter count of concat
    setl r13b                                                    ; store result in < operator result
    cmp r13, 000h                                                ; compare < operator result to false
    jne func$concat$while$body$1                                 ; while condition
    jmp func$concat$while$bottom$1                               ; break out of while
    func$concat$while$body$1:                                    ; start of while
    ; Line 413: String segment = arguments[index];
    mov rsi, qword ptr [rsp + 080h]                              ; make a copy of index's value in case it changes before we use it
    mov qword ptr [rsp + 098h], rbx                              ; move resultPointer variable's value out of rbx
    mov rbx, qword ptr [rsp + 088h]                              ; make a copy of index's type in case it changes before we use it
    cmp rbx, 000h                                                ; compare type of copy of index to <sentinel>
    jne func$concat$while$copyOfIndex$TypeMatch$2                ; skip next block if copy of index is not sentinel
      ; Error handling block for copy of index
      int 3                                                      ; call debugger
      ;  - print(subscriptTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov qword ptr [rsp + 090h], rdi                            ; move resultPointer variable's type out of rdi
      mov rdi, offset subscriptTypeCheckFailureMessage           ; reading subscriptTypeCheckFailureMessage for push
      push rdi                                                   ; value of argument #1 (subscriptTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rax, qword ptr [rsp + 088h]                            ; load address of return value's value
      push rax                                                   ; internal argument 6: pointer to return value slot's value
      lea rax, qword ptr [rsp + 080h]                            ; load address of return value's type
      push rax                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 0a0h], r10                            ; move cursor variable's type out of r10
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r12, qword ptr [rsp + 088h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 080h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov r10, qword ptr [rsp + 060h]                            ; restoring slots to previous scope state
      mov rdi, qword ptr [rsp + 090h]                            ; restoring slots to previous scope state
    func$concat$while$copyOfIndex$TypeMatch$2:                   ; after block
    lea r13, qword ptr [rbp + 038h]                              ; base address of varargs
    cmp rsi, qword ptr [rsp + 070h]                              ; compare copy of index to parameter count of concat
    jge func$concat$while$subscript$boundsError$1                ; index out of range (too high)
    cmp rsi, 000h                                                ; compare copy of index to 0 (integer)
    jge func$concat$while$subscript$inBounds$1                   ; index not out of range (not negative)
    func$concat$while$subscript$boundsError$1:                   ; invalid index
      ; Error handling block for subscript bounds error
      int 3                                                      ; call debugger
      ;  - print(boundsFailureMessage)
      ; Call __print with 1 arguments
      mov r14, offset boundsFailureMessage                       ; reading boundsFailureMessage for push
      push r14                                                   ; value of argument #1 (boundsFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      mov qword ptr [rsp + 088h], r15                            ; move cursor variable's value out of r15
      lea r15, qword ptr [rsp + 0a0h]                            ; load address of return value's value
      push r15                                                   ; internal argument 6: pointer to return value slot's value
      lea r15, qword ptr [rsp + 080h]                            ; load address of return value's type
      push r15                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 0a0h], r10                            ; move cursor variable's type out of r10
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r10, qword ptr [rsp + 0a0h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 080h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov r15, qword ptr [rsp + 078h]                            ; restoring slots to previous scope state
      mov r10, qword ptr [rsp + 060h]                            ; restoring slots to previous scope state
    func$concat$while$subscript$inBounds$1:                      ; valid index
    mov qword ptr [rsp + 090h], rsi                              ; move copy of index's value out of rsi
    mov rsi, qword ptr [rsp + 090h]                              ; assign value of copy of index to value of index into list * 16
    shl rsi, 004h                                                ; multiply by 8*2
    mov rbx, r13                                                 ; assign value of base address of varargs to value of pointer to arguments[copy of index]
    add rbx, rsi                                                 ; compute address of specified list entry (result in pointer to arguments[copy of index])
    mov qword ptr [rsp + 090h], rdi                              ; move resultPointer variable's type out of rdi
    mov rdi, qword ptr [rbx + 008h]                              ; value of arguments[copy of index]
    mov rax, qword ptr [rbx]                                     ; type of arguments[copy of index]
    ; increment reference count for copy of arguments[copy of index] if necessary
    cmp rax, 020h                                                ; compare type of copy of arguments[copy of index] to String
    jne func$concat$while$AfterStringIncref$1                    ; if not a String, skip incref
      mov r12, qword ptr [rdi]                                   ; dereference string to get to reference count
      cmp r12, 0                                                 ; compare string reference count to 0
      jns func$concat$while$StringIncref$1                       ; if reference count is negative (constant strings), skip incref
      jmp func$concat$while$AfterStringIncref$1                  ; skip incref for string constants
      func$concat$while$StringIncref$1:                          ; real String
        inc qword ptr [rdi]                                      ; increment reference count of copy of arguments[copy of index]
    func$concat$while$AfterStringIncref$1:                       ; after String incref
    cmp rax, 000h                                                ; compare type of copy of arguments[copy of index] to <sentinel>
    jne func$concat$while$copyOfArgumentsCopyOfIndex$TypeMatch   ; skip next block if copy of arguments[copy of index] is not sentinel
      ; Error handling block for copy of arguments[copy of index]
      int 3                                                      ; call debugger
      ;  - print(assignmentTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r13, offset assignmentTypeCheckFailureMessage          ; reading assignmentTypeCheckFailureMessage for push
      push r13                                                   ; value of argument #1 (assignmentTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r14, qword ptr [rsp + 088h]                            ; load address of return value's value
      push r14                                                   ; internal argument 6: pointer to return value slot's value
      lea r14, qword ptr [rsp + 080h]                            ; load address of return value's type
      push r14                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 0a0h], r10                            ; move cursor variable's type out of r10
      mov qword ptr [rsp + 098h], rax                            ; move copy of arguments[copy of index]'s type out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      mov qword ptr [rsp + 078h], r15                            ; move cursor variable's value out of r15
      lea r15, qword ptr [rsp + 088h]                            ; load address of return value's value
      push r15                                                   ; internal argument 6: pointer to return value slot's value
      lea r15, qword ptr [rsp + 068h]                            ; load address of return value's type
      push r15                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 058h]                            ; restoring slots to previous scope state
      mov r15, qword ptr [rsp + 068h]                            ; restoring slots to previous scope state
      mov r10, qword ptr [rsp + 060h]                            ; restoring slots to previous scope state
    func$concat$while$copyOfArgumentsCopyOfIndex$TypeMatch:      ; after block
    mov qword ptr [rsp + 078h], r10                              ; move cursor variable's type out of r10
    mov r10, rdi                                                 ; value initialization of variable declaration for segment variable (copy of arguments[copy of index])
    mov rsi, rax                                                 ; type initialization of variable declaration for segment variable
    ; increment reference count for segment variable if necessary
    cmp rsi, 020h                                                ; compare type of segment variable to String
    jne func$concat$while$AfterStringIncref$2                    ; if not a String, skip incref
      mov rbx, qword ptr [r10]                                   ; dereference string to get to reference count
      cmp rbx, 0                                                 ; compare string reference count to 0
      jns func$concat$while$StringIncref$2                       ; if reference count is negative (constant strings), skip incref
      jmp func$concat$while$AfterStringIncref$2                  ; skip incref for string constants
      func$concat$while$StringIncref$2:                          ; real String
        inc qword ptr [r10]                                      ; increment reference count of segment variable
    func$concat$while$AfterStringIncref$2:                       ; after String incref
    ; Line 414: Integer segmentLength = _stringByteLength(segment);
    mov qword ptr [rsp + 068h], rdi                              ; move copy of arguments[copy of index]'s value out of rdi
    mov rdi, r10                                                 ; make a copy of segment's value in case it changes before we use it
    mov qword ptr [rsp + 060h], rax                              ; move copy of arguments[copy of index]'s type out of rax
    mov rax, rsi                                                 ; make a copy of segment's type in case it changes before we use it
    ; increment reference count for copy of segment if necessary
    cmp rax, 020h                                                ; compare type of copy of segment to String
    jne func$concat$while$AfterStringIncref$3                    ; if not a String, skip incref
      mov r12, qword ptr [rdi]                                   ; dereference string to get to reference count
      cmp r12, 0                                                 ; compare string reference count to 0
      jns func$concat$while$StringIncref$3                       ; if reference count is negative (constant strings), skip incref
      jmp func$concat$while$AfterStringIncref$3                  ; skip incref for string constants
      func$concat$while$StringIncref$3:                          ; real String
        inc qword ptr [rdi]                                      ; increment reference count of copy of segment
    func$concat$while$AfterStringIncref$3:                       ; after String incref
    ; Call _stringByteLength with 1 arguments
    push rdi                                                     ; value of argument #1 (copy of segment)
    push rax                                                     ; type of argument #1
    mov qword ptr [rsp + 060h], r10                              ; move segment variable's value out of r10
    lea r10, qword ptr [rsp + 068h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 060h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 080h], rax                              ; move copy of segment's type out of rax
    call func$_stringByteLength                                  ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    cmp qword ptr [rsp + 048h], 000h                             ; compare type of _stringByteLength return value to <sentinel>
    jne func$concat$while$StringbytelengthReturnValue$TypeMatch$1 ; skip next block if _stringByteLength return value is not sentinel
      ; Error handling block for _stringByteLength return value
      int 3                                                      ; call debugger
      ;  - print(assignmentTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov qword ptr [rsp + 038h], rsi                            ; move segment variable's type out of rsi
      mov rsi, offset assignmentTypeCheckFailureMessage          ; reading assignmentTypeCheckFailureMessage for push
      push rsi                                                   ; value of argument #1 (assignmentTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rbx, qword ptr [rsp + 040h]                            ; load address of return value's value
      push rbx                                                   ; internal argument 6: pointer to return value slot's value
      lea rbx, qword ptr [rsp + 040h]                            ; load address of return value's type
      push rbx                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      mov qword ptr [rsp + 038h], rdi                            ; move copy of segment's value out of rdi
      lea rdi, qword ptr [rsp + 040h]                            ; load address of return value's value
      push rdi                                                   ; internal argument 6: pointer to return value slot's value
      lea rdi, qword ptr [rsp + 038h]                            ; load address of return value's type
      push rdi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rsi, qword ptr [rsp + 038h]                            ; restoring slots to previous scope state
      mov rdi, qword ptr [rsp + 028h]                            ; restoring slots to previous scope state
    func$concat$while$StringbytelengthReturnValue$TypeMatch$1:   ; after block
    mov rax, qword ptr [rsp + 058h]                              ; value initialization of variable declaration for segmentLength variable (_stringByteLength return value)
    mov r12, qword ptr [rsp + 048h]                              ; type initialization of variable declaration for segmentLength variable
    ; Line 415: if (segmentLength > 0) { ...
    mov r13, rax                                                 ; make a copy of segmentLength's value in case it changes before we use it
    mov r14, r12                                                 ; make a copy of segmentLength's type in case it changes before we use it
    cmp r14, 000h                                                ; compare type of copy of segmentLength to <sentinel>
    jne func$concat$while$segmentlength$TypeMatch                ; skip next block if copy of segmentLength is not sentinel
      ; Error handling block for segmentLength
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov qword ptr [rsp + 058h], r15                            ; move cursor variable's value out of r15
      mov r15, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push r15                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r10, qword ptr [rsp + 058h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 050h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 070h], rax                            ; move segmentLength variable's value out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      mov qword ptr [rsp + 048h], rsi                            ; move segment variable's type out of rsi
      lea rsi, qword ptr [rsp + 058h]                            ; load address of return value's value
      push rsi                                                   ; internal argument 6: pointer to return value slot's value
      lea rsi, qword ptr [rsp + 040h]                            ; load address of return value's type
      push rsi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 030h]                            ; restoring slots to previous scope state
      mov r15, qword ptr [rsp + 058h]                            ; restoring slots to previous scope state
      mov rsi, qword ptr [rsp + 038h]                            ; restoring slots to previous scope state
    func$concat$while$segmentlength$TypeMatch:                   ; after block
    mov qword ptr [rsp + 058h], r12                              ; move segmentLength variable's type out of r12
    xor r12, r12                                                 ; clear > operator result
    cmp r13, 000h                                                ; compare copy of segmentLength with 0
    setg r12b                                                    ; store result in > operator result
    cmp r12, 000h                                                ; compare > operator result to false
    je func$concat$while$if$continuation                         ; segmentLength > 0
      ; Line 416: Integer segmentPointer = segment __as__ Integer;
      mov r13, qword ptr [rsp + 050h]                            ; make a copy of segment's value in case it changes before we use it
      mov r14, rsi                                               ; make a copy of segment's type in case it changes before we use it
      ; increment reference count for copy of segment if necessary
      cmp r14, 020h                                              ; compare type of copy of segment to String
      jne func$concat$while$while$if$6$AfterStringIncref         ; if not a String, skip incref
        mov qword ptr [rsp + 048h], r15                          ; move cursor variable's value out of r15
        mov r15, qword ptr [r13]                                 ; dereference string to get to reference count
        cmp r15, 0                                               ; compare string reference count to 0
        jns func$concat$while$while$if$6$StringIncref            ; if reference count is negative (constant strings), skip incref
        mov r15, qword ptr [rsp + 048h]                          ; restoring slots to previous scope state
        jmp func$concat$while$while$if$6$AfterStringIncref       ; skip incref for string constants
        func$concat$while$while$if$6$StringIncref:               ; real String
          inc qword ptr [r13]                                    ; increment reference count of copy of segment
        mov r15, qword ptr [rsp + 048h]                          ; restoring slots to previous scope state
      func$concat$while$while$if$6$AfterStringIncref:            ; after String incref
      mov r10, r13                                               ; force cast of copy of segment to Integer
      mov qword ptr [rsp + 048h], rax                            ; move segmentLength variable's value out of rax
      mov rax, r10                                               ; value initialization of variable declaration for segmentPointer variable (force cast of copy of segment to Integer)
      mov r12, 01fh                                              ; type initialization of variable declaration for segmentPointer variable (Integer'31)
      ; Line 417: _moveBytes(segmentPointer + 16 /* 0x10 */, cursor, segmentLength...
      mov qword ptr [rsp + 038h], r13                            ; move copy of segment's value out of r13
      mov r13, rax                                               ; make a copy of segmentPointer's value in case it changes before we use it
      mov qword ptr [rsp + 030h], r14                            ; move copy of segment's type out of r14
      mov r14, r12                                               ; make a copy of segmentPointer's type in case it changes before we use it
      cmp r14, 000h                                              ; compare type of copy of segmentPointer to <sentinel>
      jne func$concat$while$while$if$6$segmentpointer$TypeMatch  ; skip next block if copy of segmentPointer is not sentinel
        ; Error handling block for segmentPointer
        int 3                                                    ; call debugger
        ;  - print(operandTypeCheckFailureMessage)
        ; Call __print with 1 arguments
        mov qword ptr [rsp + 028h], r15                          ; move cursor variable's value out of r15
        mov r15, offset operandTypeCheckFailureMessage           ; reading operandTypeCheckFailureMessage for push
        push r15                                                 ; value of argument #1 (operandTypeCheckFailureMessage)
        push 020h                                                ; type of argument #1 (String'32)
        lea r10, qword ptr [rsp + 030h]                          ; load address of return value's value
        push r10                                                 ; internal argument 6: pointer to return value slot's value
        lea r10, qword ptr [rsp + 030h]                          ; load address of return value's type
        push r10                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$__print                                        ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        ;  - exit(1)
        ; Call exit with 1 arguments
        push 001h                                                ; value of argument #1 (1 (integer))
        push 01fh                                                ; type of argument #1 (Integer'31)
        mov qword ptr [rsp + 028h], rsi                          ; move segment variable's type out of rsi
        lea rsi, qword ptr [rsp + 030h]                          ; load address of return value's value
        push rsi                                                 ; internal argument 6: pointer to return value slot's value
        lea rsi, qword ptr [rsp + 028h]                          ; load address of return value's type
        push rsi                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$exit                                           ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        mov r15, qword ptr [rsp + 028h]                          ; restoring slots to previous scope state
        mov rsi, qword ptr [rsp + 018h]                          ; restoring slots to previous scope state
      func$concat$while$while$if$6$segmentpointer$TypeMatch:     ; after block
      mov r12, r13                                               ; assign value of copy of segmentPointer to value of + operator result
      add r12, 010h                                              ; compute (copy of segmentPointer) + (16 /* 0x10 */) (result in + operator result)
      mov r13, r15                                               ; make a copy of cursor's value in case it changes before we use it
      mov r14, qword ptr [rsp + 078h]                            ; make a copy of cursor's type in case it changes before we use it
      mov qword ptr [rsp + 028h], r15                            ; move cursor variable's value out of r15
      mov r15, qword ptr [rsp + 048h]                            ; make a copy of segmentLength's value in case it changes before we use it
      mov r10, qword ptr [rsp + 058h]                            ; make a copy of segmentLength's type in case it changes before we use it
      ; Call _moveBytes with 3 arguments
      push r15                                                   ; value of argument #3 (copy of segmentLength)
      push r10                                                   ; type of argument #3
      push r13                                                   ; value of argument #2 (copy of cursor)
      push r14                                                   ; type of argument #2
      push r12                                                   ; value of argument #1 (+ operator result)
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea rax, qword ptr [rsp + 050h]                            ; load address of return value's value
      push rax                                                   ; internal argument 6: pointer to return value slot's value
      lea rax, qword ptr [rsp + 050h]                            ; load address of return value's type
      push rax                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 003h                                              ; internal argument 1: number of actual arguments
      call func$_moveBytes                                       ; jump to subroutine
      add rsp, 060h                                              ; release shadow space and arguments (result in stack pointer)
      ; Line 418: cursor += segmentLength;
      mov r12, qword ptr [rsp + 028h]                            ; make a copy of cursor's value in case it changes before we use it
      mov r13, qword ptr [rsp + 078h]                            ; make a copy of cursor's type in case it changes before we use it
      mov r14, qword ptr [rsp + 048h]                            ; make a copy of segmentLength's value in case it changes before we use it
      mov r15, qword ptr [rsp + 058h]                            ; make a copy of segmentLength's type in case it changes before we use it
      cmp r13, 000h                                              ; compare type of copy of cursor to <sentinel>
      jne func$concat$while$while$if$6$copyOfCursor$TypeMatch    ; skip next block if copy of cursor is not sentinel
        ; Error handling block for copy of cursor
        int 3                                                    ; call debugger
        ;  - print(operandTypeCheckFailureMessage)
        ; Call __print with 1 arguments
        mov r10, offset operandTypeCheckFailureMessage           ; reading operandTypeCheckFailureMessage for push
        push r10                                                 ; value of argument #1 (operandTypeCheckFailureMessage)
        push 020h                                                ; type of argument #1 (String'32)
        mov qword ptr [rsp + 028h], rsi                          ; move segment variable's type out of rsi
        lea rsi, qword ptr [rsp + 030h]                          ; load address of return value's value
        push rsi                                                 ; internal argument 6: pointer to return value slot's value
        lea rsi, qword ptr [rsp + 028h]                          ; load address of return value's type
        push rsi                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$__print                                        ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        ;  - exit(1)
        ; Call exit with 1 arguments
        push 001h                                                ; value of argument #1 (1 (integer))
        push 01fh                                                ; type of argument #1 (Integer'31)
        lea rbx, qword ptr [rsp + 030h]                          ; load address of return value's value
        push rbx                                                 ; internal argument 6: pointer to return value slot's value
        lea rbx, qword ptr [rsp + 028h]                          ; load address of return value's type
        push rbx                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$exit                                           ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        mov rsi, qword ptr [rsp + 018h]                          ; restoring slots to previous scope state
      func$concat$while$while$if$6$copyOfCursor$TypeMatch:       ; after block
      cmp r15, 000h                                              ; compare type of copy of segmentLength to <sentinel>
      jne func$concat$while$while$if$6$copyOfSegmentlength$TypeMatch ; skip next block if copy of segmentLength is not sentinel
        ; Error handling block for copy of segmentLength
        int 3                                                    ; call debugger
        ;  - print(operandTypeCheckFailureMessage)
        ; Call __print with 1 arguments
        mov qword ptr [rsp + 020h], rdi                          ; move copy of segment's value out of rdi
        mov rdi, offset operandTypeCheckFailureMessage           ; reading operandTypeCheckFailureMessage for push
        push rdi                                                 ; value of argument #1 (operandTypeCheckFailureMessage)
        push 020h                                                ; type of argument #1 (String'32)
        lea rax, qword ptr [rsp + 028h]                          ; load address of return value's value
        push rax                                                 ; internal argument 6: pointer to return value slot's value
        lea rax, qword ptr [rsp + 028h]                          ; load address of return value's type
        push rax                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$__print                                        ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        ;  - exit(1)
        ; Call exit with 1 arguments
        push 001h                                                ; value of argument #1 (1 (integer))
        push 01fh                                                ; type of argument #1 (Integer'31)
        mov qword ptr [rsp + 020h], r12                          ; move copy of cursor's value out of r12
        lea r12, qword ptr [rsp + 028h]                          ; load address of return value's value
        push r12                                                 ; internal argument 6: pointer to return value slot's value
        lea r12, qword ptr [rsp + 020h]                          ; load address of return value's type
        push r12                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$exit                                           ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        mov r12, qword ptr [rsp + 010h]                          ; restoring slots to previous scope state
        mov rdi, qword ptr [rsp + 020h]                          ; restoring slots to previous scope state
      func$concat$while$while$if$6$copyOfSegmentlength$TypeMatch:  ; after block
      mov qword ptr [rsp + 020h], r13                            ; move copy of cursor's type out of r13
      mov r13, r12                                               ; assign value of copy of cursor to value of += operator result
      add r13, r14                                               ; += operator
      mov qword ptr [rsp + 028h], r13                            ; store value
      mov qword ptr [rsp + 078h], 01fh                           ; store type (Integer'31)
      ; Decrement reference count for copy of segment (static type: String'32) via decrefMaybeString
      sub rsp, 20h                                               ; allocate shadow space for decref function
      mov rdx, qword ptr [rsp + 050h]                            ; arg #2: copy of segment's type
      mov rcx, qword ptr [rsp + 058h]                            ; arg #1: copy of segment's value
      call decrefMaybeString                                     ; call decref
      add rsp, 20h                                               ; free shadow space for decref
      mov rax, qword ptr [rsp + 048h]                            ; restoring slots to previous scope state
      mov r15, qword ptr [rsp + 028h]                            ; restoring slots to previous scope state
    func$concat$while$if$continuation:                           ; end of if
    ; Line 420: index += 1;
    mov qword ptr [rsp + 058h], rsi                              ; move segment variable's type out of rsi
    mov rsi, qword ptr [rsp + 080h]                              ; make a copy of index's value in case it changes before we use it
    mov rbx, qword ptr [rsp + 088h]                              ; make a copy of index's type in case it changes before we use it
    cmp rbx, 000h                                                ; compare type of copy of index to <sentinel>
    jne func$concat$while$copyOfIndex$TypeMatch$3                ; skip next block if copy of index is not sentinel
      ; Error handling block for copy of index
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov qword ptr [rsp + 048h], rdi                            ; move copy of segment's value out of rdi
      mov rdi, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rdi                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rax, qword ptr [rsp + 048h]                            ; load address of return value's value
      push rax                                                   ; internal argument 6: pointer to return value slot's value
      lea rax, qword ptr [rsp + 048h]                            ; load address of return value's type
      push rax                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r12, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 048h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rdi, qword ptr [rsp + 048h]                            ; restoring slots to previous scope state
    func$concat$while$copyOfIndex$TypeMatch$3:                   ; after block
    mov r10, rsi                                                 ; assign value of copy of index to value of += operator result
    add r10, 001h                                                ; += operator
    mov qword ptr [rsp + 080h], r10                              ; store value
    mov qword ptr [rsp + 088h], 01fh                             ; store type (Integer'31)
    ; Decrement reference count for segment variable (static type: String'32) via decrefMaybeString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, qword ptr [rsp + 078h]                              ; arg #2: segment variable's type
    mov rcx, qword ptr [rsp + 070h]                              ; arg #1: segment variable's value
    call decrefMaybeString                                       ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    ; Decrement reference count for copy of arguments[copy of index] (static type: String'32) via decrefMaybeString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, qword ptr [rsp + 080h]                              ; arg #2: copy of arguments[copy of index]'s type
    mov rcx, qword ptr [rsp + 088h]                              ; arg #1: copy of arguments[copy of index]'s value
    call decrefMaybeString                                       ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    ; Decrement reference count for copy of segment (static type: String'32) via decrefMaybeString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, qword ptr [rsp + 060h]                              ; arg #2: copy of segment's type
    mov rcx, rdi                                                 ; arg #1: copy of segment's value
    call decrefMaybeString                                       ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    mov rbx, qword ptr [rsp + 098h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 078h]                              ; restoring slots to previous scope state
    mov rdi, qword ptr [rsp + 090h]                              ; restoring slots to previous scope state
    jmp func$concat$while$top$1                                  ; return to top of while
  func$concat$while$bottom$1:                                    ; bottom of while
  ; Line 422: return resultPointer __as__ String;
  mov rax, rbx                                                   ; make a copy of resultPointer's value in case it changes before we use it
  mov r12, rdi                                                   ; make a copy of resultPointer's type in case it changes before we use it
  mov r13, rax                                                   ; force cast of copy of resultPointer to String
  mov rsi, qword ptr [rbp + 030h]                                ; get pointer to return value of concat into register to dereference it
  mov qword ptr [rsi], r13                                       ; concat return value
  mov rbx, qword ptr [rbp + 028h]                                ; get pointer to return value type of concat into register to dereference it
  mov qword ptr [rbx], 020h                                      ; type of concat return value (String'32)
  ; increment reference count for force cast of copy of resultPointer to String if necessary
    mov rdi, qword ptr [r13]                                     ; dereference string to get to reference count
    cmp rdi, 0                                                   ; compare string reference count to 0
    jns func$concat$StringIncref                                 ; if reference count is negative (constant strings), skip incref
    jmp func$concat$AfterStringIncref                            ; skip incref for string constants
    func$concat$StringIncref:                                    ; real String
      inc qword ptr [r13]                                        ; increment reference count of force cast of copy of resultPointer to String
  func$concat$AfterStringIncref:                                 ; after String incref
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 0a8h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; digitToStr
dq func$digitToStr$annotation
func$digitToStr:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 018h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 058h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 001h                                                  ; compare parameter count of digitToStr to 1 (integer)
  je func$digitToStr$parameterCountCheck$continuation            ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 018h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 018h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 018h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 018h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$digitToStr$parameterCountCheck$continuation:              ; end of parameter count check
  ; Check type of parameter 0, digit (expecting Integer)
  mov rsi, qword ptr [rbp + 038h]                                ; store digit's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that digit is Integer
  jc func$digitToStr$digit$TypeMatch                             ; skip next block if the type matches
    ; Error handling block for digit
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$digitToStr$digit$TypeMatch:                               ; after block
  ; Line 426: if (digit == 0) { ...
  xor r10, r10                                                   ; zero value result of == (testing digit and 0) to put the boolean in
  cmp qword ptr [rbp + 040h], 000h                               ; values equal?
  sete r10b                                                      ; put result in value result of == (testing digit and 0)
  mov rbx, 01eh                                                  ; value result of == (testing digit and 0) is a Boolean'30
  xor rsi, rsi                                                   ; zero type result of == (testing digit and 0) to put the boolean in
  cmp qword ptr [rbp + 038h], 01fh                               ; types equal?
  sete sil                                                       ; put result in type result of == (testing digit and 0)
  mov rax, 01eh                                                  ; type result of == (testing digit and 0) is a Boolean'30
  mov rdi, r10                                                   ; assign value of value result of == (testing digit and 0) to value of == operator result
  and rdi, rsi                                                   ; && type temp and value temp
  cmp rdi, 000h                                                  ; compare == operator result to false
  je func$digitToStr$if$continuation                             ; digit == 0
    ; Line 427: return '0';
    mov r15, offset string$16                                    ; read second operand of mov (string) for MoveToDerefInstruction
    mov r10, qword ptr [rbp + 030h]                              ; get pointer to return value of digitToStr into register to dereference it
    mov qword ptr [r10], r15                                     ; digitToStr return value
    mov rbx, qword ptr [rbp + 028h]                              ; get pointer to return value type of digitToStr into register to dereference it
    mov qword ptr [rbx], 020h                                    ; type of digitToStr return value (String'32)
    jmp func$digitToStr$epilog                                   ; return
  func$digitToStr$if$continuation:                               ; end of if
  ; Line 429: if (digit == 1) { ...
  xor rsi, rsi                                                   ; zero value result of == (testing digit and 1) to put the boolean in
  cmp qword ptr [rbp + 040h], 001h                               ; values equal?
  sete sil                                                       ; put result in value result of == (testing digit and 1)
  mov rax, 01eh                                                  ; value result of == (testing digit and 1) is a Boolean'30
  xor rdi, rdi                                                   ; zero type result of == (testing digit and 1) to put the boolean in
  cmp qword ptr [rbp + 038h], 01fh                               ; types equal?
  sete dil                                                       ; put result in type result of == (testing digit and 1)
  mov r12, 01eh                                                  ; type result of == (testing digit and 1) is a Boolean'30
  mov r13, rsi                                                   ; assign value of value result of == (testing digit and 1) to value of == operator result
  and r13, rdi                                                   ; && type temp and value temp
  cmp r13, 000h                                                  ; compare == operator result to false
  je func$digitToStr$if$continuation$1                           ; digit == 1
    ; Line 430: return '1';
    mov r10, offset string$17                                    ; read second operand of mov (string) for MoveToDerefInstruction
    mov rbx, qword ptr [rbp + 030h]                              ; get pointer to return value of digitToStr into register to dereference it
    mov qword ptr [rbx], r10                                     ; digitToStr return value
    mov rsi, qword ptr [rbp + 028h]                              ; get pointer to return value type of digitToStr into register to dereference it
    mov qword ptr [rsi], 020h                                    ; type of digitToStr return value (String'32)
    jmp func$digitToStr$epilog                                   ; return
  func$digitToStr$if$continuation$1:                             ; end of if
  ; Line 432: if (digit == 2) { ...
  xor rax, rax                                                   ; zero value result of == (testing digit and 2) to put the boolean in
  cmp qword ptr [rbp + 040h], 002h                               ; values equal?
  sete al                                                        ; put result in value result of == (testing digit and 2)
  mov rdi, 01eh                                                  ; value result of == (testing digit and 2) is a Boolean'30
  xor r12, r12                                                   ; zero type result of == (testing digit and 2) to put the boolean in
  cmp qword ptr [rbp + 038h], 01fh                               ; types equal?
  sete r12b                                                      ; put result in type result of == (testing digit and 2)
  mov r13, 01eh                                                  ; type result of == (testing digit and 2) is a Boolean'30
  mov r14, rax                                                   ; assign value of value result of == (testing digit and 2) to value of == operator result
  and r14, r12                                                   ; && type temp and value temp
  cmp r14, 000h                                                  ; compare == operator result to false
  je func$digitToStr$if$continuation$2                           ; digit == 2
    ; Line 433: return '2';
    mov rbx, offset string$18                                    ; read second operand of mov (string) for MoveToDerefInstruction
    mov rsi, qword ptr [rbp + 030h]                              ; get pointer to return value of digitToStr into register to dereference it
    mov qword ptr [rsi], rbx                                     ; digitToStr return value
    mov rax, qword ptr [rbp + 028h]                              ; get pointer to return value type of digitToStr into register to dereference it
    mov qword ptr [rax], 020h                                    ; type of digitToStr return value (String'32)
    jmp func$digitToStr$epilog                                   ; return
  func$digitToStr$if$continuation$2:                             ; end of if
  ; Line 435: if (digit == 3) { ...
  xor rdi, rdi                                                   ; zero value result of == (testing digit and 3) to put the boolean in
  cmp qword ptr [rbp + 040h], 003h                               ; values equal?
  sete dil                                                       ; put result in value result of == (testing digit and 3)
  mov r12, 01eh                                                  ; value result of == (testing digit and 3) is a Boolean'30
  xor r13, r13                                                   ; zero type result of == (testing digit and 3) to put the boolean in
  cmp qword ptr [rbp + 038h], 01fh                               ; types equal?
  sete r13b                                                      ; put result in type result of == (testing digit and 3)
  mov r14, 01eh                                                  ; type result of == (testing digit and 3) is a Boolean'30
  mov r15, rdi                                                   ; assign value of value result of == (testing digit and 3) to value of == operator result
  and r15, r13                                                   ; && type temp and value temp
  cmp r15, 000h                                                  ; compare == operator result to false
  je func$digitToStr$if$continuation$3                           ; digit == 3
    ; Line 436: return '3';
    mov rsi, offset string$19                                    ; read second operand of mov (string) for MoveToDerefInstruction
    mov rax, qword ptr [rbp + 030h]                              ; get pointer to return value of digitToStr into register to dereference it
    mov qword ptr [rax], rsi                                     ; digitToStr return value
    mov rdi, qword ptr [rbp + 028h]                              ; get pointer to return value type of digitToStr into register to dereference it
    mov qword ptr [rdi], 020h                                    ; type of digitToStr return value (String'32)
    jmp func$digitToStr$epilog                                   ; return
  func$digitToStr$if$continuation$3:                             ; end of if
  ; Line 438: if (digit == 4) { ...
  xor r12, r12                                                   ; zero value result of == (testing digit and 4) to put the boolean in
  cmp qword ptr [rbp + 040h], 004h                               ; values equal?
  sete r12b                                                      ; put result in value result of == (testing digit and 4)
  mov r13, 01eh                                                  ; value result of == (testing digit and 4) is a Boolean'30
  xor r14, r14                                                   ; zero type result of == (testing digit and 4) to put the boolean in
  cmp qword ptr [rbp + 038h], 01fh                               ; types equal?
  sete r14b                                                      ; put result in type result of == (testing digit and 4)
  mov r15, 01eh                                                  ; type result of == (testing digit and 4) is a Boolean'30
  mov r10, r12                                                   ; assign value of value result of == (testing digit and 4) to value of == operator result
  and r10, r14                                                   ; && type temp and value temp
  cmp r10, 000h                                                  ; compare == operator result to false
  je func$digitToStr$if$continuation$4                           ; digit == 4
    ; Line 439: return '4';
    mov rax, offset string$20                                    ; read second operand of mov (string) for MoveToDerefInstruction
    mov rdi, qword ptr [rbp + 030h]                              ; get pointer to return value of digitToStr into register to dereference it
    mov qword ptr [rdi], rax                                     ; digitToStr return value
    mov r12, qword ptr [rbp + 028h]                              ; get pointer to return value type of digitToStr into register to dereference it
    mov qword ptr [r12], 020h                                    ; type of digitToStr return value (String'32)
    jmp func$digitToStr$epilog                                   ; return
  func$digitToStr$if$continuation$4:                             ; end of if
  ; Line 441: if (digit == 5) { ...
  xor r13, r13                                                   ; zero value result of == (testing digit and 5) to put the boolean in
  cmp qword ptr [rbp + 040h], 005h                               ; values equal?
  sete r13b                                                      ; put result in value result of == (testing digit and 5)
  mov r14, 01eh                                                  ; value result of == (testing digit and 5) is a Boolean'30
  xor r15, r15                                                   ; zero type result of == (testing digit and 5) to put the boolean in
  cmp qword ptr [rbp + 038h], 01fh                               ; types equal?
  sete r15b                                                      ; put result in type result of == (testing digit and 5)
  mov r10, 01eh                                                  ; type result of == (testing digit and 5) is a Boolean'30
  mov rbx, r13                                                   ; assign value of value result of == (testing digit and 5) to value of == operator result
  and rbx, r15                                                   ; && type temp and value temp
  cmp rbx, 000h                                                  ; compare == operator result to false
  je func$digitToStr$if$continuation$5                           ; digit == 5
    ; Line 442: return '5';
    mov rdi, offset string$21                                    ; read second operand of mov (string) for MoveToDerefInstruction
    mov r12, qword ptr [rbp + 030h]                              ; get pointer to return value of digitToStr into register to dereference it
    mov qword ptr [r12], rdi                                     ; digitToStr return value
    mov r13, qword ptr [rbp + 028h]                              ; get pointer to return value type of digitToStr into register to dereference it
    mov qword ptr [r13], 020h                                    ; type of digitToStr return value (String'32)
    jmp func$digitToStr$epilog                                   ; return
  func$digitToStr$if$continuation$5:                             ; end of if
  ; Line 444: if (digit == 6) { ...
  xor r14, r14                                                   ; zero value result of == (testing digit and 6) to put the boolean in
  cmp qword ptr [rbp + 040h], 006h                               ; values equal?
  sete r14b                                                      ; put result in value result of == (testing digit and 6)
  mov r15, 01eh                                                  ; value result of == (testing digit and 6) is a Boolean'30
  xor r10, r10                                                   ; zero type result of == (testing digit and 6) to put the boolean in
  cmp qword ptr [rbp + 038h], 01fh                               ; types equal?
  sete r10b                                                      ; put result in type result of == (testing digit and 6)
  mov rbx, 01eh                                                  ; type result of == (testing digit and 6) is a Boolean'30
  mov rsi, r14                                                   ; assign value of value result of == (testing digit and 6) to value of == operator result
  and rsi, r10                                                   ; && type temp and value temp
  cmp rsi, 000h                                                  ; compare == operator result to false
  je func$digitToStr$if$continuation$6                           ; digit == 6
    ; Line 445: return '6';
    mov r12, offset string$22                                    ; read second operand of mov (string) for MoveToDerefInstruction
    mov r13, qword ptr [rbp + 030h]                              ; get pointer to return value of digitToStr into register to dereference it
    mov qword ptr [r13], r12                                     ; digitToStr return value
    mov r14, qword ptr [rbp + 028h]                              ; get pointer to return value type of digitToStr into register to dereference it
    mov qword ptr [r14], 020h                                    ; type of digitToStr return value (String'32)
    jmp func$digitToStr$epilog                                   ; return
  func$digitToStr$if$continuation$6:                             ; end of if
  ; Line 447: if (digit == 7) { ...
  xor r15, r15                                                   ; zero value result of == (testing digit and 7) to put the boolean in
  cmp qword ptr [rbp + 040h], 007h                               ; values equal?
  sete r15b                                                      ; put result in value result of == (testing digit and 7)
  mov r10, 01eh                                                  ; value result of == (testing digit and 7) is a Boolean'30
  xor rbx, rbx                                                   ; zero type result of == (testing digit and 7) to put the boolean in
  cmp qword ptr [rbp + 038h], 01fh                               ; types equal?
  sete bl                                                        ; put result in type result of == (testing digit and 7)
  mov rsi, 01eh                                                  ; type result of == (testing digit and 7) is a Boolean'30
  mov rax, r15                                                   ; assign value of value result of == (testing digit and 7) to value of == operator result
  and rax, rbx                                                   ; && type temp and value temp
  cmp rax, 000h                                                  ; compare == operator result to false
  je func$digitToStr$if$continuation$7                           ; digit == 7
    ; Line 448: return '7';
    mov r13, offset string$23                                    ; read second operand of mov (string) for MoveToDerefInstruction
    mov r14, qword ptr [rbp + 030h]                              ; get pointer to return value of digitToStr into register to dereference it
    mov qword ptr [r14], r13                                     ; digitToStr return value
    mov r15, qword ptr [rbp + 028h]                              ; get pointer to return value type of digitToStr into register to dereference it
    mov qword ptr [r15], 020h                                    ; type of digitToStr return value (String'32)
    jmp func$digitToStr$epilog                                   ; return
  func$digitToStr$if$continuation$7:                             ; end of if
  ; Line 450: if (digit == 8) { ...
  xor r10, r10                                                   ; zero value result of == (testing digit and 8) to put the boolean in
  cmp qword ptr [rbp + 040h], 008h                               ; values equal?
  sete r10b                                                      ; put result in value result of == (testing digit and 8)
  mov rbx, 01eh                                                  ; value result of == (testing digit and 8) is a Boolean'30
  xor rsi, rsi                                                   ; zero type result of == (testing digit and 8) to put the boolean in
  cmp qword ptr [rbp + 038h], 01fh                               ; types equal?
  sete sil                                                       ; put result in type result of == (testing digit and 8)
  mov rax, 01eh                                                  ; type result of == (testing digit and 8) is a Boolean'30
  mov rdi, r10                                                   ; assign value of value result of == (testing digit and 8) to value of == operator result
  and rdi, rsi                                                   ; && type temp and value temp
  cmp rdi, 000h                                                  ; compare == operator result to false
  je func$digitToStr$if$continuation$8                           ; digit == 8
    ; Line 451: return '8';
    mov r14, offset string$24                                    ; read second operand of mov (string) for MoveToDerefInstruction
    mov r15, qword ptr [rbp + 030h]                              ; get pointer to return value of digitToStr into register to dereference it
    mov qword ptr [r15], r14                                     ; digitToStr return value
    mov r10, qword ptr [rbp + 028h]                              ; get pointer to return value type of digitToStr into register to dereference it
    mov qword ptr [r10], 020h                                    ; type of digitToStr return value (String'32)
    jmp func$digitToStr$epilog                                   ; return
  func$digitToStr$if$continuation$8:                             ; end of if
  ; Line 453: if (digit == 9) { ...
  xor rbx, rbx                                                   ; zero value result of == (testing digit and 9) to put the boolean in
  cmp qword ptr [rbp + 040h], 009h                               ; values equal?
  sete bl                                                        ; put result in value result of == (testing digit and 9)
  mov rsi, 01eh                                                  ; value result of == (testing digit and 9) is a Boolean'30
  xor rax, rax                                                   ; zero type result of == (testing digit and 9) to put the boolean in
  cmp qword ptr [rbp + 038h], 01fh                               ; types equal?
  sete al                                                        ; put result in type result of == (testing digit and 9)
  mov rdi, 01eh                                                  ; type result of == (testing digit and 9) is a Boolean'30
  mov r12, rbx                                                   ; assign value of value result of == (testing digit and 9) to value of == operator result
  and r12, rax                                                   ; && type temp and value temp
  cmp r12, 000h                                                  ; compare == operator result to false
  je func$digitToStr$if$continuation$9                           ; digit == 9
    ; Line 454: return '9';
    mov r15, offset string$25                                    ; read second operand of mov (string) for MoveToDerefInstruction
    mov r10, qword ptr [rbp + 030h]                              ; get pointer to return value of digitToStr into register to dereference it
    mov qword ptr [r10], r15                                     ; digitToStr return value
    mov rbx, qword ptr [rbp + 028h]                              ; get pointer to return value type of digitToStr into register to dereference it
    mov qword ptr [rbx], 020h                                    ; type of digitToStr return value (String'32)
    jmp func$digitToStr$epilog                                   ; return
  func$digitToStr$if$continuation$9:                             ; end of if
  ; Line 456: __print('Invalid digit passed to digitToStr (digit as exit code)...
  ; Call __print with 1 arguments
  mov r12, offset string$26                                      ; reading string for push
  push r12                                                       ; value of argument #1 (string)
  push 020h                                                      ; type of argument #1 (String'32)
  lea r13, qword ptr [rsp + 018h]                                ; load address of return value's value
  push r13                                                       ; internal argument 6: pointer to return value slot's value
  lea r13, qword ptr [rsp + 018h]                                ; load address of return value's type
  push r13                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call func$__print                                              ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 457: exit(digit);
  ; Call exit with 1 arguments
  push qword ptr [rbp + 040h]                                    ; value of argument #1 (digit)
  push qword ptr [rbp + 038h]                                    ; type of argument #1
  lea rbx, qword ptr [rsp + 018h]                                ; load address of return value's value
  push rbx                                                       ; internal argument 6: pointer to return value slot's value
  lea rbx, qword ptr [rsp + 018h]                                ; load address of return value's type
  push rbx                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call func$exit                                                 ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Implicit return from digitToStr
  mov rsi, 01dh                                                  ; store null's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 003h                                       ; check that digitToStr return value is String
  jc func$digitToStr$digittostrReturnValue$TypeMatch             ; skip next block if the type matches
    ; Error handling block for digitToStr return value
    int 3                                                        ; call debugger
    ;  - print(returnValueTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset returnValueTypeCheckFailureMessage           ; reading returnValueTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (returnValueTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$digitToStr$digittostrReturnValue$TypeMatch:               ; after block
  mov r10, qword ptr [rbp + 030h]                                ; get pointer to return value of digitToStr into register to dereference it
  mov qword ptr [r10], 000h                                      ; digitToStr return value
  mov rbx, qword ptr [rbp + 028h]                                ; get pointer to return value type of digitToStr into register to dereference it
  mov qword ptr [rbx], 01dh                                      ; type of digitToStr return value (Null'29)
  func$digitToStr$epilog: 
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 018h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; intToStr
dq func$intToStr$annotation
func$intToStr:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 058h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 098h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 001h                                                  ; compare parameter count of intToStr to 1 (integer)
  je func$intToStr$parameterCountCheck$continuation              ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 058h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 058h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$intToStr$parameterCountCheck$continuation:                ; end of parameter count check
  ; Check type of parameter 0, value (expecting Integer)
  mov rsi, qword ptr [rbp + 038h]                                ; store value's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that value is Integer
  jc func$intToStr$value$TypeMatch                               ; skip next block if the type matches
    ; Error handling block for value
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 058h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 058h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 058h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 058h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$intToStr$value$TypeMatch:                                 ; after block
  ; Line 461: if (value == 0) { ...
  xor r10, r10                                                   ; zero value result of == (testing value and 0) to put the boolean in
  cmp qword ptr [rbp + 040h], 000h                               ; values equal?
  sete r10b                                                      ; put result in value result of == (testing value and 0)
  mov rbx, 01eh                                                  ; value result of == (testing value and 0) is a Boolean'30
  xor rsi, rsi                                                   ; zero type result of == (testing value and 0) to put the boolean in
  cmp qword ptr [rbp + 038h], 01fh                               ; types equal?
  sete sil                                                       ; put result in type result of == (testing value and 0)
  mov rax, 01eh                                                  ; type result of == (testing value and 0) is a Boolean'30
  mov rdi, r10                                                   ; assign value of value result of == (testing value and 0) to value of == operator result
  and rdi, rsi                                                   ; && type temp and value temp
  cmp rdi, 000h                                                  ; compare == operator result to false
  je func$intToStr$if$continuation                               ; value == 0
    ; Line 462: return '0';
    mov r15, offset string$16                                    ; read second operand of mov (string) for MoveToDerefInstruction
    mov r10, qword ptr [rbp + 030h]                              ; get pointer to return value of intToStr into register to dereference it
    mov qword ptr [r10], r15                                     ; intToStr return value
    mov rbx, qword ptr [rbp + 028h]                              ; get pointer to return value type of intToStr into register to dereference it
    mov qword ptr [rbx], 020h                                    ; type of intToStr return value (String'32)
    jmp func$intToStr$epilog                                     ; return
  func$intToStr$if$continuation:                                 ; end of if
  ; Line 464: if (value < 0) { ...
  cmp qword ptr [rbp + 038h], 000h                               ; compare type of value to <sentinel>
  jne func$intToStr$value$TypeMatch$1                            ; skip next block if value is not sentinel
    ; Error handling block for value
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rsi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rsi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 058h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rdi, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 058h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$intToStr$value$TypeMatch$1:                               ; after block
  xor r15, r15                                                   ; clear < operator result
  cmp qword ptr [rbp + 040h], 000h                               ; compare value with 0
  setl r15b                                                      ; store result in < operator result
  cmp r15, 000h                                                  ; compare < operator result to false
  je func$intToStr$if$continuation$1                             ; value < 0
    ; Line 465: return concat('-', intToStr(-value));
    cmp qword ptr [rbp + 038h], 000h                             ; compare type of value to <sentinel>
    jne func$intToStr$inttostr$if$1$value$TypeMatch              ; skip next block if value is not sentinel
      ; Error handling block for value
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r10, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push r10                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rbx, qword ptr [rsp + 058h]                            ; load address of return value's value
      push rbx                                                   ; internal argument 6: pointer to return value slot's value
      lea rbx, qword ptr [rsp + 058h]                            ; load address of return value's type
      push rbx                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea rsi, qword ptr [rsp + 058h]                            ; load address of return value's value
      push rsi                                                   ; internal argument 6: pointer to return value slot's value
      lea rsi, qword ptr [rsp + 058h]                            ; load address of return value's type
      push rsi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
    func$intToStr$inttostr$if$1$value$TypeMatch:                 ; after block
    mov rax, qword ptr [rbp + 040h]                              ; assign value of value to value of - unary operator result
    neg rax                                                      ; - unary operator
    ; Call intToStr with 1 arguments
    push rax                                                     ; value of argument #1 (- unary operator result)
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r14, qword ptr [rsp + 058h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 058h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$intToStr                                           ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ; Call concat with 2 arguments
    push qword ptr [rsp + 048h]                                  ; value of argument #2 (intToStr return value)
    push qword ptr [rsp + 048h]                                  ; type of argument #2
    mov rsi, offset string$27                                    ; reading string for push
    push rsi                                                     ; value of argument #1 (string)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 058h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 002h                                                ; internal argument 1: number of actual arguments
    call func$concat                                             ; jump to subroutine
    add rsp, 050h                                                ; release shadow space and arguments (result in stack pointer)
    cmp qword ptr [rsp + 030h], 000h                             ; compare type of concat return value to <sentinel>
    jne func$intToStr$inttostr$if$1$inttostrReturnValue$TypeMatch ; skip next block if concat return value is not sentinel
      ; Error handling block for intToStr return value
      int 3                                                      ; call debugger
      ;  - print(returnValueTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rdi, offset returnValueTypeCheckFailureMessage         ; reading returnValueTypeCheckFailureMessage for push
      push rdi                                                   ; value of argument #1 (returnValueTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r12, qword ptr [rsp + 038h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 038h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r13, qword ptr [rsp + 038h]                            ; load address of return value's value
      push r13                                                   ; internal argument 6: pointer to return value slot's value
      lea r13, qword ptr [rsp + 038h]                            ; load address of return value's type
      push r13                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
    func$intToStr$inttostr$if$1$inttostrReturnValue$TypeMatch:   ; after block
    mov r14, qword ptr [rsp + 038h]                              ; read second operand of mov (concat return value) for MoveToDerefInstruction
    mov r15, qword ptr [rbp + 030h]                              ; get pointer to return value of intToStr into register to dereference it
    mov qword ptr [r15], r14                                     ; intToStr return value
    mov r10, qword ptr [rsp + 030h]                              ; reading type of concat return value
    mov rbx, qword ptr [rbp + 028h]                              ; get pointer to return value type of intToStr into register to dereference it
    mov qword ptr [rbx], r10                                     ; type of intToStr return value
    ; increment reference count for concat return value if necessary
    cmp r10, 020h                                                ; compare type of concat return value to String
    jne func$intToStr$inttostr$if$1$AfterStringIncref            ; if not a String, skip incref
      mov rsi, qword ptr [r14]                                   ; dereference string to get to reference count
      cmp rsi, 0                                                 ; compare string reference count to 0
      jns func$intToStr$inttostr$if$1$StringIncref               ; if reference count is negative (constant strings), skip incref
      jmp func$intToStr$inttostr$if$1$AfterStringIncref          ; skip incref for string constants
      func$intToStr$inttostr$if$1$StringIncref:                  ; real String
        inc qword ptr [r14]                                      ; increment reference count of concat return value
    func$intToStr$inttostr$if$1$AfterStringIncref:               ; after String incref
    ; Decrement reference count for concat return value (static type: String'32) via decrefMaybeString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, r10                                                 ; arg #2: concat return value's type
    mov rcx, r14                                                 ; arg #1: concat return value's value
    mov qword ptr [rsp + 058h], r10                              ; move concat return value's type out of r10
    call decrefMaybeString                                       ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    ; Decrement reference count for intToStr return value (static type: String'32) via decrefMaybeString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, qword ptr [rsp + 060h]                              ; arg #2: intToStr return value's type
    mov rcx, qword ptr [rsp + 068h]                              ; arg #1: intToStr return value's value
    call decrefMaybeString                                       ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    jmp func$intToStr$epilog                                     ; return
  func$intToStr$if$continuation$1:                               ; end of if
  ; Line 467: String buffer = '';
  mov r13, offset string$28                                      ; value initialization of variable declaration for buffer variable (string)
  mov r14, 020h                                                  ; type initialization of variable declaration for buffer variable (String'32)
  ; increment reference count for buffer variable if necessary
  cmp r14, 020h                                                  ; compare type of buffer variable to String
  jne func$intToStr$AfterStringIncref                            ; if not a String, skip incref
    mov r15, qword ptr [r13]                                     ; dereference string to get to reference count
    cmp r15, 0                                                   ; compare string reference count to 0
    jns func$intToStr$StringIncref                               ; if reference count is negative (constant strings), skip incref
    jmp func$intToStr$AfterStringIncref                          ; skip incref for string constants
    func$intToStr$StringIncref:                                  ; real String
      inc qword ptr [r13]                                        ; increment reference count of buffer variable
  func$intToStr$AfterStringIncref:                               ; after String incref
  ; Line 468: Integer newValue = value;
  cmp qword ptr [rbp + 038h], 000h                               ; compare type of value to <sentinel>
  jne func$intToStr$value$TypeMatch$2                            ; skip next block if value is not sentinel
    ; Error handling block for value
    int 3                                                        ; call debugger
    ;  - print(assignmentTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset assignmentTypeCheckFailureMessage            ; reading assignmentTypeCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (assignmentTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rbx, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 058h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rsi, qword ptr [rsp + 058h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 058h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$intToStr$value$TypeMatch$2:                               ; after block
  mov rax, qword ptr [rbp + 040h]                                ; value initialization of variable declaration for newValue variable (value)
  mov rdi, qword ptr [rbp + 038h]                                ; type initialization of variable declaration for newValue variable
  func$intToStr$while$top:                                       ; top of while
    mov r12, rax                                                 ; make a copy of newValue's value in case it changes before we use it
    mov qword ptr [rsp + 048h], r13                              ; move buffer variable's value out of r13
    mov r13, rdi                                                 ; make a copy of newValue's type in case it changes before we use it
    cmp r13, 000h                                                ; compare type of copy of newValue to <sentinel>
    jne func$intToStr$while$newvalue$TypeMatch                   ; skip next block if copy of newValue is not sentinel
      ; Error handling block for newValue
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov qword ptr [rsp + 040h], r14                            ; move buffer variable's type out of r14
      mov r14, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push r14                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r15, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r15                                                   ; internal argument 6: pointer to return value slot's value
      lea r15, qword ptr [rsp + 048h]                            ; load address of return value's type
      push r15                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 068h], rax                            ; move newValue variable's value out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r10, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 048h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 028h]                            ; restoring slots to previous scope state
      mov r14, qword ptr [rsp + 040h]                            ; restoring slots to previous scope state
    func$intToStr$while$newvalue$TypeMatch:                      ; after block
    mov qword ptr [rsp + 040h], rdi                              ; move newValue variable's type out of rdi
    xor rdi, rdi                                                 ; clear > operator result
    cmp r12, 000h                                                ; compare copy of newValue with 0
    setg dil                                                     ; store result in > operator result
    cmp rdi, 000h                                                ; compare > operator result to false
    jne func$intToStr$while$body                                 ; while condition
    mov r13, qword ptr [rsp + 048h]                              ; restoring slots to previous scope state
    mov rdi, qword ptr [rsp + 040h]                              ; restoring slots to previous scope state
    jmp func$intToStr$while$bottom                               ; break out of while
    func$intToStr$while$body:                                    ; start of while
    ; Line 470: Integer digit = newValue % 10 /* 0xa */;
    mov r12, rax                                                 ; make a copy of newValue's value in case it changes before we use it
    mov r13, qword ptr [rsp + 040h]                              ; make a copy of newValue's type in case it changes before we use it
    cmp r13, 000h                                                ; compare type of copy of newValue to <sentinel>
    jne func$intToStr$while$newvalue$TypeMatch$1                 ; skip next block if copy of newValue is not sentinel
      ; Error handling block for newValue
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov qword ptr [rsp + 038h], r14                            ; move buffer variable's type out of r14
      mov r14, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push r14                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r15, qword ptr [rsp + 040h]                            ; load address of return value's value
      push r15                                                   ; internal argument 6: pointer to return value slot's value
      lea r15, qword ptr [rsp + 040h]                            ; load address of return value's type
      push r15                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 060h], rax                            ; move newValue variable's value out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r10, qword ptr [rsp + 040h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 040h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 020h]                            ; restoring slots to previous scope state
      mov r14, qword ptr [rsp + 038h]                            ; restoring slots to previous scope state
    func$intToStr$while$newvalue$TypeMatch$1:                    ; after block
    mov qword ptr [rsp + 038h], rax                              ; move newValue variable's value out of rax
    mov rax, r12                                                 ; put lhs of rdx division (<DynamicSlot:Integer'31 at [r12]/[r13] ("copy of newValue") (living: true)>) in rax
    cqo                                                          ; zero-extend dividend (rax into rdx:rax)
    mov rdi, 00ah                                                ; read visible operand of div (<ImmediateIntegerSlot:Integer'31 ("10 /* 0xa */")>) 
    idiv rdi                                                     ; compute (copy of newValue) % (10 /* 0xa */) (result, % operator result, ends up in rdx)
    mov r15, rdx                                                 ; value initialization of variable declaration for digit variable (% operator result)
    mov r10, 01fh                                                ; type initialization of variable declaration for digit variable (Integer'31)
    ; Line 471: newValue = newValue / 10 /* 0xa */;
    mov rbx, qword ptr [rsp + 038h]                              ; make a copy of newValue's value in case it changes before we use it
    mov rsi, qword ptr [rsp + 040h]                              ; make a copy of newValue's type in case it changes before we use it
    cmp rsi, 000h                                                ; compare type of copy of newValue to <sentinel>
    jne func$intToStr$while$newvalue$TypeMatch$2                 ; skip next block if copy of newValue is not sentinel
      ; Error handling block for newValue
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rax, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rax                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rdi, qword ptr [rsp + 040h]                            ; load address of return value's value
      push rdi                                                   ; internal argument 6: pointer to return value slot's value
      lea rdi, qword ptr [rsp + 040h]                            ; load address of return value's type
      push rdi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 060h], r10                            ; move digit variable's type out of r10
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r12, qword ptr [rsp + 040h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 040h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov r10, qword ptr [rsp + 020h]                            ; restoring slots to previous scope state
    func$intToStr$while$newvalue$TypeMatch$2:                    ; after block
    mov rax, rbx                                                 ; assign value of copy of newValue to value of / operator result
    cqo                                                          ; zero-extend dividend
    mov qword ptr [rsp + 030h], r10                              ; move digit variable's type out of r10
    mov r10, 00ah                                                ; read operand of div (10 /* 0xa */) 
    idiv r10                                                     ; compute (copy of newValue) / (10 /* 0xa */) (result, / operator result, is in rax)
    mov qword ptr [rsp + 038h], rax                              ; store value
    mov qword ptr [rsp + 040h], 01fh                             ; store type (Integer'31)
    ; Line 472: buffer = concat(digitToStr(digit), buffer);
    mov r12, r15                                                 ; make a copy of digit's value in case it changes before we use it
    mov r13, qword ptr [rsp + 030h]                              ; make a copy of digit's type in case it changes before we use it
    ; Call digitToStr with 1 arguments
    push r12                                                     ; value of argument #1 (copy of digit)
    push r13                                                     ; type of argument #1
    lea r10, qword ptr [rsp + 040h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 040h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$digitToStr                                         ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rbx, qword ptr [rsp + 048h]                              ; make a copy of buffer's value in case it changes before we use it
    mov rsi, r14                                                 ; make a copy of buffer's type in case it changes before we use it
    ; increment reference count for copy of buffer if necessary
    cmp rsi, 020h                                                ; compare type of copy of buffer to String
    jne func$intToStr$while$AfterStringIncref                    ; if not a String, skip incref
      mov rdi, qword ptr [rbx]                                   ; dereference string to get to reference count
      cmp rdi, 0                                                 ; compare string reference count to 0
      jns func$intToStr$while$StringIncref                       ; if reference count is negative (constant strings), skip incref
      jmp func$intToStr$while$AfterStringIncref                  ; skip incref for string constants
      func$intToStr$while$StringIncref:                          ; real String
        inc qword ptr [rbx]                                      ; increment reference count of copy of buffer
    func$intToStr$while$AfterStringIncref:                       ; after String incref
    ; Call concat with 2 arguments
    push rbx                                                     ; value of argument #2 (copy of buffer)
    push rsi                                                     ; type of argument #2
    push qword ptr [rsp + 040h]                                  ; value of argument #1 (digitToStr return value)
    push qword ptr [rsp + 040h]                                  ; type of argument #1
    lea r15, qword ptr [rsp + 040h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 040h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 002h                                                ; internal argument 1: number of actual arguments
    call func$concat                                             ; jump to subroutine
    add rsp, 050h                                                ; release shadow space and arguments (result in stack pointer)
    cmp qword ptr [rsp + 018h], 000h                             ; compare type of concat return value to <sentinel>
    jne func$intToStr$while$concatReturnValue$TypeMatch          ; skip next block if concat return value is not sentinel
      ; Error handling block for concat return value
      int 3                                                      ; call debugger
      ;  - print(assignmentTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rax, offset assignmentTypeCheckFailureMessage          ; reading assignmentTypeCheckFailureMessage for push
      push rax                                                   ; value of argument #1 (assignmentTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r10, qword ptr [rsp + 020h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 020h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      mov qword ptr [rsp + 018h], rbx                            ; move copy of buffer's value out of rbx
      lea rbx, qword ptr [rsp + 020h]                            ; load address of return value's value
      push rbx                                                   ; internal argument 6: pointer to return value slot's value
      lea rbx, qword ptr [rsp + 018h]                            ; load address of return value's type
      push rbx                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rbx, qword ptr [rsp + 008h]                            ; restoring slots to previous scope state
    func$intToStr$while$concatReturnValue$TypeMatch:             ; after block
    ; Decrement reference count for buffer variable (static type: String'32) via decrefMaybeString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, r14                                                 ; arg #2: buffer variable's type
    mov rcx, qword ptr [rsp + 068h]                              ; arg #1: buffer variable's value
    call decrefMaybeString                                       ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    mov r11, qword ptr [rsp + 020h]                              ; indirect through r11 because operand pair (stack operand #1, stack operand #6) is not allowed with mov
    mov qword ptr [rsp + 048h], r11                              ; store value
    mov r14, qword ptr [rsp + 018h]                              ; store type
    ; increment reference count for buffer variable if necessary
    cmp r14, 020h                                                ; compare type of buffer variable to String
    jne func$intToStr$while$AfterStringIncref$1                  ; if not a String, skip incref
      mov qword ptr [rsp + 010h], rsi                            ; move copy of buffer's type out of rsi
      mov rsi, qword ptr [rsp + 048h]                            ; get buffer variable into register to dereference it
      mov rdi, qword ptr [rsi]                                   ; dereference string to get to reference count
      cmp rdi, 0                                                 ; compare string reference count to 0
      jns func$intToStr$while$StringIncref$1                     ; if reference count is negative (constant strings), skip incref
      mov qword ptr [rsp + 048h], rsi                            ; restoring slots to previous scope state
      mov rsi, qword ptr [rsp + 010h]                            ; restoring slots to previous scope state
      jmp func$intToStr$while$AfterStringIncref$1                ; skip incref for string constants
      func$intToStr$while$StringIncref$1:                        ; real String
        inc qword ptr [rsi]                                      ; increment reference count of buffer variable
      mov qword ptr [rsp + 048h], rsi                            ; restoring slots to previous scope state
      mov rsi, qword ptr [rsp + 010h]                            ; restoring slots to previous scope state
    func$intToStr$while$AfterStringIncref$1:                     ; after String incref
    ; Decrement reference count for copy of buffer (static type: String'32) via decrefMaybeString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, rsi                                                 ; arg #2: copy of buffer's type
    mov rcx, rbx                                                 ; arg #1: copy of buffer's value
    call decrefMaybeString                                       ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    ; Decrement reference count for digitToStr return value (static type: String'32) via decrefMaybeString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, qword ptr [rsp + 048h]                              ; arg #2: digitToStr return value's type
    mov rcx, qword ptr [rsp + 050h]                              ; arg #1: digitToStr return value's value
    call decrefMaybeString                                       ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    ; Decrement reference count for concat return value (static type: String'32) via decrefMaybeString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, qword ptr [rsp + 038h]                              ; arg #2: concat return value's type
    mov rcx, qword ptr [rsp + 040h]                              ; arg #1: concat return value's value
    call decrefMaybeString                                       ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    mov rax, qword ptr [rsp + 038h]                              ; restoring slots to previous scope state
    mov rdi, qword ptr [rsp + 040h]                              ; restoring slots to previous scope state
    mov r13, qword ptr [rsp + 048h]                              ; restoring slots to previous scope state
    jmp func$intToStr$while$top                                  ; return to top of while
  func$intToStr$while$bottom:                                    ; bottom of while
  ; Line 474: return buffer;
  mov r12, r13                                                   ; make a copy of buffer's value in case it changes before we use it
  mov qword ptr [rsp + 048h], r13                                ; move buffer variable's value out of r13
  mov r13, r14                                                   ; make a copy of buffer's type in case it changes before we use it
  ; increment reference count for copy of buffer if necessary
  cmp r13, 020h                                                  ; compare type of copy of buffer to String
  jne func$intToStr$AfterStringIncref$1                          ; if not a String, skip incref
    mov qword ptr [rsp + 040h], r14                              ; move buffer variable's type out of r14
    mov r14, qword ptr [r12]                                     ; dereference string to get to reference count
    cmp r14, 0                                                   ; compare string reference count to 0
    jns func$intToStr$StringIncref$1                             ; if reference count is negative (constant strings), skip incref
    mov r14, qword ptr [rsp + 040h]                              ; restoring slots to previous scope state
    jmp func$intToStr$AfterStringIncref$1                        ; skip incref for string constants
    func$intToStr$StringIncref$1:                                ; real String
      inc qword ptr [r12]                                        ; increment reference count of copy of buffer
    mov r14, qword ptr [rsp + 040h]                              ; restoring slots to previous scope state
  func$intToStr$AfterStringIncref$1:                             ; after String incref
  cmp r13, 000h                                                  ; compare type of copy of buffer to <sentinel>
  jne func$intToStr$inttostrReturnValue$TypeMatch                ; skip next block if copy of buffer is not sentinel
    ; Error handling block for intToStr return value
    int 3                                                        ; call debugger
    ;  - print(returnValueTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r15, offset returnValueTypeCheckFailureMessage           ; reading returnValueTypeCheckFailureMessage for push
    push r15                                                     ; value of argument #1 (returnValueTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 050h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 050h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r10, qword ptr [rsp + 050h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 050h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$intToStr$inttostrReturnValue$TypeMatch:                   ; after block
  mov rbx, qword ptr [rbp + 030h]                                ; get pointer to return value of intToStr into register to dereference it
  mov qword ptr [rbx], r12                                       ; intToStr return value
  mov rsi, qword ptr [rbp + 028h]                                ; get pointer to return value type of intToStr into register to dereference it
  mov qword ptr [rsi], r13                                       ; type of intToStr return value
  ; increment reference count for copy of buffer if necessary
  cmp r13, 020h                                                  ; compare type of copy of buffer to String
  jne func$intToStr$AfterStringIncref$2                          ; if not a String, skip incref
    mov rdi, qword ptr [r12]                                     ; dereference string to get to reference count
    cmp rdi, 0                                                   ; compare string reference count to 0
    jns func$intToStr$StringIncref$2                             ; if reference count is negative (constant strings), skip incref
    jmp func$intToStr$AfterStringIncref$2                        ; skip incref for string constants
    func$intToStr$StringIncref$2:                                ; real String
      inc qword ptr [r12]                                        ; increment reference count of copy of buffer
  func$intToStr$AfterStringIncref$2:                             ; after String incref
  ; Decrement reference count for buffer variable (static type: String'32) via decrefMaybeString
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, r14                                                   ; arg #2: buffer variable's type
  mov rcx, qword ptr [rsp + 068h]                                ; arg #1: buffer variable's value
  call decrefMaybeString                                         ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for copy of buffer (static type: String'32) via decrefMaybeString
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, r13                                                   ; arg #2: copy of buffer's type
  mov rcx, r12                                                   ; arg #1: copy of buffer's value
  call decrefMaybeString                                         ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  func$intToStr$epilog: 
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 058h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; _joinOffset
dq func$_joinOffset$annotation
func$_joinOffset:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 048h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 088h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 003h                                                  ; compare parameter count of _joinOffset to 3 (integer)
  je func$_joinOffset$parameterCountCheck$continuation           ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 048h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 048h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 048h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 048h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_joinOffset$parameterCountCheck$continuation:             ; end of parameter count check
  ; Check type of parameter 0, items (expecting StringList)
  mov rsi, qword ptr [rbp + 038h]                                ; store items's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 005h                                       ; check that items is StringList
  jc func$_joinOffset$items$TypeMatch                            ; skip next block if the type matches
    ; Error handling block for items
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 048h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 048h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 048h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 048h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_joinOffset$items$TypeMatch:                              ; after block
  ; Check type of parameter 1, joiner (expecting String)
  mov r10, qword ptr [rbp + 048h]                                ; store joiner's type in testByte value slot
  mov rax, r10                                                   ; move testByte to testByte
  mov rbx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rbx                                                        ; adjust to the relative start of that type's entry in the type table
  mov rsi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rsi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 003h                                       ; check that joiner is String
  jc func$_joinOffset$joiner$TypeMatch                           ; skip next block if the type matches
    ; Error handling block for joiner
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 048h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 048h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 048h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 048h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_joinOffset$joiner$TypeMatch:                             ; after block
  ; Check type of parameter 2, offset (expecting Integer)
  mov r14, qword ptr [rbp + 058h]                                ; store offset's type in testByte value slot
  mov rax, r14                                                   ; move testByte to testByte
  mov r15, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r15                                                        ; adjust to the relative start of that type's entry in the type table
  mov r10, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r10                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that offset is Integer
  jc func$_joinOffset$offset$TypeMatch                           ; skip next block if the type matches
    ; Error handling block for offset
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rbx, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push rbx                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rsi, qword ptr [rsp + 048h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 048h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rdi, qword ptr [rsp + 048h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 048h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_joinOffset$offset$TypeMatch:                             ; after block
  ; Line 478: if (len(items) - offset == 1) { ...
  ; Call len with 1 arguments
  push qword ptr [rbp + 040h]                                    ; value of argument #1 (items)
  push qword ptr [rbp + 038h]                                    ; type of argument #1
  lea rax, qword ptr [rsp + 048h]                                ; load address of return value's value
  push rax                                                       ; internal argument 6: pointer to return value slot's value
  lea rax, qword ptr [rsp + 048h]                                ; load address of return value's type
  push rax                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call func$len                                                  ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  cmp qword ptr [rsp + 030h], 000h                               ; compare type of len return value to <sentinel>
  jne func$_joinOffset$lenItems$TypeMatch                        ; skip next block if len return value is not sentinel
    ; Error handling block for len(items)
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r15, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r15                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r10, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_joinOffset$lenItems$TypeMatch:                           ; after block
  cmp qword ptr [rbp + 058h], 000h                               ; compare type of offset to <sentinel>
  jne func$_joinOffset$offset$TypeMatch$1                        ; skip next block if offset is not sentinel
    ; Error handling block for offset
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rsi, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push rsi                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rdi, qword ptr [rsp + 038h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 038h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r12, qword ptr [rsp + 038h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 038h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_joinOffset$offset$TypeMatch$1:                           ; after block
  mov r13, qword ptr [rsp + 038h]                                ; assign value of len return value to value of - operator result
  sub r13, qword ptr [rbp + 060h]                                ; compute (len return value) - (offset)
  xor r14, r14                                                   ; zero value result of == (testing - operator result and 1) to put the boolean in
  cmp r13, 001h                                                  ; values equal?
  sete r14b                                                      ; put result in value result of == (testing - operator result and 1)
  mov rax, 01eh                                                  ; value result of == (testing - operator result and 1) is a Boolean'30
  xor r15, r15                                                   ; zero type result of == (testing - operator result and 1) to put the boolean in
  mov r10, 01fh                                                  ; reading type of - operator result for comparison with type of 1
  cmp r10, 01fh                                                  ; types equal?
  sete r15b                                                      ; put result in type result of == (testing - operator result and 1)
  mov rbx, 01eh                                                  ; type result of == (testing - operator result and 1) is a Boolean'30
  mov rsi, r14                                                   ; assign value of value result of == (testing - operator result and 1) to value of == operator result
  and rsi, r15                                                   ; && type temp and value temp
  cmp rsi, 000h                                                  ; compare == operator result to false
  je func$_joinOffset$if$continuation                            ; len(items) - offset == 1
    ; Line 479: return items[offset];
    cmp qword ptr [rbp + 038h], 000h                             ; compare type of items to <sentinel>
    jne func$_joinOffset$Joinoffset$if$items$TypeMatch           ; skip next block if items is not sentinel
      ; Error handling block for items
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rdi, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rdi                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r12, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 048h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r13, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r13                                                   ; internal argument 6: pointer to return value slot's value
      lea r13, qword ptr [rsp + 048h]                            ; load address of return value's type
      push r13                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
    func$_joinOffset$Joinoffset$if$items$TypeMatch:              ; after block
    cmp qword ptr [rbp + 058h], 000h                             ; compare type of offset to <sentinel>
    jne func$_joinOffset$Joinoffset$if$offset$TypeMatch          ; skip next block if offset is not sentinel
      ; Error handling block for offset
      int 3                                                      ; call debugger
      ;  - print(subscriptTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r14, offset subscriptTypeCheckFailureMessage           ; reading subscriptTypeCheckFailureMessage for push
      push r14                                                   ; value of argument #1 (subscriptTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rax, qword ptr [rsp + 048h]                            ; load address of return value's value
      push rax                                                   ; internal argument 6: pointer to return value slot's value
      lea rax, qword ptr [rsp + 048h]                            ; load address of return value's type
      push rax                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r15, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r15                                                   ; internal argument 6: pointer to return value slot's value
      lea r15, qword ptr [rsp + 048h]                            ; load address of return value's type
      push r15                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
    func$_joinOffset$Joinoffset$if$offset$TypeMatch:             ; after block
    mov r10, qword ptr [rbp + 040h]                              ; get items into register to dereference it
    mov rbx, qword ptr [r10 + 038h]                              ; list data is the second field in its block
    mov rsi, qword ptr [rbx + 008h]                              ; read length from the list data block's metadata
    lea rdi, qword ptr [rbx + 020h]                              ; compute address of 0th entry in list data block
    cmp qword ptr [rbp + 060h], rsi                              ; compare offset to length of list
    jge func$_joinOffset$Joinoffset$if$subscript$boundsError     ; index out of range (too high)
    cmp qword ptr [rbp + 060h], 000h                             ; compare offset to 0 (integer)
    jge func$_joinOffset$Joinoffset$if$subscript$inBounds        ; index not out of range (not negative)
    func$_joinOffset$Joinoffset$if$subscript$boundsError:        ; invalid index
      ; Error handling block for subscript bounds error
      int 3                                                      ; call debugger
      ;  - print(boundsFailureMessage)
      ; Call __print with 1 arguments
      mov r12, offset boundsFailureMessage                       ; reading boundsFailureMessage for push
      push r12                                                   ; value of argument #1 (boundsFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r13, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r13                                                   ; internal argument 6: pointer to return value slot's value
      lea r13, qword ptr [rsp + 048h]                            ; load address of return value's type
      push r13                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r14, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r14                                                   ; internal argument 6: pointer to return value slot's value
      lea r14, qword ptr [rsp + 048h]                            ; load address of return value's type
      push r14                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
    func$_joinOffset$Joinoffset$if$subscript$inBounds:           ; valid index
    mov rax, qword ptr [rbp + 060h]                              ; assign value of offset to value of index into list * 16
    shl rax, 004h                                                ; multiply by 8*2
    mov r15, rdi                                                 ; assign value of base address of list to value of pointer to items[offset]
    add r15, rax                                                 ; compute address of specified list entry (result in pointer to items[offset])
    mov r10, qword ptr [r15 + 008h]                              ; value of items[offset]
    mov rbx, qword ptr [r15]                                     ; type of items[offset]
    ; increment reference count for copy of items[offset] if necessary
    cmp rbx, 020h                                                ; compare type of copy of items[offset] to String
    jne func$_joinOffset$Joinoffset$if$AfterStringIncref         ; if not a String, skip incref
      mov rsi, qword ptr [r10]                                   ; dereference string to get to reference count
      cmp rsi, 0                                                 ; compare string reference count to 0
      jns func$_joinOffset$Joinoffset$if$StringIncref            ; if reference count is negative (constant strings), skip incref
      jmp func$_joinOffset$Joinoffset$if$AfterStringIncref       ; skip incref for string constants
      func$_joinOffset$Joinoffset$if$StringIncref:               ; real String
        inc qword ptr [r10]                                      ; increment reference count of copy of items[offset]
    func$_joinOffset$Joinoffset$if$AfterStringIncref:            ; after String incref
    cmp rbx, 000h                                                ; compare type of copy of items[offset] to <sentinel>
    jne func$_joinOffset$Joinoffset$if$JoinoffsetReturnValue$TypeMatch ; skip next block if copy of items[offset] is not sentinel
      ; Error handling block for _joinOffset return value
      int 3                                                      ; call debugger
      ;  - print(returnValueTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rdi, offset returnValueTypeCheckFailureMessage         ; reading returnValueTypeCheckFailureMessage for push
      push rdi                                                   ; value of argument #1 (returnValueTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r12, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 048h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 068h], r10                            ; move copy of items[offset]'s value out of r10
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r13, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r13                                                   ; internal argument 6: pointer to return value slot's value
      lea r13, qword ptr [rsp + 048h]                            ; load address of return value's type
      push r13                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov r10, qword ptr [rsp + 028h]                            ; restoring slots to previous scope state
    func$_joinOffset$Joinoffset$if$JoinoffsetReturnValue$TypeMatch:  ; after block
    mov r14, qword ptr [rbp + 030h]                              ; get pointer to return value of _joinOffset into register to dereference it
    mov qword ptr [r14], r10                                     ; _joinOffset return value
    mov rax, qword ptr [rbp + 028h]                              ; get pointer to return value type of _joinOffset into register to dereference it
    mov qword ptr [rax], rbx                                     ; type of _joinOffset return value
    ; increment reference count for copy of items[offset] if necessary
    cmp rbx, 020h                                                ; compare type of copy of items[offset] to String
    jne func$_joinOffset$Joinoffset$if$AfterStringIncref$1       ; if not a String, skip incref
      mov r15, qword ptr [r10]                                   ; dereference string to get to reference count
      cmp r15, 0                                                 ; compare string reference count to 0
      jns func$_joinOffset$Joinoffset$if$StringIncref$1          ; if reference count is negative (constant strings), skip incref
      jmp func$_joinOffset$Joinoffset$if$AfterStringIncref$1     ; skip incref for string constants
      func$_joinOffset$Joinoffset$if$StringIncref$1:             ; real String
        inc qword ptr [r10]                                      ; increment reference count of copy of items[offset]
    func$_joinOffset$Joinoffset$if$AfterStringIncref$1:          ; after String incref
    ; Decrement reference count for copy of items[offset] (static type: String'32) via decrefMaybeString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, rbx                                                 ; arg #2: copy of items[offset]'s type
    mov rcx, r10                                                 ; arg #1: copy of items[offset]'s value
    mov qword ptr [rsp + 058h], r10                              ; move copy of items[offset]'s value out of r10
    call decrefMaybeString                                       ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    jmp func$_joinOffset$epilog                                  ; return
  func$_joinOffset$if$continuation:                              ; end of if
  ; Line 481: return concat(items[offset], joiner, _joinOffset(items, joiner, ...
  cmp qword ptr [rbp + 038h], 000h                               ; compare type of items to <sentinel>
  jne func$_joinOffset$items$TypeMatch$1                         ; skip next block if items is not sentinel
    ; Error handling block for items
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rbx, qword ptr [rsp + 048h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 048h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rsi, qword ptr [rsp + 048h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 048h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_joinOffset$items$TypeMatch$1:                            ; after block
  cmp qword ptr [rbp + 058h], 000h                               ; compare type of offset to <sentinel>
  jne func$_joinOffset$offset$TypeMatch$2                        ; skip next block if offset is not sentinel
    ; Error handling block for offset
    int 3                                                        ; call debugger
    ;  - print(subscriptTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset subscriptTypeCheckFailureMessage             ; reading subscriptTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (subscriptTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 048h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 048h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 048h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 048h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_joinOffset$offset$TypeMatch$2:                           ; after block
  mov r14, qword ptr [rbp + 040h]                                ; get items into register to dereference it
  mov rax, qword ptr [r14 + 038h]                                ; list data is the second field in its block
  mov r15, qword ptr [rax + 008h]                                ; read length from the list data block's metadata
  lea r10, qword ptr [rax + 020h]                                ; compute address of 0th entry in list data block
  cmp qword ptr [rbp + 060h], r15                                ; compare offset to length of list
  jge func$_joinOffset$subscript$boundsError                     ; index out of range (too high)
  cmp qword ptr [rbp + 060h], 000h                               ; compare offset to 0 (integer)
  jge func$_joinOffset$subscript$inBounds                        ; index not out of range (not negative)
  func$_joinOffset$subscript$boundsError:                        ; invalid index
    ; Error handling block for subscript bounds error
    int 3                                                        ; call debugger
    ;  - print(boundsFailureMessage)
    ; Call __print with 1 arguments
    mov rbx, offset boundsFailureMessage                         ; reading boundsFailureMessage for push
    push rbx                                                     ; value of argument #1 (boundsFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rsi, qword ptr [rsp + 048h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 048h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 068h], r10                              ; move base address of list's value out of r10
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rdi, qword ptr [rsp + 048h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 048h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov r10, qword ptr [rsp + 028h]                              ; restoring slots to previous scope state
  func$_joinOffset$subscript$inBounds:                           ; valid index
  mov r12, qword ptr [rbp + 060h]                                ; assign value of offset to value of index into list * 16
  shl r12, 004h                                                  ; multiply by 8*2
  mov r13, r10                                                   ; assign value of base address of list to value of pointer to items[offset]
  add r13, r12                                                   ; compute address of specified list entry (result in pointer to items[offset])
  mov r14, qword ptr [r13 + 008h]                                ; value of items[offset]
  mov rax, qword ptr [r13]                                       ; type of items[offset]
  ; increment reference count for copy of items[offset] if necessary
  cmp rax, 020h                                                  ; compare type of copy of items[offset] to String
  jne func$_joinOffset$AfterStringIncref                         ; if not a String, skip incref
    mov r15, qword ptr [r14]                                     ; dereference string to get to reference count
    cmp r15, 0                                                   ; compare string reference count to 0
    jns func$_joinOffset$StringIncref                            ; if reference count is negative (constant strings), skip incref
    jmp func$_joinOffset$AfterStringIncref                       ; skip incref for string constants
    func$_joinOffset$StringIncref:                               ; real String
      inc qword ptr [r14]                                        ; increment reference count of copy of items[offset]
  func$_joinOffset$AfterStringIncref:                            ; after String incref
  cmp qword ptr [rbp + 058h], 000h                               ; compare type of offset to <sentinel>
  jne func$_joinOffset$offset$TypeMatch$3                        ; skip next block if offset is not sentinel
    ; Error handling block for offset
    int 3                                                        ; call debugger
    ;  - print(operandTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset operandTypeCheckFailureMessage               ; reading operandTypeCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (operandTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rbx, qword ptr [rsp + 048h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 048h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    mov qword ptr [rsp + 068h], rax                              ; move copy of items[offset]'s type out of rax
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rsi, qword ptr [rsp + 048h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 048h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    mov rax, qword ptr [rsp + 028h]                              ; restoring slots to previous scope state
  func$_joinOffset$offset$TypeMatch$3:                           ; after block
  mov qword ptr [rsp + 038h], r14                                ; move copy of items[offset]'s value out of r14
  mov r14, qword ptr [rbp + 060h]                                ; assign value of offset to value of + operator result
  add r14, 001h                                                  ; compute (offset) + (1) (result in + operator result)
  ; Call _joinOffset with 3 arguments
  push r14                                                       ; value of argument #3 (+ operator result)
  push 01fh                                                      ; type of argument #3 (Integer'31)
  push qword ptr [rbp + 050h]                                    ; value of argument #2 (joiner)
  push qword ptr [rbp + 048h]                                    ; type of argument #2
  push qword ptr [rbp + 040h]                                    ; value of argument #1 (items)
  push qword ptr [rbp + 038h]                                    ; type of argument #1
  lea rbx, qword ptr [rsp + 060h]                                ; load address of return value's value
  push rbx                                                       ; internal argument 6: pointer to return value slot's value
  lea rbx, qword ptr [rsp + 060h]                                ; load address of return value's type
  push rbx                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 003h                                                  ; internal argument 1: number of actual arguments
  mov qword ptr [rsp + 080h], rax                                ; move copy of items[offset]'s type out of rax
  call func$_joinOffset                                          ; jump to subroutine
  add rsp, 060h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Call concat with 3 arguments
  push qword ptr [rsp + 030h]                                    ; value of argument #3 (_joinOffset return value)
  push qword ptr [rsp + 030h]                                    ; type of argument #3
  push qword ptr [rbp + 050h]                                    ; value of argument #2 (joiner)
  push qword ptr [rbp + 048h]                                    ; type of argument #2
  push qword ptr [rsp + 058h]                                    ; value of argument #1 (copy of items[offset])
  push qword ptr [rsp + 048h]                                    ; type of argument #1
  lea r13, qword ptr [rsp + 048h]                                ; load address of return value's value
  push r13                                                       ; internal argument 6: pointer to return value slot's value
  lea r13, qword ptr [rsp + 048h]                                ; load address of return value's type
  push r13                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 003h                                                  ; internal argument 1: number of actual arguments
  call func$concat                                               ; jump to subroutine
  add rsp, 060h                                                  ; release shadow space and arguments (result in stack pointer)
  cmp qword ptr [rsp + 010h], 000h                               ; compare type of concat return value to <sentinel>
  jne func$_joinOffset$JoinoffsetReturnValue$TypeMatch           ; skip next block if concat return value is not sentinel
    ; Error handling block for _joinOffset return value
    int 3                                                        ; call debugger
    ;  - print(returnValueTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r14, offset returnValueTypeCheckFailureMessage           ; reading returnValueTypeCheckFailureMessage for push
    push r14                                                     ; value of argument #1 (returnValueTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 018h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 018h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_joinOffset$JoinoffsetReturnValue$TypeMatch:              ; after block
  mov r10, qword ptr [rsp + 018h]                                ; read second operand of mov (concat return value) for MoveToDerefInstruction
  mov rbx, qword ptr [rbp + 030h]                                ; get pointer to return value of _joinOffset into register to dereference it
  mov qword ptr [rbx], r10                                       ; _joinOffset return value
  mov rsi, qword ptr [rsp + 010h]                                ; reading type of concat return value
  mov rdi, qword ptr [rbp + 028h]                                ; get pointer to return value type of _joinOffset into register to dereference it
  mov qword ptr [rdi], rsi                                       ; type of _joinOffset return value
  ; increment reference count for concat return value if necessary
  cmp rsi, 020h                                                  ; compare type of concat return value to String
  jne func$_joinOffset$AfterStringIncref$1                       ; if not a String, skip incref
    mov r12, qword ptr [r10]                                     ; dereference string to get to reference count
    cmp r12, 0                                                   ; compare string reference count to 0
    jns func$_joinOffset$StringIncref$1                          ; if reference count is negative (constant strings), skip incref
    jmp func$_joinOffset$AfterStringIncref$1                     ; skip incref for string constants
    func$_joinOffset$StringIncref$1:                             ; real String
      inc qword ptr [r10]                                        ; increment reference count of concat return value
  func$_joinOffset$AfterStringIncref$1:                          ; after String incref
  ; Decrement reference count for copy of items[offset] (static type: String'32) via decrefMaybeString
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 040h]                                ; arg #2: copy of items[offset]'s type
  mov rcx, qword ptr [rsp + 058h]                                ; arg #1: copy of items[offset]'s value
  mov qword ptr [rsp + 038h], r10                                ; move concat return value's value out of r10
  call decrefMaybeString                                         ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for concat return value (static type: String'32) via decrefMaybeString
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, rsi                                                   ; arg #2: concat return value's type
  mov rcx, qword ptr [rsp + 038h]                                ; arg #1: concat return value's value
  call decrefMaybeString                                         ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  ; Decrement reference count for _joinOffset return value (static type: String'32) via decrefMaybeString
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, qword ptr [rsp + 048h]                                ; arg #2: _joinOffset return value's type
  mov rcx, qword ptr [rsp + 050h]                                ; arg #1: _joinOffset return value's value
  call decrefMaybeString                                         ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  func$_joinOffset$epilog: 
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 048h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; join
dq func$join$annotation
func$join:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 028h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 068h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 002h                                                  ; compare parameter count of join to 2 (integer)
  je func$join$parameterCountCheck$continuation                  ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 028h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 028h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 028h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 028h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$join$parameterCountCheck$continuation:                    ; end of parameter count check
  ; Check type of parameter 0, items (expecting StringList)
  mov rsi, qword ptr [rbp + 038h]                                ; store items's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 005h                                       ; check that items is StringList
  jc func$join$items$TypeMatch                                   ; skip next block if the type matches
    ; Error handling block for items
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$join$items$TypeMatch:                                     ; after block
  ; Check type of parameter 1, joiner (expecting String)
  mov r10, qword ptr [rbp + 048h]                                ; store joiner's type in testByte value slot
  mov rax, r10                                                   ; move testByte to testByte
  mov rbx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rbx                                                        ; adjust to the relative start of that type's entry in the type table
  mov rsi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rsi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 003h                                       ; check that joiner is String
  jc func$join$joiner$TypeMatch                                  ; skip next block if the type matches
    ; Error handling block for joiner
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rdi, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push rdi                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r12, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r12                                                     ; internal argument 6: pointer to return value slot's value
    lea r12, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r12                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r13, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$join$joiner$TypeMatch:                                    ; after block
  ; Line 485: if (len(items) == 0) { ...
  ; Call len with 1 arguments
  push qword ptr [rbp + 040h]                                    ; value of argument #1 (items)
  push qword ptr [rbp + 038h]                                    ; type of argument #1
  lea rax, qword ptr [rsp + 028h]                                ; load address of return value's value
  push rax                                                       ; internal argument 6: pointer to return value slot's value
  lea rax, qword ptr [rsp + 028h]                                ; load address of return value's type
  push rax                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call func$len                                                  ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  xor rbx, rbx                                                   ; zero value result of == (testing len return value and 0) to put the boolean in
  cmp qword ptr [rsp + 018h], 000h                               ; values equal?
  sete bl                                                        ; put result in value result of == (testing len return value and 0)
  mov rsi, 01eh                                                  ; value result of == (testing len return value and 0) is a Boolean'30
  xor rdi, rdi                                                   ; zero type result of == (testing len return value and 0) to put the boolean in
  cmp qword ptr [rsp + 010h], 01fh                               ; types equal?
  sete dil                                                       ; put result in type result of == (testing len return value and 0)
  mov r12, 01eh                                                  ; type result of == (testing len return value and 0) is a Boolean'30
  mov r13, rbx                                                   ; assign value of value result of == (testing len return value and 0) to value of == operator result
  and r13, rdi                                                   ; && type temp and value temp
  cmp r13, 000h                                                  ; compare == operator result to false
  je func$join$if$continuation                                   ; len(items) == 0
    ; Line 486: return '';
    mov rax, offset string$28                                    ; read second operand of mov (string) for MoveToDerefInstruction
    mov rbx, qword ptr [rbp + 030h]                              ; get pointer to return value of join into register to dereference it
    mov qword ptr [rbx], rax                                     ; join return value
    mov rsi, qword ptr [rbp + 028h]                              ; get pointer to return value type of join into register to dereference it
    mov qword ptr [rsi], 020h                                    ; type of join return value (String'32)
    jmp func$join$epilog                                         ; return
  func$join$if$continuation:                                     ; end of if
  ; Line 489: return _joinOffset(items, joiner, 0);
  ; Call _joinOffset with 3 arguments
  push 000h                                                      ; value of argument #3 (0)
  push 01fh                                                      ; type of argument #3 (Integer'31)
  push qword ptr [rbp + 050h]                                    ; value of argument #2 (joiner)
  push qword ptr [rbp + 048h]                                    ; type of argument #2
  push qword ptr [rbp + 040h]                                    ; value of argument #1 (items)
  push qword ptr [rbp + 038h]                                    ; type of argument #1
  lea r14, qword ptr [rsp + 048h]                                ; load address of return value's value
  push r14                                                       ; internal argument 6: pointer to return value slot's value
  lea r14, qword ptr [rsp + 048h]                                ; load address of return value's type
  push r14                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 003h                                                  ; internal argument 1: number of actual arguments
  call func$_joinOffset                                          ; jump to subroutine
  add rsp, 060h                                                  ; release shadow space and arguments (result in stack pointer)
  cmp qword ptr [rsp + 010h], 000h                               ; compare type of _joinOffset return value to <sentinel>
  jne func$join$joinReturnValue$TypeMatch                        ; skip next block if _joinOffset return value is not sentinel
    ; Error handling block for join return value
    int 3                                                        ; call debugger
    ;  - print(returnValueTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r15, offset returnValueTypeCheckFailureMessage           ; reading returnValueTypeCheckFailureMessage for push
    push r15                                                     ; value of argument #1 (returnValueTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r10, qword ptr [rsp + 018h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 018h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rax, qword ptr [rsp + 018h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 018h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$join$joinReturnValue$TypeMatch:                           ; after block
  mov rbx, qword ptr [rsp + 018h]                                ; read second operand of mov (_joinOffset return value) for MoveToDerefInstruction
  mov rsi, qword ptr [rbp + 030h]                                ; get pointer to return value of join into register to dereference it
  mov qword ptr [rsi], rbx                                       ; join return value
  mov rdi, qword ptr [rsp + 010h]                                ; reading type of _joinOffset return value
  mov r12, qword ptr [rbp + 028h]                                ; get pointer to return value type of join into register to dereference it
  mov qword ptr [r12], rdi                                       ; type of join return value
  ; increment reference count for _joinOffset return value if necessary
  cmp rdi, 020h                                                  ; compare type of _joinOffset return value to String
  jne func$join$AfterStringIncref                                ; if not a String, skip incref
    mov r13, qword ptr [rbx]                                     ; dereference string to get to reference count
    cmp r13, 0                                                   ; compare string reference count to 0
    jns func$join$StringIncref                                   ; if reference count is negative (constant strings), skip incref
    jmp func$join$AfterStringIncref                              ; skip incref for string constants
    func$join$StringIncref:                                      ; real String
      inc qword ptr [rbx]                                        ; increment reference count of _joinOffset return value
  func$join$AfterStringIncref:                                   ; after String incref
  ; Decrement reference count for _joinOffset return value (static type: String'32) via decrefMaybeString
  sub rsp, 20h                                                   ; allocate shadow space for decref function
  mov rdx, rdi                                                   ; arg #2: _joinOffset return value's type
  mov rcx, rbx                                                   ; arg #1: _joinOffset return value's value
  call decrefMaybeString                                         ; call decref
  add rsp, 20h                                                   ; free shadow space for decref
  func$join$epilog: 
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 028h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; _stringify
dq func$_stringify$annotation
func$_stringify:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 0a8h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 0e8h]                                ; set up frame pointer
  ; Check parameter count
  cmp rcx, 001h                                                  ; compare parameter count of _stringify to 1 (integer)
  je func$_stringify$parameterCountCheck$continuation            ; check number of parameters is as expected
    ; Error handling block for parameter count
    int 3                                                        ; call debugger
    ;  - print(parameterCountCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r10, offset parameterCountCheckFailureMessage            ; reading parameterCountCheckFailureMessage for push
    push r10                                                     ; value of argument #1 (parameterCountCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rax, qword ptr [rsp + 0a8h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 0a8h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rbx, qword ptr [rsp + 0a8h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 0a8h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_stringify$parameterCountCheck$continuation:              ; end of parameter count check
  ; Check type of parameter 0, arg (expecting Anything)
  mov rsi, qword ptr [rbp + 038h]                                ; store arg's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 006h                                       ; check that arg is Anything
  jc func$_stringify$arg$TypeMatch                               ; skip next block if the type matches
    ; Error handling block for arg
    int 3                                                        ; call debugger
    ;  - print(parameterTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov r13, offset parameterTypeCheckFailureMessage             ; reading parameterTypeCheckFailureMessage for push
    push r13                                                     ; value of argument #1 (parameterTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 0a8h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 0a8h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r15, qword ptr [rsp + 0a8h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 0a8h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_stringify$arg$TypeMatch:                                 ; after block
  ; Line 493: if (arg is String) { ...
  mov r10, qword ptr [rbp + 038h]                                ; store arg's type in testByte value slot
  mov rax, r10                                                   ; move testByte to testByte
  mov rbx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rbx                                                        ; adjust to the relative start of that type's entry in the type table
  mov rsi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rsi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 003h                                       ; check that arg is String
  mov rdi, 000h                                                  ; clear is expression result
  setc dil                                                       ; store result in is expression result
  cmp rdi, 000h                                                  ; compare is expression result to false
  je func$_stringify$if$continuation                             ; arg is String
    ; Line 494: return arg;
    mov r12, qword ptr [rbp + 038h]                              ; store arg's type in testByte value slot
    mov rax, r12                                                 ; move testByte to testByte
    mov r13, 002h                                                ; read operand of mul (type table width in bytes) 
    mul r13                                                      ; adjust to the relative start of that type's entry in the type table
    mov r14, offset typeTable                                    ; read second operand of + (type table pointer)
    add rax, r14                                                 ; finally offset all of that by the start of the type table itself (result in testByte)
    bt qword ptr [rax], 003h                                     ; check that _stringify return value is String
    jc func$_stringify$Stringify$if$StringifyReturnValue$TypeMatch ; skip next block if the type matches
      ; Error handling block for _stringify return value
      int 3                                                      ; call debugger
      ;  - print(returnValueTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r15, offset returnValueTypeCheckFailureMessage         ; reading returnValueTypeCheckFailureMessage for push
      push r15                                                   ; value of argument #1 (returnValueTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r9, qword ptr [rsp + 0a8h]                             ; load address of return value's value
      push r9                                                    ; internal argument 6: pointer to return value slot's value
      lea r9, qword ptr [rsp + 0a8h]                             ; load address of return value's type
      push r9                                                    ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r10, qword ptr [rsp + 0a8h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 0a8h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
    func$_stringify$Stringify$if$StringifyReturnValue$TypeMatch:  ; after block
    mov rbx, qword ptr [rbp + 040h]                              ; read second operand of mov (arg) for MoveToDerefInstruction
    mov rsi, qword ptr [rbp + 030h]                              ; get pointer to return value of _stringify into register to dereference it
    mov qword ptr [rsi], rbx                                     ; _stringify return value
    mov rdi, qword ptr [rbp + 038h]                              ; reading type of arg
    mov r12, qword ptr [rbp + 028h]                              ; get pointer to return value type of _stringify into register to dereference it
    mov qword ptr [r12], rdi                                     ; type of _stringify return value
    ; increment reference count for arg if necessary
    mov rax, qword ptr [rbp + 038h]                              ; store arg's type in testByte value slot
    mov r13, 002h                                                ; read operand of mul (type table width in bytes) 
    mul r13                                                      ; adjust to the relative start of that type's entry in the type table
    mov r14, offset typeTable                                    ; read second operand of + (type table pointer)
    add rax, r14                                                 ; finally offset all of that by the start of the type table itself (result in testByte)
    bt qword ptr [rax], 007h                                     ; check that possibly GarbageCollectable value is GarbageCollectable
    jnc func$_stringify$Stringify$if$AfterGCIncref               ; if not a GarbageCollectable, skip incref
      mov r15, qword ptr [rbp + 040h]                            ; read slot into register for dereferencing
      inc qword ptr [r15]                                        ; increment reference count of arg
    func$_stringify$Stringify$if$AfterGCIncref:                  ; after GarbageCollectable incref
    cmp qword ptr [rbp + 038h], 020h                             ; compare type of arg to String
    jne func$_stringify$Stringify$if$AfterStringIncref           ; if not a String, skip incref
      mov r10, qword ptr [rbp + 040h]                            ; get arg into register to dereference it
      mov r9, qword ptr [r10]                                    ; dereference string to get to reference count
      cmp r9, 0                                                  ; compare string reference count to 0
      jns func$_stringify$Stringify$if$StringIncref              ; if reference count is negative (constant strings), skip incref
      jmp func$_stringify$Stringify$if$AfterStringIncref         ; skip incref for string constants
      func$_stringify$Stringify$if$StringIncref:                 ; real String
        mov r8, qword ptr [rbp + 040h]                           ; read slot into register for dereferencing
        inc qword ptr [r8]                                       ; increment reference count of arg
    func$_stringify$Stringify$if$AfterStringIncref:              ; after String incref
    jmp func$_stringify$epilog                                   ; return
  func$_stringify$if$continuation:                               ; end of if
  ; Line 496: if (arg is Boolean) { ...
  mov rdx, qword ptr [rbp + 038h]                                ; store arg's type in testByte value slot
  mov qword ptr [rsp + 098h], rdx                                ; move testByte's value out of rdx
  mov rax, qword ptr [rsp + 098h]                                ; move testByte to testByte
  mov rcx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rcx                                                        ; adjust to the relative start of that type's entry in the type table
  mov rbx, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rbx                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 001h                                       ; check that arg is Boolean
  mov rsi, 000h                                                  ; clear is expression result
  setc sil                                                       ; store result in is expression result
  cmp rsi, 000h                                                  ; compare is expression result to false
  je func$_stringify$if$continuation$1                           ; arg is Boolean
    ; Line 497: if (arg) { ...
    cmp qword ptr [rbp + 040h], 000h                             ; compare arg to false
    je func$_stringify$Stringify$if$1$if$continuation            ; arg
      ; Line 498: return 'true';
      mov r14, offset string$29                                  ; read second operand of mov (string) for MoveToDerefInstruction
      mov r15, qword ptr [rbp + 030h]                            ; get pointer to return value of _stringify into register to dereference it
      mov qword ptr [r15], r14                                   ; _stringify return value
      mov r10, qword ptr [rbp + 028h]                            ; get pointer to return value type of _stringify into register to dereference it
      mov qword ptr [r10], 020h                                  ; type of _stringify return value (String'32)
      jmp func$_stringify$epilog                                 ; return
    func$_stringify$Stringify$if$1$if$continuation:              ; end of if
    ; Line 500: return 'false';
    mov rdi, offset string$30                                    ; read second operand of mov (string) for MoveToDerefInstruction
    mov r12, qword ptr [rbp + 030h]                              ; get pointer to return value of _stringify into register to dereference it
    mov qword ptr [r12], rdi                                     ; _stringify return value
    mov r13, qword ptr [rbp + 028h]                              ; get pointer to return value type of _stringify into register to dereference it
    mov qword ptr [r13], 020h                                    ; type of _stringify return value (String'32)
    jmp func$_stringify$epilog                                   ; return
  func$_stringify$if$continuation$1:                             ; end of if
  ; Line 502: if (arg is Null) { ...
  mov r14, qword ptr [rbp + 038h]                                ; store arg's type in testByte value slot
  mov rax, r14                                                   ; move testByte to testByte
  mov r15, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r15                                                        ; adjust to the relative start of that type's entry in the type table
  mov r10, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r10                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 000h                                       ; check that arg is Null
  mov rbx, 000h                                                  ; clear is expression result
  setc bl                                                        ; store result in is expression result
  cmp rbx, 000h                                                  ; compare is expression result to false
  je func$_stringify$if$continuation$2                           ; arg is Null
    ; Line 503: return 'null';
    mov r12, offset string$31                                    ; read second operand of mov (string) for MoveToDerefInstruction
    mov r13, qword ptr [rbp + 030h]                              ; get pointer to return value of _stringify into register to dereference it
    mov qword ptr [r13], r12                                     ; _stringify return value
    mov r14, qword ptr [rbp + 028h]                              ; get pointer to return value type of _stringify into register to dereference it
    mov qword ptr [r14], 020h                                    ; type of _stringify return value (String'32)
    jmp func$_stringify$epilog                                   ; return
  func$_stringify$if$continuation$2:                             ; end of if
  ; Line 505: if (arg is Integer) { ...
  mov rax, qword ptr [rbp + 038h]                                ; store arg's type in testByte value slot
  mov r15, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r15                                                        ; adjust to the relative start of that type's entry in the type table
  mov r10, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r10                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 002h                                       ; check that arg is Integer
  mov rbx, 000h                                                  ; clear is expression result
  setc bl                                                        ; store result in is expression result
  cmp rbx, 000h                                                  ; compare is expression result to false
  je func$_stringify$if$continuation$3                           ; arg is Integer
    ; Line 506: return intToStr(arg as Integer);
    mov rsi, qword ptr [rbp + 038h]                              ; store arg's type in testByte value slot
    mov rax, rsi                                                 ; move testByte to testByte
    mov rdi, 002h                                                ; read operand of mul (type table width in bytes) 
    mul rdi                                                      ; adjust to the relative start of that type's entry in the type table
    mov r9, offset typeTable                                     ; read second operand of + (type table pointer)
    add rax, r9                                                  ; finally offset all of that by the start of the type table itself (result in testByte)
    bt qword ptr [rax], 002h                                     ; check that arg as Integer is Integer
    jc func$_stringify$Stringify$if$3$argAsINteger$TypeMatch     ; skip next block if the type matches
      ; Error handling block for arg as Integer
      int 3                                                      ; call debugger
      ;  - print(asOperatorFailureMessage)
      ; Call __print with 1 arguments
      mov r8, offset asOperatorFailureMessage                    ; reading asOperatorFailureMessage for push
      push r8                                                    ; value of argument #1 (asOperatorFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rdx, qword ptr [rsp + 0a8h]                            ; load address of return value's value
      push rdx                                                   ; internal argument 6: pointer to return value slot's value
      lea rdx, qword ptr [rsp + 0a8h]                            ; load address of return value's type
      push rdx                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r12, qword ptr [rsp + 0a8h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 0a8h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
    func$_stringify$Stringify$if$3$argAsINteger$TypeMatch:       ; after block
    mov r13, qword ptr [rbp + 040h]                              ; copy value of arg for cast to Integer
    mov r14, qword ptr [rbp + 038h]                              ; copy type of arg for cast to Integer
    ; Call intToStr with 1 arguments
    push r13                                                     ; value of argument #1 (cast of arg to Integer)
    push r14                                                     ; type of argument #1
    lea rsi, qword ptr [rsp + 0a8h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 0a8h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$intToStr                                           ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    cmp qword ptr [rsp + 090h], 000h                             ; compare type of intToStr return value to <sentinel>
    jne func$_stringify$Stringify$if$3$StringifyReturnValue$TypeMatch ; skip next block if intToStr return value is not sentinel
      ; Error handling block for _stringify return value
      int 3                                                      ; call debugger
      ;  - print(returnValueTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rax, offset returnValueTypeCheckFailureMessage         ; reading returnValueTypeCheckFailureMessage for push
      push rax                                                   ; value of argument #1 (returnValueTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rdi, qword ptr [rsp + 098h]                            ; load address of return value's value
      push rdi                                                   ; internal argument 6: pointer to return value slot's value
      lea rdi, qword ptr [rsp + 098h]                            ; load address of return value's type
      push rdi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r12, qword ptr [rsp + 098h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 098h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
    func$_stringify$Stringify$if$3$StringifyReturnValue$TypeMatch:  ; after block
    mov r13, qword ptr [rsp + 098h]                              ; read second operand of mov (intToStr return value) for MoveToDerefInstruction
    mov r14, qword ptr [rbp + 030h]                              ; get pointer to return value of _stringify into register to dereference it
    mov qword ptr [r14], r13                                     ; _stringify return value
    mov r15, qword ptr [rsp + 090h]                              ; reading type of intToStr return value
    mov r10, qword ptr [rbp + 028h]                              ; get pointer to return value type of _stringify into register to dereference it
    mov qword ptr [r10], r15                                     ; type of _stringify return value
    ; increment reference count for intToStr return value if necessary
    cmp r15, 020h                                                ; compare type of intToStr return value to String
    jne func$_stringify$Stringify$if$3$AfterStringIncref         ; if not a String, skip incref
      mov rbx, qword ptr [r13]                                   ; dereference string to get to reference count
      cmp rbx, 0                                                 ; compare string reference count to 0
      jns func$_stringify$Stringify$if$3$StringIncref            ; if reference count is negative (constant strings), skip incref
      jmp func$_stringify$Stringify$if$3$AfterStringIncref       ; skip incref for string constants
      func$_stringify$Stringify$if$3$StringIncref:               ; real String
        inc qword ptr [r13]                                      ; increment reference count of intToStr return value
    func$_stringify$Stringify$if$3$AfterStringIncref:            ; after String incref
    ; Decrement reference count for intToStr return value (static type: String'32) via decrefMaybeString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, r15                                                 ; arg #2: intToStr return value's type
    mov rcx, r13                                                 ; arg #1: intToStr return value's value
    call decrefMaybeString                                       ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    jmp func$_stringify$epilog                                   ; return
  func$_stringify$if$continuation$3:                             ; end of if
  ; Line 508: if (arg is AnythingFunction) { ...
  mov rsi, qword ptr [rbp + 038h]                                ; store arg's type in testByte value slot
  mov rax, rsi                                                   ; move testByte to testByte
  mov rdi, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rdi                                                        ; adjust to the relative start of that type's entry in the type table
  add rax, 001h                                                  ; adjust to the byte containing the bit to check against (result in testByte)
  mov r12, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r12                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 001h                                       ; check that arg is AnythingFunction
  mov r9, 000h                                                   ; clear is expression result
  setc r9b                                                       ; store result in is expression result
  cmp r9, 000h                                                   ; compare is expression result to false
  je func$_stringify$if$continuation$4                           ; arg is AnythingFunction
    ; Line 509: Integer func = arg __as__ Integer;
    mov r8, qword ptr [rbp + 040h]                               ; force cast of arg to Integer
    mov r14, r8                                                  ; value initialization of variable declaration for func variable (force cast of arg to Integer)
    mov r15, 01fh                                                ; type initialization of variable declaration for func variable (Integer'31)
    ; Line 510: Integer annotation = __readFromAddress(func - 8);
    mov r10, r14                                                 ; make a copy of func's value in case it changes before we use it
    mov rbx, r15                                                 ; make a copy of func's type in case it changes before we use it
    cmp rbx, 000h                                                ; compare type of copy of func to <sentinel>
    jne func$_stringify$Stringify$if$4$func$TypeMatch            ; skip next block if copy of func is not sentinel
      ; Error handling block for func
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rsi, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rsi                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rax, qword ptr [rsp + 0a8h]                            ; load address of return value's value
      push rax                                                   ; internal argument 6: pointer to return value slot's value
      lea rax, qword ptr [rsp + 0a8h]                            ; load address of return value's type
      push rax                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 0c8h], r10                            ; move copy of func's value out of r10
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea rdi, qword ptr [rsp + 0a8h]                            ; load address of return value's value
      push rdi                                                   ; internal argument 6: pointer to return value slot's value
      lea rdi, qword ptr [rsp + 0a8h]                            ; load address of return value's type
      push rdi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov r10, qword ptr [rsp + 088h]                            ; restoring slots to previous scope state
    func$_stringify$Stringify$if$4$func$TypeMatch:               ; after block
    mov r15, r10                                                 ; assign value of copy of func to value of - operator result
    sub r15, 008h                                                ; compute (copy of func) - (8)
    ; Call __readFromAddress with 1 arguments
    mov rax, qword ptr [r15]                                     ; dereference first argument of __readFromAddress
    mov r14, rax                                                 ; value initialization of variable declaration for annotation variable (dereferenced - operator result)
    mov r15, 01fh                                                ; type initialization of variable declaration for annotation variable (Integer'31)
    ; Line 511: return concat('<function (', annotation __as__ String, ')>');
    mov r10, r14                                                 ; make a copy of annotation's value in case it changes before we use it
    mov rbx, r15                                                 ; make a copy of annotation's type in case it changes before we use it
    mov rsi, r10                                                 ; force cast of copy of annotation to String
    ; Call concat with 3 arguments
    mov r13, offset string$33                                    ; reading string for push
    push r13                                                     ; value of argument #3 (string)
    push 020h                                                    ; type of argument #3 (String'32)
    push rsi                                                     ; value of argument #2 (force cast of copy of annotation to String)
    push 020h                                                    ; type of argument #2 (String'32)
    mov r14, offset string$32                                    ; reading string for push
    push r14                                                     ; value of argument #1 (string)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r15, qword ptr [rsp + 0c8h]                              ; load address of return value's value
    push r15                                                     ; internal argument 6: pointer to return value slot's value
    lea r15, qword ptr [rsp + 0c8h]                              ; load address of return value's type
    push r15                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 003h                                                ; internal argument 1: number of actual arguments
    call func$concat                                             ; jump to subroutine
    add rsp, 060h                                                ; release shadow space and arguments (result in stack pointer)
    cmp qword ptr [rsp + 090h], 000h                             ; compare type of concat return value to <sentinel>
    jne func$_stringify$Stringify$if$4$StringifyReturnValue$TypeMatch ; skip next block if concat return value is not sentinel
      ; Error handling block for _stringify return value
      int 3                                                      ; call debugger
      ;  - print(returnValueTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r10, offset returnValueTypeCheckFailureMessage         ; reading returnValueTypeCheckFailureMessage for push
      push r10                                                   ; value of argument #1 (returnValueTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rbx, qword ptr [rsp + 098h]                            ; load address of return value's value
      push rbx                                                   ; internal argument 6: pointer to return value slot's value
      lea rbx, qword ptr [rsp + 098h]                            ; load address of return value's type
      push rbx                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea rsi, qword ptr [rsp + 098h]                            ; load address of return value's value
      push rsi                                                   ; internal argument 6: pointer to return value slot's value
      lea rsi, qword ptr [rsp + 098h]                            ; load address of return value's type
      push rsi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
    func$_stringify$Stringify$if$4$StringifyReturnValue$TypeMatch:  ; after block
    mov rax, qword ptr [rsp + 098h]                              ; read second operand of mov (concat return value) for MoveToDerefInstruction
    mov rdi, qword ptr [rbp + 030h]                              ; get pointer to return value of _stringify into register to dereference it
    mov qword ptr [rdi], rax                                     ; _stringify return value
    mov r12, qword ptr [rsp + 090h]                              ; reading type of concat return value
    mov r13, qword ptr [rbp + 028h]                              ; get pointer to return value type of _stringify into register to dereference it
    mov qword ptr [r13], r12                                     ; type of _stringify return value
    ; increment reference count for concat return value if necessary
    cmp r12, 020h                                                ; compare type of concat return value to String
    jne func$_stringify$Stringify$if$4$AfterStringIncref         ; if not a String, skip incref
      mov r14, qword ptr [rax]                                   ; dereference string to get to reference count
      cmp r14, 0                                                 ; compare string reference count to 0
      jns func$_stringify$Stringify$if$4$StringIncref            ; if reference count is negative (constant strings), skip incref
      jmp func$_stringify$Stringify$if$4$AfterStringIncref       ; skip incref for string constants
      func$_stringify$Stringify$if$4$StringIncref:               ; real String
        inc qword ptr [rax]                                      ; increment reference count of concat return value
    func$_stringify$Stringify$if$4$AfterStringIncref:            ; after String incref
    ; Decrement reference count for concat return value (static type: String'32) via decrefMaybeString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, r12                                                 ; arg #2: concat return value's type
    mov rcx, rax                                                 ; arg #1: concat return value's value
    mov qword ptr [rsp + 0b8h], rax                              ; move concat return value's value out of rax
    call decrefMaybeString                                       ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    jmp func$_stringify$epilog                                   ; return
  func$_stringify$if$continuation$4:                             ; end of if
  ; Line 513: if (arg is StringList) { ...
  mov r15, qword ptr [rbp + 038h]                                ; store arg's type in testByte value slot
  mov rax, r15                                                   ; move testByte to testByte
  mov r10, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r10                                                        ; adjust to the relative start of that type's entry in the type table
  mov rbx, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rbx                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 005h                                       ; check that arg is StringList
  mov rsi, 000h                                                  ; clear is expression result
  setc sil                                                       ; store result in is expression result
  cmp rsi, 000h                                                  ; compare is expression result to false
  je func$_stringify$if$continuation$5                           ; arg is StringList
    ; Line 514: return concat('[', join(arg as StringList, ', '), ']');
    mov r9, qword ptr [rbp + 038h]                               ; store arg's type in testByte value slot
    mov rax, r9                                                  ; move testByte to testByte
    mov r8, 002h                                                 ; read operand of mul (type table width in bytes) 
    mul r8                                                       ; adjust to the relative start of that type's entry in the type table
    mov rdx, offset typeTable                                    ; read second operand of + (type table pointer)
    add rax, rdx                                                 ; finally offset all of that by the start of the type table itself (result in testByte)
    bt qword ptr [rax], 005h                                     ; check that arg as StringList is StringList
    jc func$_stringify$Stringify$if$5$argAsSTringlist$TypeMatch  ; skip next block if the type matches
      ; Error handling block for arg as StringList
      int 3                                                      ; call debugger
      ;  - print(asOperatorFailureMessage)
      ; Call __print with 1 arguments
      mov rcx, offset asOperatorFailureMessage                   ; reading asOperatorFailureMessage for push
      push rcx                                                   ; value of argument #1 (asOperatorFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rdi, qword ptr [rsp + 0a8h]                            ; load address of return value's value
      push rdi                                                   ; internal argument 6: pointer to return value slot's value
      lea rdi, qword ptr [rsp + 0a8h]                            ; load address of return value's type
      push rdi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r12, qword ptr [rsp + 0a8h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 0a8h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
    func$_stringify$Stringify$if$5$argAsSTringlist$TypeMatch:    ; after block
    mov r13, qword ptr [rbp + 040h]                              ; copy value of arg for cast to StringList
    mov r14, qword ptr [rbp + 038h]                              ; copy type of arg for cast to StringList
    ; Call join with 2 arguments
    mov rsi, offset string$35                                    ; reading string for push
    push rsi                                                     ; value of argument #2 (string)
    push 020h                                                    ; type of argument #2 (String'32)
    push r13                                                     ; value of argument #1 (cast of arg to StringList)
    push r14                                                     ; type of argument #1
    lea rax, qword ptr [rsp + 0b8h]                              ; load address of return value's value
    push rax                                                     ; internal argument 6: pointer to return value slot's value
    lea rax, qword ptr [rsp + 0b8h]                              ; load address of return value's type
    push rax                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 002h                                                ; internal argument 1: number of actual arguments
    call func$join                                               ; jump to subroutine
    add rsp, 050h                                                ; release shadow space and arguments (result in stack pointer)
    ; Call concat with 3 arguments
    mov r14, offset string$36                                    ; reading string for push
    push r14                                                     ; value of argument #3 (string)
    push 020h                                                    ; type of argument #3 (String'32)
    push qword ptr [rsp + 0a8h]                                  ; value of argument #2 (join return value)
    push qword ptr [rsp + 0a8h]                                  ; type of argument #2
    mov r15, offset string$34                                    ; reading string for push
    push r15                                                     ; value of argument #1 (string)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r10, qword ptr [rsp + 0b8h]                              ; load address of return value's value
    push r10                                                     ; internal argument 6: pointer to return value slot's value
    lea r10, qword ptr [rsp + 0b8h]                              ; load address of return value's type
    push r10                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 003h                                                ; internal argument 1: number of actual arguments
    call func$concat                                             ; jump to subroutine
    add rsp, 060h                                                ; release shadow space and arguments (result in stack pointer)
    cmp qword ptr [rsp + 080h], 000h                             ; compare type of concat return value to <sentinel>
    jne func$_stringify$Stringify$if$5$StringifyReturnValue$TypeMatch ; skip next block if concat return value is not sentinel
      ; Error handling block for _stringify return value
      int 3                                                      ; call debugger
      ;  - print(returnValueTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rbx, offset returnValueTypeCheckFailureMessage         ; reading returnValueTypeCheckFailureMessage for push
      push rbx                                                   ; value of argument #1 (returnValueTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rsi, qword ptr [rsp + 088h]                            ; load address of return value's value
      push rsi                                                   ; internal argument 6: pointer to return value slot's value
      lea rsi, qword ptr [rsp + 088h]                            ; load address of return value's type
      push rsi                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea rax, qword ptr [rsp + 088h]                            ; load address of return value's value
      push rax                                                   ; internal argument 6: pointer to return value slot's value
      lea rax, qword ptr [rsp + 088h]                            ; load address of return value's type
      push rax                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
    func$_stringify$Stringify$if$5$StringifyReturnValue$TypeMatch:  ; after block
    mov rdi, qword ptr [rsp + 088h]                              ; read second operand of mov (concat return value) for MoveToDerefInstruction
    mov r12, qword ptr [rbp + 030h]                              ; get pointer to return value of _stringify into register to dereference it
    mov qword ptr [r12], rdi                                     ; _stringify return value
    mov r13, qword ptr [rsp + 080h]                              ; reading type of concat return value
    mov r14, qword ptr [rbp + 028h]                              ; get pointer to return value type of _stringify into register to dereference it
    mov qword ptr [r14], r13                                     ; type of _stringify return value
    ; increment reference count for concat return value if necessary
    cmp r13, 020h                                                ; compare type of concat return value to String
    jne func$_stringify$Stringify$if$5$AfterStringIncref         ; if not a String, skip incref
      mov r15, qword ptr [rdi]                                   ; dereference string to get to reference count
      cmp r15, 0                                                 ; compare string reference count to 0
      jns func$_stringify$Stringify$if$5$StringIncref            ; if reference count is negative (constant strings), skip incref
      jmp func$_stringify$Stringify$if$5$AfterStringIncref       ; skip incref for string constants
      func$_stringify$Stringify$if$5$StringIncref:               ; real String
        inc qword ptr [rdi]                                      ; increment reference count of concat return value
    func$_stringify$Stringify$if$5$AfterStringIncref:            ; after String incref
    ; Decrement reference count for join return value (static type: String'32) via decrefMaybeString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, qword ptr [rsp + 0b0h]                              ; arg #2: join return value's type
    mov rcx, qword ptr [rsp + 0b8h]                              ; arg #1: join return value's value
    call decrefMaybeString                                       ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    ; Decrement reference count for concat return value (static type: String'32) via decrefMaybeString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, r13                                                 ; arg #2: concat return value's type
    mov rcx, rdi                                                 ; arg #1: concat return value's value
    call decrefMaybeString                                       ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    jmp func$_stringify$epilog                                   ; return
  func$_stringify$if$continuation$5:                             ; end of if
  ; Line 516: if (arg is WhateverList) { ...
  mov r10, qword ptr [rbp + 038h]                                ; store arg's type in testByte value slot
  mov rax, r10                                                   ; move testByte to testByte
  mov rbx, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul rbx                                                        ; adjust to the relative start of that type's entry in the type table
  add rax, 001h                                                  ; adjust to the byte containing the bit to check against (result in testByte)
  mov rsi, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, rsi                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 003h                                       ; check that arg is WhateverList
  mov r9, 000h                                                   ; clear is expression result
  setc r9b                                                       ; store result in is expression result
  cmp r9, 000h                                                   ; compare is expression result to false
  je func$_stringify$if$continuation$6                           ; arg is WhateverList
    ; Line 517: StringList new = []:String;
    ; Call _listConstructor with 2 arguments
    push 001h                                                    ; value of argument #2 (1 (integer))
    push 01fh                                                    ; type of argument #2 (Integer'31)
    push 022h                                                    ; value of argument #1 (code of StringList)
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea r8, qword ptr [rsp + 0b8h]                               ; load address of return value's value
    push r8                                                      ; internal argument 6: pointer to return value slot's value
    lea r8, qword ptr [rsp + 0b8h]                               ; load address of return value's type
    push r8                                                      ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 002h                                                ; internal argument 1: number of actual arguments
    call func$_listConstructor                                   ; jump to subroutine
    add rsp, 050h                                                ; release shadow space and arguments (result in stack pointer)
    mov rdi, qword ptr [rsp + 098h]                              ; copy list literal's value over to slot with better static type
    mov r12, qword ptr [rsp + 090h]                              ; copy list literal's dynamic type over to slot with better static type
    cmp r12, 000h                                                ; compare type of list literal to <sentinel>
    jne func$_stringify$Stringify$if$6$listLiteral$TypeMatch     ; skip next block if list literal is not sentinel
      ; Error handling block for list literal
      int 3                                                      ; call debugger
      ;  - print(assignmentTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r13, offset assignmentTypeCheckFailureMessage          ; reading assignmentTypeCheckFailureMessage for push
      push r13                                                   ; value of argument #1 (assignmentTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r14, qword ptr [rsp + 098h]                            ; load address of return value's value
      push r14                                                   ; internal argument 6: pointer to return value slot's value
      lea r14, qword ptr [rsp + 098h]                            ; load address of return value's type
      push r14                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r15, qword ptr [rsp + 098h]                            ; load address of return value's value
      push r15                                                   ; internal argument 6: pointer to return value slot's value
      lea r15, qword ptr [rsp + 098h]                            ; load address of return value's type
      push r15                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
    func$_stringify$Stringify$if$6$listLiteral$TypeMatch:        ; after block
    mov r10, rdi                                                 ; value initialization of variable declaration for new variable (list literal)
    mov rax, r12                                                 ; type initialization of variable declaration for new variable
    ; increment reference count for new variable if necessary
    mov rbx, rax                                                 ; store new variable's type in testByte value slot
    mov qword ptr [rsp + 088h], rax                              ; move new variable's type out of rax
    mov rax, rbx                                                 ; move testByte to testByte
    mov rsi, 002h                                                ; read operand of mul (type table width in bytes) 
    mul rsi                                                      ; adjust to the relative start of that type's entry in the type table
    mov rdi, offset typeTable                                    ; read second operand of + (type table pointer)
    add rax, rdi                                                 ; finally offset all of that by the start of the type table itself (result in testByte)
    bt qword ptr [rax], 007h                                     ; check that possibly GarbageCollectable value is GarbageCollectable
    jnc func$_stringify$Stringify$if$6$AfterGCIncref             ; if not a GarbageCollectable, skip incref
      inc qword ptr [r10]                                        ; increment reference count of new variable
    func$_stringify$Stringify$if$6$AfterGCIncref:                ; after GarbageCollectable incref
    ; Line 518: WhateverList old = arg as WhateverList;
    mov r12, qword ptr [rbp + 038h]                              ; store arg's type in testByte value slot
    mov rax, r12                                                 ; move testByte to testByte
    mov r13, 002h                                                ; read operand of mul (type table width in bytes) 
    mul r13                                                      ; adjust to the relative start of that type's entry in the type table
    add rax, 001h                                                ; adjust to the byte containing the bit to check against (result in testByte)
    mov r14, offset typeTable                                    ; read second operand of + (type table pointer)
    add rax, r14                                                 ; finally offset all of that by the start of the type table itself (result in testByte)
    bt qword ptr [rax], 003h                                     ; check that arg as WhateverList is WhateverList
    jc func$_stringify$Stringify$if$6$argAsWHateverlist$TypeMatch ; skip next block if the type matches
      ; Error handling block for arg as WhateverList
      int 3                                                      ; call debugger
      ;  - print(asOperatorFailureMessage)
      ; Call __print with 1 arguments
      mov r15, offset asOperatorFailureMessage                   ; reading asOperatorFailureMessage for push
      push r15                                                   ; value of argument #1 (asOperatorFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r9, qword ptr [rsp + 090h]                             ; load address of return value's value
      push r9                                                    ; internal argument 6: pointer to return value slot's value
      lea r9, qword ptr [rsp + 090h]                             ; load address of return value's type
      push r9                                                    ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 0b0h], r10                            ; move new variable's value out of r10
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r10, qword ptr [rsp + 090h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 090h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov r10, qword ptr [rsp + 070h]                            ; restoring slots to previous scope state
    func$_stringify$Stringify$if$6$argAsWHateverlist$TypeMatch:  ; after block
    mov rbx, qword ptr [rbp + 040h]                              ; copy value of arg for cast to WhateverList
    mov rsi, qword ptr [rbp + 038h]                              ; copy type of arg for cast to WhateverList
    cmp rsi, 000h                                                ; compare type of cast of arg to WhateverList to <sentinel>
    jne func$_stringify$Stringify$if$6$castOfArgToWHateverlist$TypeMatch ; skip next block if cast of arg to WhateverList is not sentinel
      ; Error handling block for cast of arg to WhateverList
      int 3                                                      ; call debugger
      ;  - print(assignmentTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rdi, offset assignmentTypeCheckFailureMessage          ; reading assignmentTypeCheckFailureMessage for push
      push rdi                                                   ; value of argument #1 (assignmentTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r12, qword ptr [rsp + 090h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 090h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 0b0h], r10                            ; move new variable's value out of r10
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea rax, qword ptr [rsp + 090h]                            ; load address of return value's value
      push rax                                                   ; internal argument 6: pointer to return value slot's value
      lea rax, qword ptr [rsp + 090h]                            ; load address of return value's type
      push rax                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov r10, qword ptr [rsp + 070h]                            ; restoring slots to previous scope state
    func$_stringify$Stringify$if$6$castOfArgToWHateverlist$TypeMatch:  ; after block
    mov r13, rbx                                                 ; value initialization of variable declaration for old variable (cast of arg to WhateverList)
    mov r14, rsi                                                 ; type initialization of variable declaration for old variable
    ; increment reference count for old variable if necessary
    mov r15, r14                                                 ; store old variable's type in testByte value slot
    mov rax, r15                                                 ; move testByte to testByte
    mov qword ptr [rsp + 080h], r10                              ; move new variable's value out of r10
    mov r10, 002h                                                ; read operand of mul (type table width in bytes) 
    mul r10                                                      ; adjust to the relative start of that type's entry in the type table
    mov rbx, offset typeTable                                    ; read second operand of + (type table pointer)
    add rax, rbx                                                 ; finally offset all of that by the start of the type table itself (result in testByte)
    bt qword ptr [rax], 007h                                     ; check that possibly GarbageCollectable value is GarbageCollectable
    jnc func$_stringify$Stringify$if$6$AfterGCIncref$1           ; if not a GarbageCollectable, skip incref
      inc qword ptr [r13]                                        ; increment reference count of old variable
    func$_stringify$Stringify$if$6$AfterGCIncref$1:              ; after GarbageCollectable incref
    ; Line 519: Integer i = 0;
    mov qword ptr [rsp + 078h], r13                              ; move old variable's value out of r13
    mov r13, 000h                                                ; value initialization of variable declaration for i variable (0)
    mov qword ptr [rsp + 070h], r14                              ; move old variable's type out of r14
    mov r14, 01fh                                                ; type initialization of variable declaration for i variable (Integer'31)
    func$_stringify$Stringify$if$6$while$top:                    ; top of while
      mov r15, r13                                               ; make a copy of i's value in case it changes before we use it
      mov rax, r14                                               ; make a copy of i's type in case it changes before we use it
      mov r10, qword ptr [rsp + 078h]                            ; make a copy of old's value in case it changes before we use it
      mov rbx, qword ptr [rsp + 070h]                            ; make a copy of old's type in case it changes before we use it
      ; increment reference count for copy of old if necessary
      mov rsi, rbx                                               ; store copy of old's type in testByte value slot
      mov qword ptr [rsp + 068h], rax                            ; move copy of i's type out of rax
      mov rax, rsi                                               ; move testByte to testByte
      mov rdi, 002h                                              ; read operand of mul (type table width in bytes) 
      mul rdi                                                    ; adjust to the relative start of that type's entry in the type table
      mov r12, offset typeTable                                  ; read second operand of + (type table pointer)
      add rax, r12                                               ; finally offset all of that by the start of the type table itself (result in testByte)
      bt qword ptr [rax], 007h                                   ; check that possibly GarbageCollectable value is GarbageCollectable
      jnc func$_stringify$Stringify$if$6$while$AfterGCIncref     ; if not a GarbageCollectable, skip incref
        inc qword ptr [r10]                                      ; increment reference count of copy of old
      func$_stringify$Stringify$if$6$while$AfterGCIncref:        ; after GarbageCollectable incref
      ; Call len with 1 arguments
      push r10                                                   ; value of argument #1 (copy of old)
      push rbx                                                   ; type of argument #1
      mov qword ptr [rsp + 068h], r14                            ; move i variable's type out of r14
      lea r14, qword ptr [rsp + 070h]                            ; load address of return value's value
      push r14                                                   ; internal argument 6: pointer to return value slot's value
      lea r14, qword ptr [rsp + 068h]                            ; load address of return value's type
      push r14                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 088h], r10                            ; move copy of old's value out of r10
      call func$len                                              ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      cmp qword ptr [rsp + 068h], 000h                           ; compare type of copy of i to <sentinel>
      jne func$_stringify$Stringify$if$6$while$i$TypeMatch       ; skip next block if copy of i is not sentinel
        ; Error handling block for i
        int 3                                                    ; call debugger
        ;  - print(operandTypeCheckFailureMessage)
        ; Call __print with 1 arguments
        mov qword ptr [rsp + 040h], r15                          ; move copy of i's value out of r15
        mov r15, offset operandTypeCheckFailureMessage           ; reading operandTypeCheckFailureMessage for push
        push r15                                                 ; value of argument #1 (operandTypeCheckFailureMessage)
        push 020h                                                ; type of argument #1 (String'32)
        lea r10, qword ptr [rsp + 048h]                          ; load address of return value's value
        push r10                                                 ; internal argument 6: pointer to return value slot's value
        lea r10, qword ptr [rsp + 048h]                          ; load address of return value's type
        push r10                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$__print                                        ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        ;  - exit(1)
        ; Call exit with 1 arguments
        push 001h                                                ; value of argument #1 (1 (integer))
        push 01fh                                                ; type of argument #1 (Integer'31)
        mov qword ptr [rsp + 040h], rbx                          ; move copy of old's type out of rbx
        lea rbx, qword ptr [rsp + 048h]                          ; load address of return value's value
        push rbx                                                 ; internal argument 6: pointer to return value slot's value
        lea rbx, qword ptr [rsp + 040h]                          ; load address of return value's type
        push rbx                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$exit                                           ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        mov r15, qword ptr [rsp + 040h]                          ; restoring slots to previous scope state
        mov rbx, qword ptr [rsp + 030h]                          ; restoring slots to previous scope state
      func$_stringify$Stringify$if$6$while$i$TypeMatch:          ; after block
      cmp qword ptr [rsp + 050h], 000h                           ; compare type of len return value to <sentinel>
      jne func$_stringify$Stringify$if$6$while$lenOld$TypeMatch  ; skip next block if len return value is not sentinel
        ; Error handling block for len(old)
        int 3                                                    ; call debugger
        ;  - print(operandTypeCheckFailureMessage)
        ; Call __print with 1 arguments
        mov rsi, offset operandTypeCheckFailureMessage           ; reading operandTypeCheckFailureMessage for push
        push rsi                                                 ; value of argument #1 (operandTypeCheckFailureMessage)
        push 020h                                                ; type of argument #1 (String'32)
        lea rax, qword ptr [rsp + 050h]                          ; load address of return value's value
        push rax                                                 ; internal argument 6: pointer to return value slot's value
        lea rax, qword ptr [rsp + 050h]                          ; load address of return value's type
        push rax                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$__print                                        ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        ;  - exit(1)
        ; Call exit with 1 arguments
        push 001h                                                ; value of argument #1 (1 (integer))
        push 01fh                                                ; type of argument #1 (Integer'31)
        lea rdi, qword ptr [rsp + 050h]                          ; load address of return value's value
        push rdi                                                 ; internal argument 6: pointer to return value slot's value
        lea rdi, qword ptr [rsp + 050h]                          ; load address of return value's type
        push rdi                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$exit                                           ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
      func$_stringify$Stringify$if$6$while$lenOld$TypeMatch:     ; after block
      xor r12, r12                                               ; clear < operator result
      cmp r15, qword ptr [rsp + 060h]                            ; compare copy of i with len return value
      setl r12b                                                  ; store result in < operator result
      cmp r12, 000h                                              ; compare < operator result to false
      jne func$_stringify$Stringify$if$6$while$body              ; while condition
      ; Decrement reference count for copy of old (static type: WhateverList'40) via decrefMaybeGC
      sub rsp, 20h                                               ; allocate shadow space for decref function
      mov rdx, rbx                                               ; arg #2: copy of old's type
      mov rcx, qword ptr [rsp + 068h]                            ; arg #1: copy of old's value
      call decrefMaybeGC                                         ; call decref
      add rsp, 20h                                               ; free shadow space for decref
      mov r14, qword ptr [rsp + 058h]                            ; restoring slots to previous scope state
      jmp func$_stringify$Stringify$if$6$while$bottom            ; break out of while
      func$_stringify$Stringify$if$6$while$body:                 ; start of while
      ; Line 522: append(new, _stringify(old[i]));
      mov qword ptr [rsp + 068h], r13                            ; move i variable's value out of r13
      mov r13, qword ptr [rsp + 080h]                            ; make a copy of new's value in case it changes before we use it
      mov r14, qword ptr [rsp + 088h]                            ; make a copy of new's type in case it changes before we use it
      ; increment reference count for copy of new if necessary
      mov r15, r14                                               ; store copy of new's type in testByte value slot
      mov rax, r15                                               ; move testByte to testByte
      mov r10, 002h                                              ; read operand of mul (type table width in bytes) 
      mul r10                                                    ; adjust to the relative start of that type's entry in the type table
      mov qword ptr [rsp + 060h], rbx                            ; move copy of old's type out of rbx
      mov rbx, offset typeTable                                  ; read second operand of + (type table pointer)
      add rax, rbx                                               ; finally offset all of that by the start of the type table itself (result in testByte)
      bt qword ptr [rax], 007h                                   ; check that possibly GarbageCollectable value is GarbageCollectable
      jnc func$_stringify$Stringify$if$6$while$AfterGCIncref$1   ; if not a GarbageCollectable, skip incref
        inc qword ptr [r13]                                      ; increment reference count of copy of new
      func$_stringify$Stringify$if$6$while$AfterGCIncref$1:      ; after GarbageCollectable incref
      mov rsi, qword ptr [rsp + 078h]                            ; make a copy of old's value in case it changes before we use it
      mov rdi, qword ptr [rsp + 070h]                            ; make a copy of old's type in case it changes before we use it
      ; increment reference count for copy of old if necessary
      mov r9, rdi                                                ; store copy of old's type in testByte value slot
      mov rax, r9                                                ; move testByte to testByte
      mov r8, 002h                                               ; read operand of mul (type table width in bytes) 
      mul r8                                                     ; adjust to the relative start of that type's entry in the type table
      mov rdx, offset typeTable                                  ; read second operand of + (type table pointer)
      add rax, rdx                                               ; finally offset all of that by the start of the type table itself (result in testByte)
      bt qword ptr [rax], 007h                                   ; check that possibly GarbageCollectable value is GarbageCollectable
      jnc func$_stringify$Stringify$if$6$while$AfterGCIncref$2   ; if not a GarbageCollectable, skip incref
        inc qword ptr [rsi]                                      ; increment reference count of copy of old
      func$_stringify$Stringify$if$6$while$AfterGCIncref$2:      ; after GarbageCollectable incref
      cmp rdi, 000h                                              ; compare type of copy of old to <sentinel>
      jne func$_stringify$Stringify$if$6$while$old$TypeMatch     ; skip next block if copy of old is not sentinel
        ; Error handling block for old
        int 3                                                    ; call debugger
        ;  - print(operandTypeCheckFailureMessage)
        ; Call __print with 1 arguments
        mov rcx, offset operandTypeCheckFailureMessage           ; reading operandTypeCheckFailureMessage for push
        push rcx                                                 ; value of argument #1 (operandTypeCheckFailureMessage)
        push 020h                                                ; type of argument #1 (String'32)
        lea r12, qword ptr [rsp + 060h]                          ; load address of return value's value
        push r12                                                 ; internal argument 6: pointer to return value slot's value
        lea r12, qword ptr [rsp + 058h]                          ; load address of return value's type
        push r12                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$__print                                        ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        ;  - exit(1)
        ; Call exit with 1 arguments
        push 001h                                                ; value of argument #1 (1 (integer))
        push 01fh                                                ; type of argument #1 (Integer'31)
        mov qword ptr [rsp + 050h], r13                          ; move copy of new's value out of r13
        lea r13, qword ptr [rsp + 060h]                          ; load address of return value's value
        push r13                                                 ; internal argument 6: pointer to return value slot's value
        lea r13, qword ptr [rsp + 050h]                          ; load address of return value's type
        push r13                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$exit                                           ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        mov r13, qword ptr [rsp + 040h]                          ; restoring slots to previous scope state
      func$_stringify$Stringify$if$6$while$old$TypeMatch:        ; after block
      mov qword ptr [rsp + 050h], r14                            ; move copy of new's type out of r14
      mov r14, qword ptr [rsp + 068h]                            ; make a copy of i's value in case it changes before we use it
      mov r15, qword ptr [rsp + 058h]                            ; make a copy of i's type in case it changes before we use it
      cmp r15, 000h                                              ; compare type of copy of i to <sentinel>
      jne func$_stringify$Stringify$if$6$while$copyOfI$TypeMatch ; skip next block if copy of i is not sentinel
        ; Error handling block for copy of i
        int 3                                                    ; call debugger
        ;  - print(subscriptTypeCheckFailureMessage)
        ; Call __print with 1 arguments
        mov r10, offset subscriptTypeCheckFailureMessage         ; reading subscriptTypeCheckFailureMessage for push
        push r10                                                 ; value of argument #1 (subscriptTypeCheckFailureMessage)
        push 020h                                                ; type of argument #1 (String'32)
        lea rbx, qword ptr [rsp + 050h]                          ; load address of return value's value
        push rbx                                                 ; internal argument 6: pointer to return value slot's value
        lea rbx, qword ptr [rsp + 050h]                          ; load address of return value's type
        push rbx                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$__print                                        ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        ;  - exit(1)
        ; Call exit with 1 arguments
        push 001h                                                ; value of argument #1 (1 (integer))
        push 01fh                                                ; type of argument #1 (Integer'31)
        mov qword ptr [rsp + 048h], rsi                          ; move copy of old's value out of rsi
        lea rsi, qword ptr [rsp + 050h]                          ; load address of return value's value
        push rsi                                                 ; internal argument 6: pointer to return value slot's value
        lea rsi, qword ptr [rsp + 048h]                          ; load address of return value's type
        push rsi                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$exit                                           ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        mov rsi, qword ptr [rsp + 038h]                          ; restoring slots to previous scope state
      func$_stringify$Stringify$if$6$while$copyOfI$TypeMatch:    ; after block
      mov qword ptr [rsp + 040h], rdi                            ; move copy of old's type out of rdi
      mov rdi, qword ptr [rsi + 038h]                            ; list data is the second field in its block
      mov rax, qword ptr [rdi + 008h]                            ; read length from the list data block's metadata
      lea r12, qword ptr [rdi + 020h]                            ; compute address of 0th entry in list data block
      cmp r14, rax                                               ; compare copy of i to length of list
      jge func$_stringify$Stringify$if$6$while$subscript$boundsError ; index out of range (too high)
      cmp r14, 000h                                              ; compare copy of i to 0 (integer)
      jge func$_stringify$Stringify$if$6$while$subscript$inBounds ; index not out of range (not negative)
      func$_stringify$Stringify$if$6$while$subscript$boundsError:  ; invalid index
        ; Error handling block for subscript bounds error
        int 3                                                    ; call debugger
        ;  - print(boundsFailureMessage)
        ; Call __print with 1 arguments
        mov qword ptr [rsp + 038h], r13                          ; move copy of new's value out of r13
        mov r13, offset boundsFailureMessage                     ; reading boundsFailureMessage for push
        push r13                                                 ; value of argument #1 (boundsFailureMessage)
        push 020h                                                ; type of argument #1 (String'32)
        mov qword ptr [rsp + 038h], r14                          ; move copy of i's value out of r14
        lea r14, qword ptr [rsp + 040h]                          ; load address of return value's value
        push r14                                                 ; internal argument 6: pointer to return value slot's value
        lea r14, qword ptr [rsp + 038h]                          ; load address of return value's type
        push r14                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$__print                                        ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        ;  - exit(1)
        ; Call exit with 1 arguments
        push 001h                                                ; value of argument #1 (1 (integer))
        push 01fh                                                ; type of argument #1 (Integer'31)
        mov qword ptr [rsp + 030h], r15                          ; move copy of i's type out of r15
        lea r15, qword ptr [rsp + 040h]                          ; load address of return value's value
        push r15                                                 ; internal argument 6: pointer to return value slot's value
        lea r15, qword ptr [rsp + 030h]                          ; load address of return value's type
        push r15                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$exit                                           ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        mov r14, qword ptr [rsp + 028h]                          ; restoring slots to previous scope state
        mov r15, qword ptr [rsp + 020h]                          ; restoring slots to previous scope state
        mov r13, qword ptr [rsp + 038h]                          ; restoring slots to previous scope state
      func$_stringify$Stringify$if$6$while$subscript$inBounds:   ; valid index
      mov r10, r14                                               ; assign value of copy of i to value of index into list * 16
      shl r10, 004h                                              ; multiply by 8*2
      mov rbx, r12                                               ; assign value of base address of list to value of pointer to copy of old[copy of i]
      add rbx, r10                                               ; compute address of specified list entry (result in pointer to copy of old[copy of i])
      mov qword ptr [rsp + 038h], rsi                            ; move copy of old's value out of rsi
      mov rsi, qword ptr [rbx + 008h]                            ; value of copy of old[copy of i]
      mov rdi, qword ptr [rbx]                                   ; type of copy of old[copy of i]
      ; increment reference count for copy of copy of old[copy of i] if necessary
      mov rax, rdi                                               ; store copy of copy of old[copy of i]'s type in testByte value slot
      mov r12, 002h                                              ; read operand of mul (type table width in bytes) 
      mul r12                                                    ; adjust to the relative start of that type's entry in the type table
      mov qword ptr [rsp + 030h], r13                            ; move copy of new's value out of r13
      mov r13, offset typeTable                                  ; read second operand of + (type table pointer)
      add rax, r13                                               ; finally offset all of that by the start of the type table itself (result in testByte)
      bt qword ptr [rax], 007h                                   ; check that possibly GarbageCollectable value is GarbageCollectable
      jnc func$_stringify$Stringify$if$6$while$AfterGCIncref$3   ; if not a GarbageCollectable, skip incref
        inc qword ptr [rsi]                                      ; increment reference count of copy of copy of old[copy of i]
      func$_stringify$Stringify$if$6$while$AfterGCIncref$3:      ; after GarbageCollectable incref
      cmp rdi, 020h                                              ; compare type of copy of copy of old[copy of i] to String
      jne func$_stringify$Stringify$if$6$while$AfterStringIncref ; if not a String, skip incref
        mov r14, qword ptr [rsi]                                 ; dereference string to get to reference count
        cmp r14, 0                                               ; compare string reference count to 0
        jns func$_stringify$Stringify$if$6$while$StringIncref    ; if reference count is negative (constant strings), skip incref
        jmp func$_stringify$Stringify$if$6$while$AfterStringIncref ; skip incref for string constants
        func$_stringify$Stringify$if$6$while$StringIncref:       ; real String
          inc qword ptr [rsi]                                    ; increment reference count of copy of copy of old[copy of i]
      func$_stringify$Stringify$if$6$while$AfterStringIncref:    ; after String incref
      ; Call _stringify with 1 arguments
      push rsi                                                   ; value of argument #1 (copy of copy of old[copy of i])
      push rdi                                                   ; type of argument #1
      lea rbx, qword ptr [rsp + 038h]                            ; load address of return value's value
      push rbx                                                   ; internal argument 6: pointer to return value slot's value
      lea rbx, qword ptr [rsp + 038h]                            ; load address of return value's type
      push rbx                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$_stringify                                       ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ; Call append with 2 arguments
      push qword ptr [rsp + 028h]                                ; value of argument #2 (_stringify return value)
      push qword ptr [rsp + 028h]                                ; type of argument #2
      push qword ptr [rsp + 040h]                                ; value of argument #1 (copy of new)
      push qword ptr [rsp + 068h]                                ; type of argument #1
      lea r12, qword ptr [rsp + 038h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 038h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 002h                                              ; internal argument 1: number of actual arguments
      call func$append                                           ; jump to subroutine
      add rsp, 050h                                              ; release shadow space and arguments (result in stack pointer)
      ; Line 523: i += 1;
      mov r13, qword ptr [rsp + 068h]                            ; make a copy of i's value in case it changes before we use it
      mov r14, qword ptr [rsp + 058h]                            ; make a copy of i's type in case it changes before we use it
      cmp r14, 000h                                              ; compare type of copy of i to <sentinel>
      jne func$_stringify$Stringify$if$6$while$copyOfI$TypeMatch$1 ; skip next block if copy of i is not sentinel
        ; Error handling block for copy of i
        int 3                                                    ; call debugger
        ;  - print(operandTypeCheckFailureMessage)
        ; Call __print with 1 arguments
        mov r15, offset operandTypeCheckFailureMessage           ; reading operandTypeCheckFailureMessage for push
        push r15                                                 ; value of argument #1 (operandTypeCheckFailureMessage)
        push 020h                                                ; type of argument #1 (String'32)
        lea r10, qword ptr [rsp + 028h]                          ; load address of return value's value
        push r10                                                 ; internal argument 6: pointer to return value slot's value
        lea r10, qword ptr [rsp + 028h]                          ; load address of return value's type
        push r10                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$__print                                        ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
        ;  - exit(1)
        ; Call exit with 1 arguments
        push 001h                                                ; value of argument #1 (1 (integer))
        push 01fh                                                ; type of argument #1 (Integer'31)
        lea rbx, qword ptr [rsp + 028h]                          ; load address of return value's value
        push rbx                                                 ; internal argument 6: pointer to return value slot's value
        lea rbx, qword ptr [rsp + 028h]                          ; load address of return value's type
        push rbx                                                 ; internal argument 5: pointer to return value slot's type
        sub rsp, 020h                                            ; allocate shadow space
        mov r9, 000h                                             ; internal argument 4: "this" pointer
        mov r8, 000h                                             ; internal argument 3: "this" pointer type
        mov rdx, 000h                                            ; internal argument 2: closure pointer
        mov rcx, 001h                                            ; internal argument 1: number of actual arguments
        call func$exit                                           ; jump to subroutine
        add rsp, 040h                                            ; release shadow space and arguments (result in stack pointer)
      func$_stringify$Stringify$if$6$while$copyOfI$TypeMatch$1:  ; after block
      mov r12, r13                                               ; assign value of copy of i to value of += operator result
      add r12, 001h                                              ; += operator
      mov qword ptr [rsp + 068h], r12                            ; store value
      mov qword ptr [rsp + 058h], 01fh                           ; store type (Integer'31)
      ; Decrement reference count for copy of new (static type: StringList'34) via decrefMaybeGC
      sub rsp, 20h                                               ; allocate shadow space for decref function
      mov rdx, qword ptr [rsp + 070h]                            ; arg #2: copy of new's type
      mov rcx, qword ptr [rsp + 050h]                            ; arg #1: copy of new's value
      call decrefMaybeGC                                         ; call decref
      add rsp, 20h                                               ; free shadow space for decref
      ; Decrement reference count for copy of old (static type: WhateverList'40) via decrefMaybeGC
      sub rsp, 20h                                               ; allocate shadow space for decref function
      mov rdx, qword ptr [rsp + 080h]                            ; arg #2: copy of old's type
      mov rcx, qword ptr [rsp + 068h]                            ; arg #1: copy of old's value
      call decrefMaybeGC                                         ; call decref
      add rsp, 20h                                               ; free shadow space for decref
      ; Decrement reference count for copy of old (static type: WhateverList'40) via decrefMaybeGC
      sub rsp, 20h                                               ; allocate shadow space for decref function
      mov rdx, qword ptr [rsp + 060h]                            ; arg #2: copy of old's type
      mov rcx, qword ptr [rsp + 058h]                            ; arg #1: copy of old's value
      call decrefMaybeGC                                         ; call decref
      add rsp, 20h                                               ; free shadow space for decref
      ; Decrement reference count for _stringify return value (static type: String'32) via decrefMaybeString
      sub rsp, 20h                                               ; allocate shadow space for decref function
      mov rdx, qword ptr [rsp + 040h]                            ; arg #2: _stringify return value's type
      mov rcx, qword ptr [rsp + 048h]                            ; arg #1: _stringify return value's value
      call decrefMaybeString                                     ; call decref
      add rsp, 20h                                               ; free shadow space for decref
      ; Decrement reference count for copy of copy of old[copy of i] (static type: Whatever) via decrefMaybeGCOrString
      sub rsp, 20h                                               ; allocate shadow space for decref function
      mov rdx, rdi                                               ; arg #2: copy of copy of old[copy of i]'s type
      mov rcx, rsi                                               ; arg #1: copy of copy of old[copy of i]'s value
      call decrefMaybeGCOrString                                 ; call decref
      add rsp, 20h                                               ; free shadow space for decref
      mov r13, qword ptr [rsp + 068h]                            ; restoring slots to previous scope state
      mov r14, qword ptr [rsp + 058h]                            ; restoring slots to previous scope state
      jmp func$_stringify$Stringify$if$6$while$top               ; return to top of while
    func$_stringify$Stringify$if$6$while$bottom:                 ; bottom of while
    ; Line 525: return concat('[', join(new, ', '), ']');
    mov r10, qword ptr [rsp + 080h]                              ; make a copy of new's value in case it changes before we use it
    mov rbx, qword ptr [rsp + 088h]                              ; make a copy of new's type in case it changes before we use it
    ; increment reference count for copy of new if necessary
    mov rsi, rbx                                                 ; store copy of new's type in testByte value slot
    mov rax, rsi                                                 ; move testByte to testByte
    mov rdi, 002h                                                ; read operand of mul (type table width in bytes) 
    mul rdi                                                      ; adjust to the relative start of that type's entry in the type table
    mov r12, offset typeTable                                    ; read second operand of + (type table pointer)
    add rax, r12                                                 ; finally offset all of that by the start of the type table itself (result in testByte)
    bt qword ptr [rax], 007h                                     ; check that possibly GarbageCollectable value is GarbageCollectable
    jnc func$_stringify$Stringify$if$6$AfterGCIncref$2           ; if not a GarbageCollectable, skip incref
      inc qword ptr [r10]                                        ; increment reference count of copy of new
    func$_stringify$Stringify$if$6$AfterGCIncref$2:              ; after GarbageCollectable incref
    ; Call join with 2 arguments
    mov qword ptr [rsp + 068h], r10                              ; move copy of new's value out of r10
    mov r10, offset string$35                                    ; reading string for push
    push r10                                                     ; value of argument #2 (string)
    push 020h                                                    ; type of argument #2 (String'32)
    push qword ptr [rsp + 078h]                                  ; value of argument #1 (copy of new)
    push rbx                                                     ; type of argument #1
    mov qword ptr [rsp + 078h], rbx                              ; move copy of new's type out of rbx
    lea rbx, qword ptr [rsp + 080h]                              ; load address of return value's value
    push rbx                                                     ; internal argument 6: pointer to return value slot's value
    lea rbx, qword ptr [rsp + 078h]                              ; load address of return value's type
    push rbx                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 002h                                                ; internal argument 1: number of actual arguments
    call func$join                                               ; jump to subroutine
    add rsp, 050h                                                ; release shadow space and arguments (result in stack pointer)
    ; Call concat with 3 arguments
    mov r12, offset string$36                                    ; reading string for push
    push r12                                                     ; value of argument #3 (string)
    push 020h                                                    ; type of argument #3 (String'32)
    push qword ptr [rsp + 070h]                                  ; value of argument #2 (join return value)
    push qword ptr [rsp + 068h]                                  ; type of argument #2
    mov r13, offset string$34                                    ; reading string for push
    push r13                                                     ; value of argument #1 (string)
    push 020h                                                    ; type of argument #1 (String'32)
    lea r14, qword ptr [rsp + 078h]                              ; load address of return value's value
    push r14                                                     ; internal argument 6: pointer to return value slot's value
    lea r14, qword ptr [rsp + 078h]                              ; load address of return value's type
    push r14                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 003h                                                ; internal argument 1: number of actual arguments
    call func$concat                                             ; jump to subroutine
    add rsp, 060h                                                ; release shadow space and arguments (result in stack pointer)
    cmp qword ptr [rsp + 040h], 000h                             ; compare type of concat return value to <sentinel>
    jne func$_stringify$Stringify$if$6$StringifyReturnValue$TypeMatch ; skip next block if concat return value is not sentinel
      ; Error handling block for _stringify return value
      int 3                                                      ; call debugger
      ;  - print(returnValueTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r15, offset returnValueTypeCheckFailureMessage         ; reading returnValueTypeCheckFailureMessage for push
      push r15                                                   ; value of argument #1 (returnValueTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r10, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 048h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea rbx, qword ptr [rsp + 048h]                            ; load address of return value's value
      push rbx                                                   ; internal argument 6: pointer to return value slot's value
      lea rbx, qword ptr [rsp + 048h]                            ; load address of return value's type
      push rbx                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
    func$_stringify$Stringify$if$6$StringifyReturnValue$TypeMatch:  ; after block
    mov rsi, qword ptr [rsp + 048h]                              ; read second operand of mov (concat return value) for MoveToDerefInstruction
    mov rax, qword ptr [rbp + 030h]                              ; get pointer to return value of _stringify into register to dereference it
    mov qword ptr [rax], rsi                                     ; _stringify return value
    mov rdi, qword ptr [rsp + 040h]                              ; reading type of concat return value
    mov r12, qword ptr [rbp + 028h]                              ; get pointer to return value type of _stringify into register to dereference it
    mov qword ptr [r12], rdi                                     ; type of _stringify return value
    ; increment reference count for concat return value if necessary
    cmp rdi, 020h                                                ; compare type of concat return value to String
    jne func$_stringify$Stringify$if$6$AfterStringIncref         ; if not a String, skip incref
      mov r13, qword ptr [rsi]                                   ; dereference string to get to reference count
      cmp r13, 0                                                 ; compare string reference count to 0
      jns func$_stringify$Stringify$if$6$StringIncref            ; if reference count is negative (constant strings), skip incref
      jmp func$_stringify$Stringify$if$6$AfterStringIncref       ; skip incref for string constants
      func$_stringify$Stringify$if$6$StringIncref:               ; real String
        inc qword ptr [rsi]                                      ; increment reference count of concat return value
    func$_stringify$Stringify$if$6$AfterStringIncref:            ; after String incref
    ; Decrement reference count for concat return value (static type: String'32) via decrefMaybeString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, rdi                                                 ; arg #2: concat return value's type
    mov rcx, rsi                                                 ; arg #1: concat return value's value
    call decrefMaybeString                                       ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    ; Decrement reference count for new variable (static type: StringList'34) via decrefMaybeGC
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, qword ptr [rsp + 0a8h]                              ; arg #2: new variable's type
    mov rcx, qword ptr [rsp + 0a0h]                              ; arg #1: new variable's value
    call decrefMaybeGC                                           ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    ; Decrement reference count for join return value (static type: String'32) via decrefMaybeString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, qword ptr [rsp + 070h]                              ; arg #2: join return value's type
    mov rcx, qword ptr [rsp + 080h]                              ; arg #1: join return value's value
    call decrefMaybeString                                       ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    ; Decrement reference count for old variable (static type: WhateverList'40) via decrefMaybeGC
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, qword ptr [rsp + 090h]                              ; arg #2: old variable's type
    mov rcx, qword ptr [rsp + 098h]                              ; arg #1: old variable's value
    call decrefMaybeGC                                           ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    ; Decrement reference count for _listConstructor return value (static type: WhateverList'40) via decrefMaybeGC
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, qword ptr [rsp + 0b0h]                              ; arg #2: _listConstructor return value's type
    mov rcx, qword ptr [rsp + 0b8h]                              ; arg #1: _listConstructor return value's value
    call decrefMaybeGC                                           ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    ; Decrement reference count for copy of new (static type: StringList'34) via decrefMaybeGC
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, qword ptr [rsp + 078h]                              ; arg #2: copy of new's type
    mov rcx, qword ptr [rsp + 088h]                              ; arg #1: copy of new's value
    call decrefMaybeGC                                           ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    jmp func$_stringify$epilog                                   ; return
  func$_stringify$if$continuation$6:                             ; end of if
  ; Line 527: if (arg is __ListData) { ...
  mov r14, qword ptr [rbp + 038h]                                ; store arg's type in testByte value slot
  mov rax, r14                                                   ; move testByte to testByte
  mov r15, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r15                                                        ; adjust to the relative start of that type's entry in the type table
  mov r10, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r10                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 004h                                       ; check that arg is __ListData
  mov rbx, 000h                                                  ; clear is expression result
  setc bl                                                        ; store result in is expression result
  cmp rbx, 000h                                                  ; compare is expression result to false
  je func$_stringify$if$continuation$7                           ; arg is __ListData
    ; Line 528: return '<__ListData>';
    mov rdi, offset string$37                                    ; read second operand of mov (string) for MoveToDerefInstruction
    mov r12, qword ptr [rbp + 030h]                              ; get pointer to return value of _stringify into register to dereference it
    mov qword ptr [r12], rdi                                     ; _stringify return value
    mov r13, qword ptr [rbp + 028h]                              ; get pointer to return value type of _stringify into register to dereference it
    mov qword ptr [r13], 020h                                    ; type of _stringify return value (String'32)
    jmp func$_stringify$epilog                                   ; return
  func$_stringify$if$continuation$7:                             ; end of if
  ; Line 530: __print('value cannot be stringified\n');
  ; Call __print with 1 arguments
  mov r10, offset string$38                                      ; reading string for push
  push r10                                                       ; value of argument #1 (string)
  push 020h                                                      ; type of argument #1 (String'32)
  lea rbx, qword ptr [rsp + 0a8h]                                ; load address of return value's value
  push rbx                                                       ; internal argument 6: pointer to return value slot's value
  lea rbx, qword ptr [rsp + 0a8h]                                ; load address of return value's type
  push rbx                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call func$__print                                              ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Line 531: exit(1);
  ; Call exit with 1 arguments
  push 001h                                                      ; value of argument #1 (1)
  push 01fh                                                      ; type of argument #1 (Integer'31)
  lea r13, qword ptr [rsp + 0a8h]                                ; load address of return value's value
  push r13                                                       ; internal argument 6: pointer to return value slot's value
  lea r13, qword ptr [rsp + 0a8h]                                ; load address of return value's type
  push r13                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call func$exit                                                 ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Implicit return from _stringify
  mov r14, 01dh                                                  ; store null's type in testByte value slot
  mov rax, r14                                                   ; move testByte to testByte
  mov r15, 002h                                                  ; read operand of mul (type table width in bytes) 
  mul r15                                                        ; adjust to the relative start of that type's entry in the type table
  mov r10, offset typeTable                                      ; read second operand of + (type table pointer)
  add rax, r10                                                   ; finally offset all of that by the start of the type table itself (result in testByte)
  bt qword ptr [rax], 003h                                       ; check that _stringify return value is String
  jc func$_stringify$StringifyReturnValue$TypeMatch              ; skip next block if the type matches
    ; Error handling block for _stringify return value
    int 3                                                        ; call debugger
    ;  - print(returnValueTypeCheckFailureMessage)
    ; Call __print with 1 arguments
    mov rbx, offset returnValueTypeCheckFailureMessage           ; reading returnValueTypeCheckFailureMessage for push
    push rbx                                                     ; value of argument #1 (returnValueTypeCheckFailureMessage)
    push 020h                                                    ; type of argument #1 (String'32)
    lea rsi, qword ptr [rsp + 0a8h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 0a8h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ;  - exit(1)
    ; Call exit with 1 arguments
    push 001h                                                    ; value of argument #1 (1 (integer))
    push 01fh                                                    ; type of argument #1 (Integer'31)
    lea rdi, qword ptr [rsp + 0a8h]                              ; load address of return value's value
    push rdi                                                     ; internal argument 6: pointer to return value slot's value
    lea rdi, qword ptr [rsp + 0a8h]                              ; load address of return value's type
    push rdi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$exit                                               ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
  func$_stringify$StringifyReturnValue$TypeMatch:                ; after block
  mov r12, qword ptr [rbp + 030h]                                ; get pointer to return value of _stringify into register to dereference it
  mov qword ptr [r12], 000h                                      ; _stringify return value
  mov r13, qword ptr [rbp + 028h]                                ; get pointer to return value type of _stringify into register to dereference it
  mov qword ptr [r13], 01dh                                      ; type of _stringify return value (Null'29)
  func$_stringify$epilog: 
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 0a8h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine

; _println
dq func$_println$annotation
func$_println:
  ; Prolog
  push r15                                                       ; save non-volatile registers
  push rbx                                                       ; save non-volatile registers
  push rsi                                                       ; save non-volatile registers
  push rdi                                                       ; save non-volatile registers
  push rbp                                                       ; save non-volatile registers
  push r12                                                       ; save non-volatile registers
  push r13                                                       ; save non-volatile registers
  push r14                                                       ; save non-volatile registers
  sub rsp, 068h                                                  ; allocate space for stack
  lea rbp, qword ptr [rsp + 0a8h]                                ; set up frame pointer
  ; Varargs parameter type check; expecting parameters to be Anything
  lea r10, qword ptr [rbp + 038h]                                ; get base address of varargs, where loop will start
  mov rax, rcx                                                   ; assign value of parameter count of _println to value of pointer to last argument
  mov rbx, 010h                                                  ; read operand of mul (10 (integer)) 
  mul rbx                                                        ; end of loop is the number of arguments times the width of each argument (010h)...
  add rax, r10                                                   ; ...offset from the initial index (result in pointer to last argument)
  func$_println$varargTypeChecks$Loop:                           ; top of loop
    mov qword ptr [rsp + 058h], 000h                             ; move pointer to indexth argument's type into a mutable location
    cmp r10, rax                                                 ; compare pointer to indexth argument to pointer to last argument
    je func$_println$varargTypeChecks$TypesAllMatch              ; we have type-checked all the arguments
    mov rsi, qword ptr [r10]                                     ; load type of indexth argument into indexth argument
    mov rdi, rsi                                                 ; store indexth argument's type in testByte value slot
    mov qword ptr [rsp + 050h], rax                              ; move pointer to last argument's value out of rax
    mov rax, rdi                                                 ; move testByte to testByte
    mov r12, 002h                                                ; read operand of mul (type table width in bytes) 
    mul r12                                                      ; adjust to the relative start of that type's entry in the type table
    mov r13, offset typeTable                                    ; read second operand of + (type table pointer)
    add rax, r13                                                 ; finally offset all of that by the start of the type table itself (result in testByte)
    bt qword ptr [rax], 006h                                     ; check that vararg types is Anything
    jc func$_println$varargTypeChecks$TypeMatch                  ; skip next block if the type matches
      ; Error handling block for vararg types
      int 3                                                      ; call debugger
      ;  - print(parameterTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r14, offset parameterTypeCheckFailureMessage           ; reading parameterTypeCheckFailureMessage for push
      push r14                                                   ; value of argument #1 (parameterTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r15, qword ptr [rsp + 058h]                            ; load address of return value's value
      push r15                                                   ; internal argument 6: pointer to return value slot's value
      lea r15, qword ptr [rsp + 058h]                            ; load address of return value's type
      push r15                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov qword ptr [rsp + 078h], rcx                            ; move parameter count of _println's value out of rcx
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 070h], r10                            ; move pointer to indexth argument's value out of r10
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r10, qword ptr [rsp + 058h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 058h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov r10, qword ptr [rsp + 030h]                            ; restoring slots to previous scope state
      mov rcx, qword ptr [rsp + 038h]                            ; restoring slots to previous scope state
    func$_println$varargTypeChecks$TypeMatch:                    ; after block
    add r10, 010h                                                ; next argument (result in pointer to indexth argument)
    mov rax, qword ptr [rsp + 050h]                              ; restoring slots to previous scope state
    jmp func$_println$varargTypeChecks$Loop                      ; return to top of loop
    func$_println$varargTypeChecks$TypesAllMatch:                ; after loop
    mov rax, qword ptr [rsp + 050h]                              ; restoring slots to previous scope state
  ; Line 548: Boolean first = true;
  mov rax, 001h                                                  ; value initialization of variable declaration for first variable (true)
  mov r12, 01eh                                                  ; type initialization of variable declaration for first variable (Boolean'30)
  ; Line 549: Integer index = 0;
  mov r10, 000h                                                  ; value initialization of variable declaration for index variable (0)
  mov rbx, 01fh                                                  ; type initialization of variable declaration for index variable (Integer'31)
  func$_println$while$top:                                       ; top of while
    mov rsi, r10                                                 ; make a copy of index's value in case it changes before we use it
    mov rdi, rbx                                                 ; make a copy of index's type in case it changes before we use it
    ; Call len with 1 arguments
    cmp rdi, 000h                                                ; compare type of copy of index to <sentinel>
    jne func$_println$while$index$TypeMatch                      ; skip next block if copy of index is not sentinel
      ; Error handling block for index
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov r14, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push r14                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r15, qword ptr [rsp + 068h]                            ; load address of return value's value
      push r15                                                   ; internal argument 6: pointer to return value slot's value
      lea r15, qword ptr [rsp + 068h]                            ; load address of return value's type
      push r15                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov qword ptr [rsp + 088h], rcx                            ; move parameter count of _println's value out of rcx
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      mov qword ptr [rsp + 080h], r10                            ; move index variable's value out of r10
      mov qword ptr [rsp + 078h], rax                            ; move first variable's value out of rax
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r10, qword ptr [rsp + 068h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 068h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rax, qword ptr [rsp + 038h]                            ; restoring slots to previous scope state
      mov rcx, qword ptr [rsp + 048h]                            ; restoring slots to previous scope state
      mov r10, qword ptr [rsp + 040h]                            ; restoring slots to previous scope state
    func$_println$while$index$TypeMatch:                         ; after block
    mov qword ptr [rsp + 058h], rax                              ; move first variable's value out of rax
    xor rax, rax                                                 ; clear < operator result
    cmp rsi, rcx                                                 ; compare copy of index with parameter count of _println
    setl al                                                      ; store result in < operator result
    cmp rax, 000h                                                ; compare < operator result to false
    jne func$_println$while$body                                 ; while condition
    mov rax, qword ptr [rsp + 058h]                              ; restoring slots to previous scope state
    jmp func$_println$while$bottom                               ; break out of while
    func$_println$while$body:                                    ; start of while
    ; Line 551: if (first == false) { ...
    mov qword ptr [rsp + 050h], r12                              ; move first variable's type out of r12
    mov r12, qword ptr [rsp + 058h]                              ; make a copy of first's value in case it changes before we use it
    mov r13, qword ptr [rsp + 050h]                              ; make a copy of first's type in case it changes before we use it
    xor r14, r14                                                 ; zero value result of == (testing copy of first and false) to put the boolean in
    cmp r12, 000h                                                ; values equal?
    sete r14b                                                    ; put result in value result of == (testing copy of first and false)
    mov r15, 01eh                                                ; value result of == (testing copy of first and false) is a Boolean'30
    mov qword ptr [rsp + 048h], r10                              ; move index variable's value out of r10
    xor r10, r10                                                 ; zero type result of == (testing copy of first and false) to put the boolean in
    cmp r13, 01eh                                                ; types equal?
    sete r10b                                                    ; put result in type result of == (testing copy of first and false)
    mov qword ptr [rsp + 040h], rbx                              ; move index variable's type out of rbx
    mov rbx, 01eh                                                ; type result of == (testing copy of first and false) is a Boolean'30
    mov rsi, r14                                                 ; assign value of value result of == (testing copy of first and false) to value of == operator result
    and rsi, r10                                                 ; && type temp and value temp
    cmp rsi, 000h                                                ; compare == operator result to false
    je func$_println$while$if$continuation                       ; first == false
      ; Line 552: __print(' ');
      ; Call __print with 1 arguments
      mov r12, offset string$39                                  ; reading string for push
      push r12                                                   ; value of argument #1 (string)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r13, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r13                                                   ; internal argument 6: pointer to return value slot's value
      lea r13, qword ptr [rsp + 048h]                            ; load address of return value's type
      push r13                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov qword ptr [rsp + 068h], rcx                            ; move parameter count of _println's value out of rcx
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rcx, qword ptr [rsp + 028h]                            ; restoring slots to previous scope state
    func$_println$while$if$continuation:                         ; end of if
    ; Line 554: __print(_stringify(parts[index]));
    mov rbx, qword ptr [rsp + 048h]                              ; make a copy of index's value in case it changes before we use it
    mov rsi, qword ptr [rsp + 040h]                              ; make a copy of index's type in case it changes before we use it
    cmp rsi, 000h                                                ; compare type of copy of index to <sentinel>
    jne func$_println$while$copyOfIndex$TypeMatch                ; skip next block if copy of index is not sentinel
      ; Error handling block for copy of index
      int 3                                                      ; call debugger
      ;  - print(subscriptTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov rdi, offset subscriptTypeCheckFailureMessage           ; reading subscriptTypeCheckFailureMessage for push
      push rdi                                                   ; value of argument #1 (subscriptTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea rax, qword ptr [rsp + 048h]                            ; load address of return value's value
      push rax                                                   ; internal argument 6: pointer to return value slot's value
      lea rax, qword ptr [rsp + 048h]                            ; load address of return value's type
      push rax                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov qword ptr [rsp + 068h], rcx                            ; move parameter count of _println's value out of rcx
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r12, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 048h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rcx, qword ptr [rsp + 028h]                            ; restoring slots to previous scope state
    func$_println$while$copyOfIndex$TypeMatch:                   ; after block
    lea r13, qword ptr [rbp + 038h]                              ; base address of varargs
    cmp rbx, rcx                                                 ; compare copy of index to parameter count of _println
    jge func$_println$while$subscript$boundsError                ; index out of range (too high)
    cmp rbx, 000h                                                ; compare copy of index to 0 (integer)
    jge func$_println$while$subscript$inBounds                   ; index not out of range (not negative)
    func$_println$while$subscript$boundsError:                   ; invalid index
      ; Error handling block for subscript bounds error
      int 3                                                      ; call debugger
      ;  - print(boundsFailureMessage)
      ; Call __print with 1 arguments
      mov r14, offset boundsFailureMessage                       ; reading boundsFailureMessage for push
      push r14                                                   ; value of argument #1 (boundsFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r15, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r15                                                   ; internal argument 6: pointer to return value slot's value
      lea r15, qword ptr [rsp + 048h]                            ; load address of return value's type
      push r15                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov qword ptr [rsp + 068h], rcx                            ; move parameter count of _println's value out of rcx
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea r10, qword ptr [rsp + 048h]                            ; load address of return value's value
      push r10                                                   ; internal argument 6: pointer to return value slot's value
      lea r10, qword ptr [rsp + 048h]                            ; load address of return value's type
      push r10                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rcx, qword ptr [rsp + 028h]                            ; restoring slots to previous scope state
    func$_println$while$subscript$inBounds:                      ; valid index
    mov qword ptr [rsp + 038h], rbx                              ; move copy of index's value out of rbx
    mov rbx, qword ptr [rsp + 038h]                              ; assign value of copy of index to value of index into list * 16
    shl rbx, 004h                                                ; multiply by 8*2
    mov rsi, r13                                                 ; assign value of base address of varargs to value of pointer to parts[copy of index]
    add rsi, rbx                                                 ; compute address of specified list entry (result in pointer to parts[copy of index])
    mov rdi, qword ptr [rsi + 008h]                              ; value of parts[copy of index]
    mov rax, qword ptr [rsi]                                     ; type of parts[copy of index]
    ; increment reference count for copy of parts[copy of index] if necessary
    mov r12, rax                                                 ; store copy of parts[copy of index]'s type in testByte value slot
    mov qword ptr [rsp + 038h], rax                              ; move copy of parts[copy of index]'s type out of rax
    mov rax, r12                                                 ; move testByte to testByte
    mov r13, 002h                                                ; read operand of mul (type table width in bytes) 
    mul r13                                                      ; adjust to the relative start of that type's entry in the type table
    mov r14, offset typeTable                                    ; read second operand of + (type table pointer)
    add rax, r14                                                 ; finally offset all of that by the start of the type table itself (result in testByte)
    bt qword ptr [rax], 007h                                     ; check that possibly GarbageCollectable value is GarbageCollectable
    jnc func$_println$while$AfterGCIncref                        ; if not a GarbageCollectable, skip incref
      inc qword ptr [rdi]                                        ; increment reference count of copy of parts[copy of index]
    func$_println$while$AfterGCIncref:                           ; after GarbageCollectable incref
    cmp qword ptr [rsp + 038h], 020h                             ; compare type of copy of parts[copy of index] to String
    jne func$_println$while$AfterStringIncref                    ; if not a String, skip incref
      mov r15, qword ptr [rdi]                                   ; dereference string to get to reference count
      cmp r15, 0                                                 ; compare string reference count to 0
      jns func$_println$while$StringIncref                       ; if reference count is negative (constant strings), skip incref
      jmp func$_println$while$AfterStringIncref                  ; skip incref for string constants
      func$_println$while$StringIncref:                          ; real String
        inc qword ptr [rdi]                                      ; increment reference count of copy of parts[copy of index]
    func$_println$while$AfterStringIncref:                       ; after String incref
    ; Call _stringify with 1 arguments
    push rdi                                                     ; value of argument #1 (copy of parts[copy of index])
    push qword ptr [rsp + 040h]                                  ; type of argument #1
    lea rsi, qword ptr [rsp + 040h]                              ; load address of return value's value
    push rsi                                                     ; internal argument 6: pointer to return value slot's value
    lea rsi, qword ptr [rsp + 040h]                              ; load address of return value's type
    push rsi                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov qword ptr [rsp + 060h], rcx                              ; move parameter count of _println's value out of rcx
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$_stringify                                         ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ; Call __print with 1 arguments
    push qword ptr [rsp + 030h]                                  ; value of argument #1 (_stringify return value)
    push qword ptr [rsp + 030h]                                  ; type of argument #1
    lea r13, qword ptr [rsp + 028h]                              ; load address of return value's value
    push r13                                                     ; internal argument 6: pointer to return value slot's value
    lea r13, qword ptr [rsp + 028h]                              ; load address of return value's type
    push r13                                                     ; internal argument 5: pointer to return value slot's type
    sub rsp, 020h                                                ; allocate shadow space
    mov r9, 000h                                                 ; internal argument 4: "this" pointer
    mov r8, 000h                                                 ; internal argument 3: "this" pointer type
    mov rdx, 000h                                                ; internal argument 2: closure pointer
    mov rcx, 001h                                                ; internal argument 1: number of actual arguments
    call func$__print                                            ; jump to subroutine
    add rsp, 040h                                                ; release shadow space and arguments (result in stack pointer)
    ; Line 555: first = false;
    mov qword ptr [rsp + 058h], 000h                             ; store value
    mov qword ptr [rsp + 050h], 01eh                             ; store type (Boolean'30)
    ; Line 556: index += 1;
    mov rbx, qword ptr [rsp + 048h]                              ; make a copy of index's value in case it changes before we use it
    mov rsi, qword ptr [rsp + 040h]                              ; make a copy of index's type in case it changes before we use it
    cmp rsi, 000h                                                ; compare type of copy of index to <sentinel>
    jne func$_println$while$copyOfIndex$TypeMatch$1              ; skip next block if copy of index is not sentinel
      ; Error handling block for copy of index
      int 3                                                      ; call debugger
      ;  - print(operandTypeCheckFailureMessage)
      ; Call __print with 1 arguments
      mov qword ptr [rsp + 018h], rdi                            ; move copy of parts[copy of index]'s value out of rdi
      mov rdi, offset operandTypeCheckFailureMessage             ; reading operandTypeCheckFailureMessage for push
      push rdi                                                   ; value of argument #1 (operandTypeCheckFailureMessage)
      push 020h                                                  ; type of argument #1 (String'32)
      lea r12, qword ptr [rsp + 020h]                            ; load address of return value's value
      push r12                                                   ; internal argument 6: pointer to return value slot's value
      lea r12, qword ptr [rsp + 020h]                            ; load address of return value's type
      push r12                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$__print                                          ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      ;  - exit(1)
      ; Call exit with 1 arguments
      push 001h                                                  ; value of argument #1 (1 (integer))
      push 01fh                                                  ; type of argument #1 (Integer'31)
      lea rax, qword ptr [rsp + 020h]                            ; load address of return value's value
      push rax                                                   ; internal argument 6: pointer to return value slot's value
      lea rax, qword ptr [rsp + 020h]                            ; load address of return value's type
      push rax                                                   ; internal argument 5: pointer to return value slot's type
      sub rsp, 020h                                              ; allocate shadow space
      mov r9, 000h                                               ; internal argument 4: "this" pointer
      mov r8, 000h                                               ; internal argument 3: "this" pointer type
      mov rdx, 000h                                              ; internal argument 2: closure pointer
      mov rcx, 001h                                              ; internal argument 1: number of actual arguments
      call func$exit                                             ; jump to subroutine
      add rsp, 040h                                              ; release shadow space and arguments (result in stack pointer)
      mov rdi, qword ptr [rsp + 018h]                            ; restoring slots to previous scope state
    func$_println$while$copyOfIndex$TypeMatch$1:                 ; after block
    mov r10, rbx                                                 ; assign value of copy of index to value of += operator result
    add r10, 001h                                                ; += operator
    mov qword ptr [rsp + 048h], r10                              ; store value
    mov qword ptr [rsp + 040h], 01fh                             ; store type (Integer'31)
    ; Decrement reference count for _stringify return value (static type: String'32) via decrefMaybeString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, qword ptr [rsp + 048h]                              ; arg #2: _stringify return value's type
    mov rcx, qword ptr [rsp + 050h]                              ; arg #1: _stringify return value's value
    call decrefMaybeString                                       ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    ; Decrement reference count for copy of parts[copy of index] (static type: Anything'35) via decrefMaybeGCOrString
    sub rsp, 20h                                                 ; allocate shadow space for decref function
    mov rdx, qword ptr [rsp + 058h]                              ; arg #2: copy of parts[copy of index]'s type
    mov rcx, rdi                                                 ; arg #1: copy of parts[copy of index]'s value
    call decrefMaybeGCOrString                                   ; call decref
    add rsp, 20h                                                 ; free shadow space for decref
    mov rax, qword ptr [rsp + 058h]                              ; restoring slots to previous scope state
    mov rbx, qword ptr [rsp + 040h]                              ; restoring slots to previous scope state
    mov rcx, qword ptr [rsp + 020h]                              ; restoring slots to previous scope state
    mov r10, qword ptr [rsp + 048h]                              ; restoring slots to previous scope state
    mov r12, qword ptr [rsp + 050h]                              ; restoring slots to previous scope state
    jmp func$_println$while$top                                  ; return to top of while
  func$_println$while$bottom:                                    ; bottom of while
  ; Line 558: __print('\n');
  ; Call __print with 1 arguments
  mov r14, offset string$40                                      ; reading string for push
  push r14                                                       ; value of argument #1 (string)
  push 020h                                                      ; type of argument #1 (String'32)
  lea r15, qword ptr [rsp + 068h]                                ; load address of return value's value
  push r15                                                       ; internal argument 6: pointer to return value slot's value
  lea r15, qword ptr [rsp + 068h]                                ; load address of return value's type
  push r15                                                       ; internal argument 5: pointer to return value slot's type
  sub rsp, 020h                                                  ; allocate shadow space
  mov r9, 000h                                                   ; internal argument 4: "this" pointer
  mov r8, 000h                                                   ; internal argument 3: "this" pointer type
  mov rdx, 000h                                                  ; internal argument 2: closure pointer
  mov rcx, 001h                                                  ; internal argument 1: number of actual arguments
  call func$__print                                              ; jump to subroutine
  add rsp, 040h                                                  ; release shadow space and arguments (result in stack pointer)
  ; Implicit return from _println
  mov rdi, qword ptr [rbp + 030h]                                ; get pointer to return value of _println into register to dereference it
  mov qword ptr [rdi], 000h                                      ; _println return value
  mov r12, qword ptr [rbp + 028h]                                ; get pointer to return value type of _println into register to dereference it
  mov qword ptr [r12], 01dh                                      ; type of _println return value (Null'29)
  mov rax, qword ptr [rbp + 030h]                                ; report address of return value
  ; Epilog
  add rsp, 068h                                                  ; free space for stack
  pop r14                                                        ; restore non-volatile registers
  pop r13                                                        ; restore non-volatile registers
  pop r12                                                        ; restore non-volatile registers
  pop rbp                                                        ; restore non-volatile registers
  pop rdi                                                        ; restore non-volatile registers
  pop rsi                                                        ; restore non-volatile registers
  pop rbx                                                        ; restore non-volatile registers
  pop r15                                                        ; restore non-volatile registers
  ret                                                            ; return from subroutine
end

