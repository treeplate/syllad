import 'syd-rtl-memory.syd';

WhateverList listConstructor#(Integer typeCode, Integer initialSize) intrinsic# {
  assert(initialSize > 0, 'listConstructor# needs initialSize to be greater than 0');
  _gcLocked += 1;
  WhateverList list = _constructor(typeCode, 2, 2) as WhateverList;
  __ListData data = _constructor(__typeCodeOf __ListData, 0, initialSize) as __ListData;
  __writeToAddress(list __as__ Integer + _gcBlockData + 0, __typeOf initialSize);
  __writeToAddress(list __as__ Integer + _gcBlockData + 8, initialSize);
  __writeToAddress(list __as__ Integer + _gcBlockData + 16, __typeOf data);
  __writeToAddress(list __as__ Integer + _gcBlockData + 24, data __as__ Integer);
  _gcLocked -= 1;
  return list;
}

Null _growList(WhateverList list) {
  assert(len(list) > 0, '_growList got empty list');
  _gcLocked += 1;
  Integer newSize = len(list) * 2;
  __ListData newData = _constructor(__typeCodeOf __ListData, len(list), newSize) as __ListData;
  __ListData oldData = __readFromAddress(list __as__ Integer + _gcBlockData + 16 + 8) __as__ __ListData;
  _moveBytes(oldData __as__ Integer + _gcBlockData, newData __as__ Integer + _gcBlockData, len(list) * 16);
  __writeToAddress(list __as__ Integer + _gcBlockData + 8, newSize);
  __writeToAddress(list __as__ Integer + _gcBlockData + 16 + 8, newData __as__ Integer);
  _gcLocked -= 1;
}

Null append(WhateverList list, Anything element) intrinsic# {
  if (!(element __dynamic_is__ __elementTypeFrom __typeOf list)) {
    throw('type error in append');
  }
  _gcLocked += 1;
  Integer intermediaryAddress = list __as__ Integer;
  Integer size = __readFromAddress(intermediaryAddress + _gcBlockData + 0 + 8);
  assert(size > 0, '0 size list should not be possible');
  Integer dataAddress = __readFromAddress(intermediaryAddress + _gcBlockData + 16 + 8);
  Integer length = len(list);
  if (length == size) {
    _growList(list);
    dataAddress = __readFromAddress(intermediaryAddress + _gcBlockData + 16 + 8);
  }
  __writeToAddress(dataAddress + _gcBlockData + length * 16, __typeOf element);
  __writeToAddress(dataAddress + _gcBlockData + length * 16 + 8, element __as__ Integer);
  __writeToAddress(dataAddress + _gcBlockHeaderLength, length + 1);
  if (element is String) {
    Integer refcount = __readFromAddress(element __as__ Integer + _gcBlockHeaderRefCount);
    if (refcount >= 0) {
      __writeToAddress(element __as__ Integer + _gcBlockHeaderRefCount, refcount + 1);
    }
  }
  _gcLocked -= 1;
}