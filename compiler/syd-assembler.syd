import 'core.syd';
import 'syd-structured-data.syd';
import 'syd-utils.syd';
import 'syd-pseudo-instructions.syd';

class Assembler extends Object {
  AssemblerLabel rootLabel;
  Map labelSequenceIds = Map(); // String -> Integer
  Map labels = Map(); // AssemblerLabel -> String

  String serializeLabel(AssemblerLabel label) {
    StringNullable result = labels.get(label) as StringNullable;
    if (result == null) {
      String candidate;
      if (label.parent == rootLabel) {
        candidate = camelCase(label.name);
      } else {
        assert(label.parent != null, concat('all labels must derive from the root label; label ', label.name, ' is a strange root'));
        candidate = concat(serializeLabel(label.parent!), '$', camelCase(label.name));
      }
      IntegerNullable sequenceId = labelSequenceIds.get(candidate) as IntegerNullable;
      if (sequenceId == null) {
        sequenceId = 0;
        result = candidate;
      } else {
        sequenceId = sequenceId! + 1;
        result = concat(candidate, '_', sequenceId);
      }
      labelSequenceIds.set(candidate, sequenceId);
      labels.set(label, result!);
    }
    return result!;
  }

  ConstantList const = []:Constant;

  Null addConst(Constant section) {
    // TODO: make sure the result is 64-bit aligned
    append(const, section);
  }

  ConstantList data = []:Constant;

  Null addData(Constant section) {
    append(data, section);
  }

  UninitializedGlobalList uninitializedGlobals = []:UninitializedGlobal;

  Null addUninitializedGlobal(UninitializedGlobal section) {
    append(uninitializedGlobals, section);
  }

  String serialize() {
    abstract();
  }

  Null assemble(PseudoInstructionList pseudoInstructions) {
    abstract();
  }

  Null constructor(AssemblerLabel rootLabelArg) {
    super.constructor();
    rootLabel = rootLabelArg;
  }
}
