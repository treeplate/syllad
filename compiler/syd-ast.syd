import 'core.syd';
import 'syd-tokenizer.syd';
import 'syd-utils.syd';
import 'syd-compiler.syd';
import 'syd-loop-scopes.syd';

class TypeIdentifier extends AstNode {
  String name;
  
  String toStringIndent(Integer indent) {
    return name;
  }

  Type generateInstructions(CompiledScope scope) {
    TypeNullable result = scope.environment().parseType(name, scope.globalScope().lookupType);
    if (result == null) {
      throw(concat('Type "', name, '" not known at ', sourceLocation));
    }
    return result;
  }

  Null constructor(String nameArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    name = nameArg;
  }
}

class Statement extends AstNode {
  Null generateInstructions(CompiledScope scope) {
    abstract();
  }
}

class StatementBlock extends AstNode {
  StatementList children;
  
  String toStringIndent(Integer indent) {
    StringList buffer = []:String;
    for (statement in children) {
      append(buffer, stringTimes(' ', indent));
      append(buffer, statement.toStringIndent(indent));
    }
    return joinList(buffer);
  }

  Null walk(NullFunction callback, Anything context) {
    for (child in children) {
      callback(child, context);
    }
  }

  Null generateInstructions(CompiledScope scope) {
    Null compileChild(Statement child, CompiledScope scope) {
      scope.markSourceLocation(child);
      child.generateInstructions(scope);
    }
    walk(compileChild, scope);
  }

  Null constructor(StatementList statementsArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    children = statementsArg;
  }
}

class Expression extends AstNode {
  // Expressions are expected to declare (or identify) a Slot, and return it.
  Slot generateInstructions(CompiledScope scope) {
    abstract();
  }
}

class StringLiteralExpression extends Expression {
  String value;
  String label;

  Slot generateInstructions(CompiledScope scope) {
    Slot result = scope.environment().registerStringConstant('string', value, sourceLocation.lineNo, sourceLocation.colNo, sourceLocation.filename);
    scope.references.add(result); // TODO: ideally we would be able to tree shake references from dead code too, not just unreferenced functions
    return result;
  }

  String toStringIndent(Integer indent) {
    return concat('\'', escapeString(value), '\'');
  }

  Null constructor(String valueArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    value = valueArg;
  }
}

class IntegerLiteralExpression extends Expression {
  Integer value;

  Slot generateInstructions(CompiledScope scope) {
    return ImmediateIntegerSlot(scope.environment().intrinsicsLibrary.coreIntegerType, value, concat(this));
  }
  
  String toStringIndent(Integer indent) {
    if (value > -10 && value < 10) {
      return intToStr(value);
    }
    if (value < 0) {
      return concat(intToStr(value), ' /* -0x', hex(-value), ' *\/');
    }
    return concat(intToStr(value), ' /* 0x', hex(value), ' *\/');
  }

  Null constructor(Integer valueArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    value = valueArg;
  }
}

class ListLiteralExpression extends Expression {
  ExpressionList values;
  TypeIdentifierNullable elementType;

  String toStringIndent(Integer indent) {
    String indenter(AstNode node) {
      return node.toStringIndent(indent + 2);
    }
    String elementTypeString = '';
    if (elementType != null) {
      elementTypeString = concat(':', elementType!.toStringIndent(indent));
    }
    return concat('[', join(map(values, indenter) as StringList, ','), ']', elementTypeString);
  }

  Null walk(NullFunction callback, Anything context) {
    for (child in values) {
      callback(child, context);
    }
  }

  Slot generateInstructions(CompiledScope scope) {
    CompilationEnvironment environment = scope.environment();
    if (len(values) > 0) {
      // TODO: implement non-empty list literals
      throw('list literals not implemented; only list constructors (empty literals) are currently supported');
    }
    Type evaluatedElementType;
    if (elementType != null) {
      evaluatedElementType = elementType!.generateInstructions(scope);
    } else {
      // TODO: infer the type based on the elements of the list
      evaluatedElementType = environment.intrinsicsLibrary.coreAnythingType;
    }
    Type type = createOrFindListType(environment, evaluatedElementType);
    type.markConstructed();
    return scope.emitSubroutineCall(
      scope.lookupIntrinsic(environment.listConstructorIntrinsicName),
      [
        TypeCodeSlot(environment, type),
        environment.integer(1), // initial size -- must not be zero, we double when growing
      ]:Slot,
    );
  }

  Null constructor(ExpressionList valuesArg, TypeIdentifierNullable elementTypeArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    values = valuesArg;
    elementType = elementTypeArg;
  }
}

class LValue extends Object {
  Null assign(CompiledScope scope, Slot rValue, SourceLocation sourceLocation) {
    abstract();
  }
}

class LValueExpression extends Expression {
  LValue generateLValue(CompiledScope scope) {
    abstract();
  }
}

class VariableLValue extends LValue {
  Slot variable;

  Null assign(CompiledScope scope, Slot rValue, SourceLocation sourceLocation) {
    if (!rValue.staticType.isSubtypeOf(variable.staticType)) {
      throw(concat('Cannot assign ', rValue.staticType.name, ' to variable of type ', variable.staticType.name, ' at ', sourceLocation));
    }
    scope.emitTypeCheck(rValue, variable.staticType, scope.environment().intrinsicsLibrary.assignmentTypeCheckFailureMessage as Slot, rValue.debugName, true);
    scope.emitInstruction(DecrefInstruction(variable));
    scope.emitInstruction(MoveInstruction(variable, rValue, 'store value'));
    scope.emitInstruction(MoveTypeToTypeInstruction(variable, rValue, scope.environment(), 'store type'));
    scope.emitIncref(variable, true);
  }

  Null constructor(Slot variableArg) {
    super.constructor();
    variable = variableArg;
  }
}

class VariableExpression extends LValueExpression {
  String name;
  
  String toStringIndent(Integer indent) {
    return name;
  }

  Slot generateInstructions(CompiledScope scope) {
    SlotNullable originalSlot = scope.lookupIdentifier(name);
    if (originalSlot == null) {
      throw(concat('Identifier "', name, '" not known at ', sourceLocation));
    }
    if (originalSlot!.isMutable()) {
      rc referenceCountStyle;
      if (originalSlot!.staticType.neverReferenceCounted()) {
        referenceCountStyle = rcNever;
      } else {
        referenceCountStyle = rcOnStack;
      }
      DynamicSlot copy = scope.registerDynamicValue(originalSlot!.staticType, referenceCountStyle, concat('copy of ', name));
      // TODO: optimizer should elide the copy if not needed
      scope.emitInstruction(MoveInstruction(copy, originalSlot!, concat('make a copy of ', name, '\'s value in case it changes before we use it')));
      scope.emitInstruction(MoveTypeToTypeInstruction(copy, originalSlot!, scope.environment(), concat('make a copy of ', name, '\'s type in case it changes before we use it')));
      if (!copy.staticType.neverReferenceCounted()) {
        scope.emitIncref(copy, true /* isGCRoot */);
      }
      return copy;
    }
    return originalSlot!;
  }

  LValue generateLValue(CompiledScope scope) {
    SlotNullable originalSlot = scope.lookupIdentifier(name);
    if (originalSlot == null) {
      throw(concat('Identifier "', name, '" not known at ', sourceLocation));
    }
    assert(originalSlot!.isMutable(), concat(name, '\'s slot is immutable'));
    return VariableLValue(originalSlot!);
  }

  Null constructor(String nameArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    name = nameArg;
  }
}

class SubscriptLValue extends LValue {
  Type elementType;
  Slot pointer;

  Null assign(CompiledScope scope, Slot rValue, SourceLocation sourceLocation) {
    if (!rValue.staticType.isSubtypeOf(elementType)) {
      throw(concat('Cannot assign ', rValue.staticType.name, ', to list element of type ', elementType.name, ' at ', sourceLocation));
    }
    scope.emitTypeCheck(rValue, elementType, scope.environment().intrinsicsLibrary.assignmentTypeCheckFailureMessage as Slot, rValue.debugName, true);
    DynamicSlot oldValue = scope.registerDynamicValue(elementType, rcOnHeap, concat('old value in list'));
    scope.emitInstruction(MoveDerefInstruction(oldValue, pointer, 0x08, 'read old value'));
    scope.emitInstruction(MoveDerefToTypeInstruction(oldValue, pointer, 0x00, 'read old type'));
    scope.emitInstruction(MoveToDerefInstruction(pointer, rValue, 0x08, 'write new value'));
    scope.emitInstruction(MoveTypeToDerefInstruction(pointer, rValue, 0x00, scope.environment(), 'write new type'));
    scope.emitIncref(rValue, false /* isGCRoot */);
  }

  Null constructor(Type elementTypeArg, Slot pointerArg) {
    super.constructor();
    elementType = elementTypeArg;
    pointer = pointerArg;
  }
}

class SubscriptExpression extends LValueExpression {
  Expression list;
  Expression argument;
  
  String toStringIndent(Integer indent) {
    return concat(list.toStringIndent(indent), '[', argument.toStringIndent(indent), ']');
  }

  Boolean _prepared = false;
  Slot _evaluatedList;
  Slot _evaluatedArgument;
  Type _evaluatedElementType;

  Null _prepare(CompiledScope scope) {
    if (_prepared) {
      return;
    }
    _evaluatedList = list.generateInstructions(scope);
    if (_evaluatedList.staticType is AbstractListType) {
      _evaluatedElementType = (_evaluatedList.staticType as AbstractListType).elementType;
    } else if (_evaluatedList.staticType.isSubtypeOf(scope.environment().subscriptableType)) {
      _evaluatedElementType = scope.environment().intrinsicsLibrary.coreAnythingType;
    } else {
      throw(concat('"', list, '", a ', _evaluatedList.staticType.name, ', is not a list (and therefore cannot be subscripted) at ', sourceLocation));
    }
    scope.emitTypeCheck(_evaluatedList, scope.environment().subscriptableType, scope.environment().intrinsicsLibrary.operandTypeCheckFailureMessage, concat(list), true);
    _evaluatedArgument = argument.generateInstructions(scope);
    if (!_evaluatedArgument.staticType.isSubtypeOf(scope.environment().intrinsicsLibrary.coreIntegerType)) {
      throw(concat('Subscript index is not an Integer at ', sourceLocation, ' (is ', _evaluatedArgument.staticType.name, ')'));
    }
    scope.emitTypeCheck(
      _evaluatedArgument,
      scope.environment().intrinsicsLibrary.coreIntegerType,
      scope.environment().intrinsicsLibrary.subscriptTypeCheckFailureMessage as Slot,
      _evaluatedArgument.debugName,
      true,
    );
  }

  Slot generateInstructions(CompiledScope scope) {
    _prepare(scope);
    Slot pointer = scope.emitSubscriptEvaluation(_evaluatedList, _evaluatedArgument);
    // TODO: optimizer should elide the copy if not needed
    rc referenceCountStyle;
    if (_evaluatedElementType.neverReferenceCounted()) {
      referenceCountStyle = rcNever;
    } else {
      referenceCountStyle = rcOnStack;
    }
    DynamicSlot result = scope.registerDynamicValue(_evaluatedElementType, referenceCountStyle, concat('copy of ', _evaluatedList.debugName, '[', _evaluatedArgument.debugName, ']'));
    scope.emitInstruction(MoveDerefInstruction(result, pointer, 0x08, concat('value of ', _evaluatedList.debugName, '[', _evaluatedArgument.debugName, ']')));
    scope.emitInstruction(MoveDerefToTypeInstruction(result, pointer, 0, concat('type of ', _evaluatedList.debugName, '[', _evaluatedArgument.debugName, ']')));
    if (!_evaluatedElementType.neverReferenceCounted()) {
      scope.emitIncref(result, true /* isGCRoot */);
    }
    return result;
  }

  LValue generateLValue(CompiledScope scope) {
    _prepare(scope);
    return SubscriptLValue(_evaluatedElementType, scope.emitSubscriptEvaluation(_evaluatedList, _evaluatedArgument));
  }

  Null walk(NullFunction callback, Anything context) {
    callback(list, context);
    callback(argument, context);
  }

  Null constructor(Expression listArg, Expression argumentArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    list = listArg;
    argument = argumentArg;
  }
}

class MemberAccessExpression extends LValueExpression {
  Expression object;
  String member;
  
  String toStringIndent(Integer indent) {
    return concat(object.toStringIndent(indent), '.', member);
  }

  Null walk(NullFunction callback, Anything context) {
    callback(object, context);
  }

  Slot generateInstructions(CompiledScope scope) {
    // TODO: implement member access
    throw('member access not implemented');
  }

  Null constructor(Expression objectArg, String memberArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    object = objectArg;
    member = memberArg;
  }
}

class SubroutineCallExpression extends Expression {
  Expression subroutineReference;
  ExpressionList arguments;

  String toStringIndent(Integer indent) {
    StringList argumentsList = []:String;
    Integer index = 0;
    while (index < len(arguments)) {
      if (index > 0) {
        append(argumentsList, ', ');
      }
      append(argumentsList, arguments[index].toStringIndent(indent));
      index += 1;
    }
    return concat(subroutineReference.toStringIndent(indent), '(', joinList(argumentsList), ')');
  }

  Null walk(NullFunction callback, Anything context) {
    callback(subroutineReference, context);
    for (child in arguments) {
      callback(child, context);
    }
  }

  Slot generateInstructions(CompiledScope scope) {
    Slot subroutine = subroutineReference.generateInstructions(scope);
    SlotList argumentValues = []:Slot;
    if (subroutine.staticType.isSubtypeOf(scope.environment().subroutineType)) {
      for (argument in arguments) {
        append(argumentValues, argument.generateInstructions(scope));
      }
    } else {
      throw(concat('"', subroutineReference.toStringIndent(0), '" is not a subroutine at ', sourceLocation, ' (is ', subroutine.staticType.name, ')'));
    }
    scope.emitTypeCheck(
      subroutine,
      scope.environment().subroutineType,
      scope.environment().intrinsicsLibrary.subroutineCallTypeCheckFailureMessage as Slot,
      subroutine.debugName,
      true,
    );
    return scope.emitSubroutineCall(subroutine, argumentValues);
  }

  Null constructor(Expression subroutineReferenceArg, ExpressionList argumentsArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    subroutineReference = subroutineReferenceArg;
    arguments = argumentsArg;
  }
}

class UnwrapExpression extends Expression {
  Expression lhs;
  
  String toStringIndent(Integer indent) {
    return concat(lhs.toStringIndent(indent), '!');
  }

  Null walk(NullFunction callback, Anything context) {
    callback(lhs, context);
  }

  Slot generateInstructions(CompiledScope scope) {
    // TODO: implement unwrap
    throw('unwrap not implemented');
  }

  Null constructor(Expression lhsArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    lhs = lhsArg;
  }
}

class IsOperatorExpression extends Expression {
  Expression expression;
  TypeIdentifier type;
  
  String toStringIndent(Integer indent) {
    return concat(expression.toStringIndent(indent), ' is ', type);
  }

  Null walk(NullFunction callback, Anything context) {
    callback(expression, context);
  }

  Slot generateInstructions(CompiledScope scope) {
    Slot lhs = expression.generateInstructions(scope);
    Type rhs = type.generateInstructions(scope);
    Slot slot = scope.registerDynamicValue(scope.environment().intrinsicsLibrary.coreBooleanType, rcNever, 'is expression result');
    scope.emitStoreTypeCheck(rhs, lhs, slot, concat(expression));
    return slot;
  }

  Null constructor(Expression expressionArg, TypeIdentifier typeArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    expression = expressionArg;
    type = typeArg;
  }
}

class AsOperatorExpression extends Expression {
  Expression expression;
  TypeIdentifier type;
  
  String toStringIndent(Integer indent) {
    return concat(expression.toStringIndent(indent), ' as ', type);
  }

  Null walk(NullFunction callback, Anything context) {
    callback(expression, context);
  }

  Slot generateInstructions(CompiledScope scope) {
    Slot exprSlot = expression.generateInstructions(scope);
    Type rhs = type.generateInstructions(scope);
    if (!rhs.isSubtypeOf(exprSlot.staticType)) {
      throw(concat('Cannot cast ', exprSlot.staticType.name, ' to ', rhs.name, ' at ', sourceLocation));
    }
    scope.emitTypeCheck(exprSlot, rhs, scope.environment().intrinsicsLibrary.asOperatorFailureMessage, concat(this), true);
    // TODO: this new slot should be identical to the source except for the static type, but right now the slot manager can't handle that
    DynamicSlot result = scope.registerDynamicValue(rhs, rcNever, concat('cast of ', exprSlot.debugName, ' to ', rhs.name));
    scope.emitInstruction(MoveInstruction(result, exprSlot, result.debugName));
    scope.emitInstruction(SetTypeInstruction(result, rhs));
    return result;
  }

  Null constructor(Expression expressionArg, TypeIdentifier typeArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    expression = expressionArg;
    type = typeArg;
  }
}

class ReinterpretAsOperatorExpression extends Expression {
  Expression expression;
  TypeIdentifier type;
  
  String toStringIndent(Integer indent) {
    return concat(expression.toStringIndent(indent), ' __as__ ', type);
  }

  Null walk(NullFunction callback, Anything context) {
    callback(expression, context);
  }

  Slot generateInstructions(CompiledScope scope) {
    Slot exprSlot = expression.generateInstructions(scope);
    Type rhs = type.generateInstructions(scope);
    DynamicSlot result = scope.registerDynamicValue(rhs, rcNever, concat('force cast of ', exprSlot.debugName, ' to ', rhs.name));
    scope.emitInstruction(MoveInstruction(result, exprSlot, result.debugName));
    scope.emitInstruction(SetTypeInstruction(result, rhs));
    return result;
  }

  Null constructor(Expression expressionArg, TypeIdentifier typeArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    expression = expressionArg;
    type = typeArg;
  }
}

class ReinterpretDynamicAsOperatorExpression extends Expression {
  Expression expression;
  Expression type;
  
  String toStringIndent(Integer indent) {
    return concat(expression.toStringIndent(indent), ' __dynamic_as__ ', type);
  }

  Null walk(NullFunction callback, Anything context) {
    callback(expression, context);
  }

  Slot generateInstructions(CompiledScope scope) {
    Slot lhs = expression.generateInstructions(scope);
    Slot rhs = type.generateInstructions(scope);
    DynamicSlot result = scope.registerDynamicValue(scope.environment().intrinsicsLibrary.coreAnythingType, rcNever, concat('force cast of ', lhs.debugName, ' to the type with code ', rhs.debugName));
    scope.emitInstruction(MoveInstruction(result, lhs, result.debugName));
    scope.emitInstruction(MoveValueToTypeInstruction(result, rhs, result.debugName));
    return result;
  }

  Null constructor(Expression expressionArg, Expression typeArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    expression = expressionArg;
    type = typeArg;
  }
}

class UnaryExpression extends Expression {
  Expression rhs;

  String describeOperator() { abstract(); }

  Null generateTypeCheckInstructions(Slot rhsValue, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    abstract();
    // e.g.:
    // scope.emitTypeCheck(rhsValue, intrinsics.coreIntegerType, intrinsics.operandTypeCheckFailureMessage, concat(rhs), true);
  }

  Type returnType(CompiledIntrinsicsLibrary intrinsics) {
    abstract();
    // e.g.:
    // return intrinsics.coreIntegerType;
  }

  Null generateExpressionInstructions(Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    abstract();
    // e.g.:
    // scope.emitInstruction(AdditionInstruction(rhsValue, result, concat(describeOperator(), ' operator')));
  }
  
  String toStringIndent(Integer indent) {
    return concat(
      describeOperator(),
      rhs.toStringIndent(indent),
    );
  }

  Null walk(NullFunction callback, Anything context) {
    callback(rhs, context);
  }

  Slot generateInstructions(CompiledScope scope) {
    CompiledIntrinsicsLibrary intrinsics = scope.environment().intrinsicsLibrary as CompiledIntrinsicsLibrary;
    Slot rhsValue = rhs.generateInstructions(scope);
    generateTypeCheckInstructions(rhsValue, scope, intrinsics);
    assert(returnType(intrinsics).neverReferenceCounted(), concat(className, '\'s returnType is potentially reference countable?!'));
    Slot result = scope.registerDynamicValue(returnType(intrinsics), rcNever, concat(describeOperator(), ' unary operator result'));
    generateExpressionInstructions(rhsValue, result, scope, intrinsics);
    scope.emitInstruction(SetTypeInstruction(result, returnType(intrinsics)));
    return result;
  }

  Null constructor(Expression rhsArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    rhs = rhsArg;
  }
}

class IntegerNegationExpression extends UnaryExpression {
  String describeOperator() {
    return '-';
  }

  Null generateTypeCheckInstructions(Slot rhsValue, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    if (!rhsValue.staticType.isSubtypeOf(intrinsics.coreIntegerType)) {
      throw(concat('Expected Integer, but found ', rhsValue.staticType.name, ', as operand of unary ', describeOperator(), ' operator at ', sourceLocation));
    }
    scope.emitTypeCheck(rhsValue, intrinsics.coreIntegerType, intrinsics.operandTypeCheckFailureMessage, concat(rhs), true);
  }

  Type returnType(CompiledIntrinsicsLibrary intrinsics) {
    return intrinsics.coreIntegerType;
  }

  Null generateExpressionInstructions(Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    scope.emitInstruction(MonoOperandInstruction('neg', rhsValue, result, concat(describeOperator(), ' unary operator')));
  }
}

class PlusExpression extends UnaryExpression {
  String describeOperator() {
    return '+';
  }

  Null generateTypeCheckInstructions(Slot rhsValue, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    if (!rhsValue.staticType.isSubtypeOf(intrinsics.coreIntegerType)) {
      throw(concat('Expected Integer, but found ', rhsValue.staticType.name, ', as operand of unary ', describeOperator(), ' operator at ', sourceLocation));
    }
    scope.emitTypeCheck(rhsValue, intrinsics.coreIntegerType, intrinsics.operandTypeCheckFailureMessage, concat(rhs), true);
  }

  Type returnType(CompiledIntrinsicsLibrary intrinsics) {
    return intrinsics.coreIntegerType;
  }

  Null generateExpressionInstructions(Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    // TODO: hmm
    abstract();
  }
}

class BooleanNotExpression extends UnaryExpression {
  String describeOperator() {
    return '!';
  }

  Null generateTypeCheckInstructions(Slot rhsValue, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    if (!rhsValue.staticType.isSubtypeOf(intrinsics.coreBooleanType)) {
      throw(concat('Expected Boolean, but found ', rhsValue.staticType.name, ', as operand of unary ', describeOperator(), ' operator at ', sourceLocation));
    }
    scope.emitTypeCheck(rhsValue, intrinsics.coreBooleanType, intrinsics.operandTypeCheckFailureMessage, concat(rhs), true);
  }

  Type returnType(CompiledIntrinsicsLibrary intrinsics) {
    return intrinsics.coreBooleanType;
  }

  Null generateExpressionInstructions(Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    scope.emitInstruction(SetSlotIfEqualInstruction(rhsValue, scope.environment().integer(0), result, intrinsics.coreBooleanType, concat(describeOperator(), ' unary operator')));
  }
}

class BitwiseNotExpression extends UnaryExpression {
  String describeOperator() {
    return '~';
  }

  Null generateTypeCheckInstructions(Slot rhsValue, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    if (!rhsValue.staticType.isSubtypeOf(intrinsics.coreIntegerType)) {
      throw(concat('Expected Integer, but found ', rhsValue.staticType.name, ', as operand of unary ', describeOperator(), ' operator at ', sourceLocation));
    }
    scope.emitTypeCheck(rhsValue, intrinsics.coreIntegerType, intrinsics.operandTypeCheckFailureMessage, concat(rhs), true);
  }

  Type returnType(CompiledIntrinsicsLibrary intrinsics) {
    return intrinsics.coreIntegerType;
  }

  Null generateExpressionInstructions(Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    scope.emitInstruction(MonoOperandInstruction('not', rhsValue, result, concat(describeOperator(), ' unary operator')));
  }
}

class TypeOfExpression extends UnaryExpression {
  String describeOperator() {
    return '__typeOf';
  }

  Null generateTypeCheckInstructions(Slot rhsValue, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    // no type check at all, we can be called with anything even an internal type
  }

  Type returnType(CompiledIntrinsicsLibrary intrinsics) {
    return intrinsics.coreIntegerType;
  }

  Null generateExpressionInstructions(Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    scope.emitInstruction(MoveTypeToValueInstruction(result, rhsValue, 'get type of rhs'));
  }
}

class TypeToCodeExpression extends Expression {
  TypeIdentifier rhs;

  String describeOperator() {
    return '__typeToCode';
  }

  Null walk(NullFunction callback, Anything context) {
    callback(rhs, context);
  }
  
  String toStringIndent(Integer indent) {
    return concat(
      describeOperator(),
      ' ',
      rhs.toStringIndent(indent),
    );
  }

  Slot generateInstructions(CompiledScope scope) {
    Type rhsValue = rhs.generateInstructions(scope);
    return TypeCodeSlot(scope.environment(), rhsValue);
  }

  Null constructor(TypeIdentifier rhsArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    rhs = rhsArg;
  }
}

class OperatorExpression extends Expression {
  Expression lhs;
  Expression rhs;

  String describeOperator() {
    abstract();
    // e.g.:
    // return '+';
  }

  Null generateTypeCheckInstructions(Slot lhsValue, Slot rhsValue, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    abstract();
    // e.g.:
    // scope.emitTypeCheck(lhsValue, intrinsics.coreIntegerType, intrinsics.operandTypeCheckFailureMessage, concat(lhs), true);
    // scope.emitTypeCheck(rhsValue, intrinsics.coreIntegerType, intrinsics.operandTypeCheckFailureMessage, concat(rhs), true);
  }

  Type returnType(CompiledIntrinsicsLibrary intrinsics) {
    abstract();
    // e.g.:
    // return intrinsics.coreIntegerType;
  }

  Null generateExpressionInstructions(Slot lhsValue, Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    abstract();
    // e.g.:
    // scope.emitInstruction(AdditionInstruction(scope, lhsValue, rhsValue, result, concat(describeOperator(), ' operator')));
  }
  
  String toStringIndent(Integer indent) {
    return concat(
      lhs.toStringIndent(indent),
      ' ',
      describeOperator(),
      ' ',
      rhs.toStringIndent(indent),
    );
  }

  Null walk(NullFunction callback, Anything context) {
    callback(lhs, context);
    callback(rhs, context);
  }

  Slot generateInstructions(CompiledScope scope) {
    CompiledIntrinsicsLibrary intrinsics = scope.environment().intrinsicsLibrary as CompiledIntrinsicsLibrary;
    Slot lhsValue = lhs.generateInstructions(scope);
    Slot rhsValue = rhs.generateInstructions(scope);
    generateTypeCheckInstructions(lhsValue, rhsValue, scope, intrinsics);
    assert(returnType(intrinsics).neverReferenceCounted(), concat(className, '\'s returnType is potentially reference countable?!'));
    Slot result = scope.registerDynamicValue(returnType(intrinsics), rcNever, concat(describeOperator(), ' operator result'));
    generateExpressionInstructions(lhsValue, rhsValue, result, scope, intrinsics);
    scope.emitInstruction(SetTypeInstruction(result, returnType(intrinsics)));
    return result;
  }

  Null constructor(Expression lhsArg, Expression rhsArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    lhs = lhsArg;
    rhs = rhsArg;
  }
}

class NumericOperatorExpression extends OperatorExpression {
  Null generateTypeCheckInstructions(Slot lhsValue, Slot rhsValue, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    if (!lhsValue.staticType.isSubtypeOf(intrinsics.coreIntegerType)) {
      throw(concat('Expected Integer, but found ', lhsValue.staticType.name, ', as left hand operand of ', describeOperator(), ' operator at ', sourceLocation));
    }
    scope.emitTypeCheck(lhsValue, intrinsics.coreIntegerType, intrinsics.operandTypeCheckFailureMessage, concat(lhs), true);
    if (!rhsValue.staticType.isSubtypeOf(intrinsics.coreIntegerType)) {
      throw(concat('Expected Integer, but found ', rhsValue.staticType.name, ', as right hand operand of ', describeOperator(), ' operator at ', sourceLocation));
    }
    scope.emitTypeCheck(rhsValue, intrinsics.coreIntegerType, intrinsics.operandTypeCheckFailureMessage, concat(rhs), true);
  }

  Type returnType(CompiledIntrinsicsLibrary intrinsics) {
    return intrinsics.coreIntegerType;
  }
}

class OperatorAdditionExpression extends NumericOperatorExpression {
  String describeOperator() {
    return '+';
  }

  Null generateExpressionInstructions(Slot lhsValue, Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    scope.emitInstruction(AddInstruction(lhsValue, rhsValue, result, concat('compute (', lhsValue.debugName, ') ', describeOperator(), ' (', rhsValue.debugName, ')')));
  }
}

class OperatorSubtractionExpression extends NumericOperatorExpression {
  String describeOperator() {
    return '-';
  }

  Null generateExpressionInstructions(Slot lhsValue, Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    scope.emitInstruction(SubInstruction(lhsValue, rhsValue, result, concat('compute (', lhsValue.debugName, ') ', describeOperator(), ' (', rhsValue.debugName, ')')));
  }
}

class OperatorMultiplicationExpression extends NumericOperatorExpression {
  String describeOperator() {
    return '*';
  }

  Null generateExpressionInstructions(Slot lhsValue, Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    scope.emitInstruction(SignedMultiplyInstruction(lhsValue, rhsValue, result, concat('compute (', lhsValue.debugName, ') ', describeOperator(), ' (', rhsValue.debugName, ')')));
  }
}

class OperatorDivisionExpression extends NumericOperatorExpression {
  String describeOperator() {
    return '/';
  }

  Null generateExpressionInstructions(Slot lhsValue, Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    scope.emitInstruction(IntegerDivisionInstruction(lhsValue, rhsValue, result, concat('compute (', lhsValue.debugName, ') ', describeOperator(), ' (', rhsValue.debugName, ')')));
  }
}

class OperatorModulusExpression extends NumericOperatorExpression {
  String describeOperator() {
    return '%';
  }

  Null generateExpressionInstructions(Slot lhsValue, Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    scope.emitInstruction(IntegerRemainderInstruction(lhsValue, rhsValue, result, concat('compute (', lhsValue.debugName, ') ', describeOperator(), ' (', rhsValue.debugName, ')')));
  }
}

class OperatorBitwiseAndExpression extends NumericOperatorExpression {
  String describeOperator() {
    return '&';
  }

  Null generateExpressionInstructions(Slot lhsValue, Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    scope.emitInstruction(BiOperandInstruction('and', lhsValue, rhsValue, result,   concat('compute (', lhsValue.debugName, ') ', describeOperator(), ' (', rhsValue.debugName, ')')));
  }
}

class OperatorBitwiseOrExpression extends NumericOperatorExpression {
  String describeOperator() {
    return '|';
  }

  Null generateExpressionInstructions(Slot lhsValue, Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    scope.emitInstruction(BiOperandInstruction('or', lhsValue, rhsValue, result, concat('compute (', lhsValue.debugName, ') ', describeOperator(), ' (', rhsValue.debugName, ')')));
  }
}

class OperatorBitwiseXorExpression extends NumericOperatorExpression {
  String describeOperator() {
    return '^';
  }

  Null generateExpressionInstructions(Slot lhsValue, Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    scope.emitInstruction(BiOperandInstruction('xor', lhsValue, rhsValue, result, concat('compute (', lhsValue.debugName, ') ', describeOperator(), ' (', rhsValue.debugName, ')')));
  }
}

class OperatorLeftShiftExpression extends NumericOperatorExpression {
  String describeOperator() {
    return '<<';
  }

  Null generateExpressionInstructions(Slot lhsValue, Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    // TODO: this needs to check if the count operand is more than 6 bits
    scope.emitInstruction(ShiftInstruction('shl', lhsValue, rhsValue, result, concat('compute (', lhsValue.debugName, ') ', describeOperator(), ' (', rhsValue.debugName, ')')));
  }
}

class OperatorRightShiftExpression extends NumericOperatorExpression {
  String describeOperator() {
    return '>>';
  }

  Null generateExpressionInstructions(Slot lhsValue, Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    // TODO: this needs to check if the count operand is more than 6 bits
    scope.emitInstruction(ShiftInstruction('shr', lhsValue, rhsValue, result, concat('compute (', lhsValue.debugName, ') ', describeOperator(), ' (', rhsValue.debugName, ')')));
  }
}

class OperatorEqualsEqualsExpression extends OperatorExpression {
  String describeOperator() {
    return '==';
  }

  Null generateTypeCheckInstructions(Slot lhsValue, Slot rhsValue, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    // accepts any type if it's plausibly useful to compare them
    if (!(lhsValue.staticType.isSubtypeOf(rhsValue.staticType) || rhsValue.staticType.isSubtypeOf(lhsValue.staticType))) {
      throw(concat('Expected compatible types for ', describeOperator(), ' operator at ', sourceLocation, ' but found ', lhsValue.staticType.name, ' and ', rhsValue.staticType.name));
    }
  }

  Type returnType(CompiledIntrinsicsLibrary intrinsics) {
    return intrinsics.coreBooleanType;
  }

  Null generateExpressionInstructions(Slot lhsValue, Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    // TODO: StoreEqualityInstruction needs to implement string comparisons
    scope.storeEquality(lhsValue, rhsValue, result, false);
  }
}

class OperatorBangEqualsExpression extends OperatorExpression {
  String describeOperator() {
    return '!=';
  }

  Null generateTypeCheckInstructions(Slot lhsValue, Slot rhsValue, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    // accepts any type if it's plausibly useful to compare them
    if (!(lhsValue.staticType.isSubtypeOf(rhsValue.staticType) || rhsValue.staticType.isSubtypeOf(lhsValue.staticType))) {
      throw(concat('Expected compatible types for ', describeOperator(), ' operator at ', sourceLocation, ' but found ', lhsValue.staticType, ' and ', rhsValue.staticType));
    }
  }

  Type returnType(CompiledIntrinsicsLibrary intrinsics) {
    return intrinsics.coreBooleanType;
  }

  Null generateExpressionInstructions(Slot lhsValue, Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    // TODO: StoreEqualityInstruction needs to implement string comparisons
    scope.storeEquality(lhsValue, rhsValue, result, true);
  }
}

class OperatorNumericCmpExpression extends OperatorExpression {
  cc flag() {
    abstract();
  }

  Null generateTypeCheckInstructions(Slot lhsValue, Slot rhsValue, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    if (!lhsValue.staticType.isSubtypeOf(intrinsics.coreIntegerType)) {
      throw(concat('Expected Integer, but found ', lhsValue.staticType.name, ', as left hand operand of ', describeOperator(), ' operator at ', sourceLocation));
    }
    scope.emitTypeCheck(lhsValue, intrinsics.coreIntegerType, intrinsics.operandTypeCheckFailureMessage, concat(lhs), true);
    if (!rhsValue.staticType.isSubtypeOf(intrinsics.coreIntegerType)) {
      throw(concat('Expected Integer, but found ', rhsValue.staticType.name, ', as right hand operand of ', describeOperator(), ' operator at ', sourceLocation));
    }
    scope.emitTypeCheck(rhsValue, intrinsics.coreIntegerType, intrinsics.operandTypeCheckFailureMessage, concat(rhs), true);
  }

  Type returnType(CompiledIntrinsicsLibrary intrinsics) {
    return intrinsics.coreBooleanType;
  }

  Null generateExpressionInstructions(Slot lhsValue, Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    scope.emitInstruction(StoreCmpInstruction(lhsValue, rhsValue, result, flag()));
  }
}

class OperatorLessThanExpression extends OperatorNumericCmpExpression {
  String describeOperator() {
    return '<';
  }

  cc flag() {
    return ccLessThan;
  }
}

class OperatorLessThanOrEqualsExpression extends OperatorNumericCmpExpression {
  String describeOperator() {
    return '<=';
  }

  cc flag() {
    return ccLessThanOrEqual;
  }
}

class OperatorGreaterThanExpression extends OperatorNumericCmpExpression {
  String describeOperator() {
    return '>';
  }

  cc flag() {
    return ccGreaterThan;
  }
}

class OperatorGreaterThanOrEqualsExpression extends OperatorNumericCmpExpression {
  String describeOperator() {
    return '>=';
  }

  cc flag() {
    return ccGreaterThanOrEqual;
  }
}

class OperatorLogicalAndExpression extends OperatorExpression {
  String describeOperator() {
    return '&&';
  }

  Null generateTypeCheckInstructions(Slot lhsValue, Slot rhsValue, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    if (!lhsValue.staticType.isSubtypeOf(intrinsics.coreBooleanType)) {
      throw(concat('Expected Boolean, but found ', lhsValue.staticType.name, ', as left hand operand of ', describeOperator(), ' operator at ', sourceLocation));
    }
    scope.emitTypeCheck(lhsValue, intrinsics.coreBooleanType, intrinsics.operandTypeCheckFailureMessage, concat(lhs), true);
    if (!rhsValue.staticType.isSubtypeOf(intrinsics.coreBooleanType)) {
      throw(concat('Expected Boolean, but found ', rhsValue.staticType.name, ', as right hand operand of ', describeOperator(), ' operator at ', sourceLocation));
    }
    scope.emitTypeCheck(rhsValue, intrinsics.coreBooleanType, intrinsics.operandTypeCheckFailureMessage, concat(rhs), true);
  }

  Type returnType(CompiledIntrinsicsLibrary intrinsics) {
    return intrinsics.coreBooleanType;
  }

  Null generateExpressionInstructions(Slot lhsValue, Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    // TODO: implement logical and 
    throw('&& not implemented');
  }
}

class OperatorLogicalOrExpression extends OperatorExpression {
  String describeOperator() {
    return '||';
  }

  Null generateTypeCheckInstructions(Slot lhsValue, Slot rhsValue, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    if (!lhsValue.staticType.isSubtypeOf(intrinsics.coreBooleanType)) {
      throw(concat('Expected Boolean, but found ', lhsValue.staticType.name, ', as left hand operand of ', describeOperator(), ' operator at ', sourceLocation));
    }
    scope.emitTypeCheck(lhsValue, intrinsics.coreBooleanType, intrinsics.operandTypeCheckFailureMessage, concat(lhs), true);
    if (!rhsValue.staticType.isSubtypeOf(intrinsics.coreBooleanType)) {
      throw(concat('Expected Boolean, but found ', rhsValue.staticType.name, ', as right hand operand of ', describeOperator(), ' operator at ', sourceLocation));
    }
    scope.emitTypeCheck(rhsValue, intrinsics.coreBooleanType, intrinsics.operandTypeCheckFailureMessage, concat(rhs), true);
  }

  Type returnType(CompiledIntrinsicsLibrary intrinsics) {
    return intrinsics.coreBooleanType;
  }

  Null generateExpressionInstructions(Slot lhsValue, Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    // TODO: implement logical or
    throw('|| not implemented');
  }
}


class DeclarationStatement extends Statement {
  String identifier;

  Null constructor(String identifierArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    identifier = identifierArg;
  }
}

class VariableDeclarationStatement extends DeclarationStatement {
  TypeIdentifier type;
  ExpressionNullable rValue;
  
  String toStringIndent(Integer indent) {
    if (rValue == null) {
      return concat(type.toStringIndent(indent), ' ', identifier, ';\n');
    }
    return concat(type.toStringIndent(indent), ' ', identifier, ' = ', rValue!.toStringIndent(indent), ';\n');
  }
  
  Null generateInstructions(CompiledScope scope) {
    Type typeValue = type.generateInstructions(scope);
    DynamicSlot lSlot = scope.registerVariable(identifier, typeValue);
    if (rValue != null) {
      Slot rSlot = rValue!.generateInstructions(scope);
      if (!rSlot.staticType.isSubtypeOf(lSlot.staticType)) {
        throw(concat('Cannot assign ', rSlot.staticType.name, ' to variable of type ', lSlot.staticType.name, ' at ', sourceLocation));
      }
      scope.emitTypeCheck(rSlot, typeValue, scope.environment().intrinsicsLibrary.assignmentTypeCheckFailureMessage as Slot, rSlot.debugName, true);
      scope.emitInstruction(MoveInstruction(lSlot, rSlot, concat('value initialization of variable declaration for ', lSlot.debugName, ' (', rSlot.debugName, ')')));
      scope.emitInstruction(MoveTypeToTypeInstruction(lSlot, rSlot, scope.environment(), concat('type initialization of variable declaration for ', lSlot.debugName)));
      scope.emitIncref(lSlot, true);
    }
  }

  Null constructor(TypeIdentifier typeArg, String identifierArg, ExpressionNullable rValueArg, SourceLocation sourceLocationArg) {
    super.constructor(identifierArg, sourceLocationArg);
    type = typeArg;
    rValue = rValueArg;
  }
}

class SubroutineDeclarationStatement extends DeclarationStatement {
  TypeIdentifier returnType;
  String identifier;
  AnythingListList parameters; // pairs of type (TypeIdentifier) and identifier (String)
  Boolean isIntrinsic;
  Boolean isVarArgs;
  StatementBlock body;

  Null walk(NullFunction callback, Anything context) {
    callback(body, context);
  }

  Null generateInstructions(CompiledScope scope) {
    Type compiledReturnType = returnType.generateInstructions(scope);
    TypeList compiledParameterTypes = []:Type;
    for (entry in parameters) {
      append(compiledParameterTypes, (entry[0] as TypeIdentifier).generateInstructions(scope));
    }
    CompiledSubroutine subroutine;
    if (isVarArgs) {
      SubroutineTypeWithVarArgs subroutineType = createOrFindSubroutineTypeWithVarArgs(
        scope.environment(),
        compiledReturnType,
        compiledParameterTypes,
      );
      subroutine = CompiledVarArgsSubroutine(scope, subroutineType, identifier);
      assert(len(compiledParameterTypes) == 1, 'unexpected number of parameters to varargs function');
      String name = parameters[0][1] as String;
      Type type = compiledParameterTypes[0];
      (subroutine as CompiledVarArgsSubroutine).emitVarArgsParameterChecks(type, (subroutine as CompiledVarArgsSubroutine).registerVarArgsParameter(name, type) as VarArgsParameterSlot);
    } else {
      SubroutineTypeWithSpecificParameters subroutineType = createOrFindSubroutineTypeWithSpecificParameters(
        scope.environment(),
        compiledReturnType,
        compiledParameterTypes,
      );
      subroutine = CompiledSubroutineWithSpecificParameters(scope, subroutineType, identifier);
      SlotList parameterSlots = []:Slot;
      Integer index = 0;
      for (parameter in parameters) {
        String name = parameter[1] as String;
        Type type = compiledParameterTypes[index];
        append(parameterSlots, (subroutine as CompiledSubroutineWithSpecificParameters).registerParameter(name, type, index));
        index += 1;
      }
      (subroutine as CompiledSubroutineWithSpecificParameters).emitParameterChecks(parameterSlots);
    }
    SubroutineSlot slot = scope.registerSubroutine(subroutine);
    if (isIntrinsic) {
      scope.environment().registerIntrinsic(slot);
    }
    // TODO: declare slot for "this" and "closure"
    body.generateInstructions(subroutine);
  }

  String toStringIndent(Integer indent) {
    StringList parametersList = []:String;
    for (parameter in parameters) {
      if (len(parametersList) > 0) {
        append(parametersList, ', ');
      }
      append(parametersList, (parameter[0] as TypeIdentifier).toStringIndent(indent));
      append(parametersList, ' ');
      append(parametersList, parameter[1]);
    }
    String bodyString = body.toStringIndent(indent + 2);
    return concat(returnType.toStringIndent(indent), ' ', identifier, '(', joinList(parametersList), ') {\n', bodyString, '}\n');
  }

  Null constructor(TypeIdentifier returnTypeArg, String identifierArg, AnythingListList parametersArg, Boolean isVarArgsArg, StatementBlock bodyArg, SourceLocation sourceLocationArg, Boolean isIntrinsicArg) {
    assert(!isVarArgsArg || (len(parametersArg) == 1), 'varargs is only valid with a single parameter');
    super.constructor(identifierArg, sourceLocationArg);
    returnType = returnTypeArg;
    parameters = parametersArg;
    isVarArgs = isVarArgsArg;
    body = bodyArg;
    isIntrinsic = isIntrinsicArg;
  }
}  

class GenericSystemSubroutineDeclarationStatement extends DeclarationStatement {
  TypeIdentifier returnType;
  String identifier;
  AnythingListList parameters; // pairs of type (TypeIdentifier) and identifier (String)
  String library;
  String externalName;

  Null generateInstructions(CompiledScope scope) {
    Type compiledReturnType = returnType.generateInstructions(scope);
    TypeList compiledParameterTypes = []:Type;
    StringList compiledParameterNames = []:String;
    for (entry in parameters) {
      append(compiledParameterTypes, (entry[0] as TypeIdentifier).generateInstructions(scope));
      append(compiledParameterNames, entry[1] as String);
    }
    scope.registerSubroutine(GenericSystemCallSubroutine(
      scope,
      compiledReturnType,
      compiledParameterTypes,
      compiledParameterNames,
      library,
      externalName,
      identifier,
    ));
  }

  String toStringIndent(Integer indent) {
    StringList parametersList = []:String;
    for (parameter in parameters) {
      if (len(parametersList) > 0) {
        append(parametersList, ', ');
      }
      append(parametersList, (parameter[0] as TypeIdentifier).toStringIndent(indent));
      append(parametersList, ' ');
      append(parametersList, parameter[1]);
    }
    return concat(returnType.toStringIndent(indent), ' ', identifier, '(', joinList(parametersList), ') __extern \'', escapeString(library), '\' \'', escapeString(externalName), '\'\n');
  }

  Null constructor(TypeIdentifier returnTypeArg, String identifierArg, AnythingListList parametersArg, String libraryArg, String externalNameArg, SourceLocation sourceLocationArg) {
    super.constructor(identifierArg, sourceLocationArg);
    returnType = returnTypeArg;
    parameters = parametersArg;
    library = libraryArg;
    externalName = externalNameArg;
  }
}  

class EnumDeclaration extends DeclarationStatement {
  String identifier;
  StringList values;
  
  String toStringIndent(Integer indent) {
    StringList buffer = ['enum ', identifier, ' { '];
    Integer index = 0;
    while (index < len(values)) {
      if (index > 0) {
        append(buffer, ' ');
      }
      append(buffer, values[index]);
      index += 1;
    }
    append(buffer, ' }\n');
    return joinList(buffer);
  }

  Null generateInstructions(CompiledScope scope) {
    assert(scope is CompiledLibrary, 'found enum in non-global scope');
    CompiledLibrary globalScope = scope as CompiledLibrary;
    if (scope.environment().isCompoundType(identifier)) {
      throw(concat('"', identifier, '" is not a valid enum type name at ', sourceLocation));
    }
    EnumType type = EnumType(scope.environment(), identifier, values);
    globalScope.declareType(type);
    Integer index = 0;
    for (value in values) {
      scope.registerNumericConstant(concat(identifier, value), index, type);
      index += 1;
    }
  }

  Null constructor(String identifierArg, StringList valuesArg, SourceLocation sourceLocationArg) {
    super.constructor(identifierArg, sourceLocationArg);
    values = valuesArg;
  }
}

class AbstractClassDeclaration extends DeclarationStatement {
  TypeIdentifierNullable superclassName;
  
  ClassType declareType(CompiledScope scope) {
    Type superclass;
    if (superclassName == null) {
      superclass = scope.environment().intrinsicsLibrary.coreClassType;
      if (!(superclass is ClassType)) {
        throw(concat('Specified type is not a class at ', superclassName!.sourceLocation));
      }
    } else {
      superclass = superclassName!.generateInstructions(scope);
    }
    ClassType type = ClassType(scope.environment(), identifier, superclass as ClassType);
    scope.globalScope().declareType(type);
    return type;
  }

  Slot declareConstructor(CompiledScope scope, ClassType type, TypeList parameters) {
    SubroutineTypeWithSpecificParameters subroutineType = createOrFindSubroutineTypeWithSpecificParameters(
      scope.environment(),
      type,
      parameters,
    );
    CompiledSubroutineWithSpecificParameters constructor = CompiledSubroutineWithSpecificParameters(scope, subroutineType, identifier);
    // TODO: type-check parameters
    return scope.registerSubroutine(constructor);
  }

  Null constructor(String identifierArg, TypeIdentifierNullable superclassNameArg, SourceLocation sourceLocationArg) {
    super.constructor(identifierArg, sourceLocationArg);
    superclassName = superclassNameArg;
  }
}

class ClassDeclaration extends AbstractClassDeclaration {
  DeclarationStatementList members;
  
  String toStringIndent(Integer indent) {
    StringList buffer = ['class ', identifier, ' '];
    if (superclassName != null) {
      append(buffer, 'extends ');
      append(buffer, superclassName!.toStringIndent(indent));
    }
    append(buffer, '{\n');
    for (member in members) {
      append(buffer, stringTimes(' ', indent + 2));
      append(buffer, member.toStringIndent(indent + 2));
    }
    append(buffer, stringTimes(' ', indent));
    append(buffer, '}\n');
    return joinList(buffer);
  }

  Null generateInstructions(CompiledScope scope) {
    TypeNullable type = scope.globalScope().lookupType(identifier);
    if (type == null) {
      type = declareType(scope);
      declareConstructor(scope, type! as ClassType, []:Type /* TODO: constructor parameters */);
    } else {
      // TODO: verify that |type| is a matching forward class declaration
      // TODO: add our constructor if necessary
    }
    // TODO: declare class members
    // TODO: compile scope of constructor
    throw('classes not implemented');
  }

  Null constructor(String classNameArg, TypeIdentifierNullable superclassNameArg, DeclarationStatementList membersArg, SourceLocation sourceLocationArg) {
    super.constructor(classNameArg, superclassNameArg, sourceLocationArg);
    members = membersArg;
  }
}

class ForwardClassDeclaration extends AbstractClassDeclaration {
  TypeIdentifierListNullable constructorParameterTypes;
  DeclarationStatementList members;
  
  String toStringIndent(Integer indent) {
    StringList buffer = ['fwdclass ', identifier, ' '];
    if (superclassName != null) {
      append(buffer, 'extends ');
      append(buffer, superclassName!.toStringIndent(indent));
    }
    append(buffer, ';\n');
    return joinList(buffer);
  }

  Null generateInstructions(CompiledScope scope) {
    ClassType type = declareType(scope);
    if (constructorParameterTypes != null) {
      TypeList parameterTypes = []:Type;
      for (identifier in constructorParameterTypes!) {
        append(parameterTypes, identifier.generateInstructions(scope));
      }
      Slot constructor = declareConstructor(scope, type, parameterTypes);
      // TODO: register the constructor with the class type somehow
    }
  }

  Null constructor(String classNameArg, TypeIdentifierListNullable constructorParameterTypesArg, TypeIdentifierNullable superclassNameArg, SourceLocation sourceLocationArg) {
    super.constructor(classNameArg, superclassNameArg, sourceLocationArg);
    constructorParameterTypes = constructorParameterTypesArg;
  }
}

class ForwardClassPropertyDeclaration extends DeclarationStatement {
  TypeIdentifier propertyType;
  TypeIdentifier hostClass;
  
  String toStringIndent(Integer indent) {
    return concat('fwdclassprop ', propertyType.toStringIndent(indent), ' ', hostClass.toStringIndent(indent), '.', identifier, ';\n');
  }

  Null generateInstructions(CompiledScope scope) {
    // TODO: declare the property on the class
  }

  Null constructor(TypeIdentifier hostClassArg, TypeIdentifier propertyTypeArg, String identifierArg, SourceLocation sourceLocationArg) {
    super.constructor(identifierArg, sourceLocationArg);
    hostClass = hostClassArg;
    propertyType = propertyTypeArg;
  }
}

class ExpressionStatement extends Statement {
  Expression expression;
  
  String toStringIndent(Integer indent) {
    return concat(expression.toStringIndent(indent), ';\n');
  }

  Null walk(NullFunction callback, Anything context) {
    callback(expression, context);
  }

  Null generateInstructions(CompiledScope scope) {
    expression.generateInstructions(scope); // return value is discarded
  }

  Null constructor(Expression expressionArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    expression = expressionArg;
  }
}

class ReturnStatement extends Statement {
  ExpressionNullable expression;

  String toStringIndent(Integer indent) {
    if (expression == null) {
      return 'return;';
    }
    return concat('return ', expression!.toStringIndent(indent), ';\n');
  }

  Null walk(NullFunction callback, Anything context) {
    callback(expression, context);
  }

  Null generateInstructions(CompiledScope scope) {
    if (!(scope.stackFrame() is CompiledSubroutine)) {
      throw(concat('Invalid return; not in a function at ', sourceLocation));
    }
    CompiledSubroutine subroutine = scope.stackFrame() as CompiledSubroutine;
    if (expression != null) {
      subroutine.emitReturnFrom(scope, expression!.generateInstructions(scope));
    } else {
      subroutine.emitReturnFrom(scope, scope.environment().intrinsicsLibrary.coreNull);
    }
  }

  Null constructor(ExpressionNullable expressionArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    expression = expressionArg;
  }
}

class BreakStatement extends Statement {
  String toStringIndent(Integer indent) {
    return concat(stringTimes(' ', indent), 'break;\n');
  }

  Null generateInstructions(CompiledScope scope) {
    CompiledScopeNullable loopScope = scope;
    while (loopScope != null && !(loopScope is CompiledLoopScope)) {
      loopScope = loopScope!.parent;
    }
    if (loopScope == null) {
      throw(concat('Invalid break; not in a loop at ', this));
    }
    (loopScope as CompiledLoopScope).emitBreakInstructionFrom(scope);
  }
}

class ContinueStatement extends Statement {
  String toStringIndent(Integer indent) {
    return concat(stringTimes(' ', indent), 'continue;\n');
  }

  Null generateInstructions(CompiledScope scope) {
    CompiledScopeNullable loopScope = scope;
    while (loopScope != null && !(loopScope is CompiledLoopScope)) {
      loopScope = loopScope!.parent;
    }
    if (loopScope == null) {
      throw(concat('Invalid continue; not in a loop at ', this));
    }
    (loopScope as CompiledLoopScope).emitContinueInstructionFrom(scope);
  }
}

class ImportStatement extends Statement {
  String path;
  
  String toStringIndent(Integer indent) {
    return concat('import "', path, '";\n');
  }

  Null generateInstructions(CompiledScope scope) {
    assert(scope.environment().getLibraryState(path) == lsDefined, concat('tried to import library "', path, '" before it was compiled'));
    assert(scope is CompiledLibrary, 'found import outside global scope');
    (scope as CompiledLibrary).importLibrary(scope.environment().getLibrary(path) as CompiledLibrary);
  }

  Null constructor(String pathArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    path = pathArg;
  }
}

class StraightAssignmentStatement extends Statement {
  LValueExpression lValue;
  Expression rValue;

  String toStringIndent(Integer indent) {
    return concat(
      lValue.toStringIndent(indent),
      ' = ',
      rValue.toStringIndent(indent),
      ';\n',
    );
  }

  Null generateInstructions(CompiledScope scope) {
    Slot rSlot = rValue.generateInstructions(scope);
    lValue.generateLValue(scope).assign(scope, rSlot, sourceLocation);
  }

  Null walk(NullFunction callback, Anything context) {
    callback(lValue, context);
    callback(rValue, context);
  }

  Null constructor(LValueExpression lValueArg, Expression rValueArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    lValue = lValueArg;
    rValue = rValueArg;
  }
}

class AssignmentStatement extends Statement {
  LValueExpression lValue;
  Expression rValue;

  String describeOperator() { abstract(); }
  Slot computeResult(CompiledScope scope, Slot lSlot, Slot rSlot) { abstract(); }

  String toStringIndent(Integer indent) {
    return concat(
      lValue.toStringIndent(indent),
      ' ',
      describeOperator(),
      ' ',
      rValue.toStringIndent(indent),
      ';\n',
    );
  }

  Null generateInstructions(CompiledScope scope) {
    Slot lSlot = lValue.generateInstructions(scope);
    // TODO: verify that lSlot is assignable
    // In particular, parameters (including dereferenced varargs) and constants are not assignable.
    Slot rSlot = rValue.generateInstructions(scope);
    Slot result = computeResult(scope, lSlot, rSlot);
    lValue.generateLValue(scope).assign(scope, result, sourceLocation);
  }

  Null walk(NullFunction callback, Anything context) {
    callback(lValue, context);
    callback(rValue, context);
  }

  Null constructor(LValueExpression lValueArg, Expression rValueArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    lValue = lValueArg;
    rValue = rValueArg;
  }
}

class OperatorAssignmentStatement extends AssignmentStatement {
  Null generateTypeCheckInstructions(Slot lhsValue, Slot rhsValue, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    abstract();
    // e.g.:
    // scope.emitTypeCheck(lhsValue, intrinsics.coreIntegerType, intrinsics.operandTypeCheckFailureMessage, concat(lhsValue.source), true);
    // scope.emitTypeCheck(rhsValue, intrinsics.coreIntegerType, intrinsics.operandTypeCheckFailureMessage, concat(rhsValue.source), true);
  }

  Null generateExpressionInstructions(Slot lhsValue, Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    abstract();
    // e.g.:
    // scope.emitInstruction(AdditionInstruction(scope, lhsValue, rhsValue, result, concat(describeOperator(), ' operator')));
  }

  Slot computeResult(CompiledScope scope, Slot lSlot, Slot rSlot) {
    CompiledIntrinsicsLibrary intrinsics = scope.environment().intrinsicsLibrary as CompiledIntrinsicsLibrary;
    Slot lhsValue = lSlot;
    Slot rhsValue = rSlot;
    rc referenceCountStyle;
    if (lSlot.staticType.neverReferenceCounted()) {
      referenceCountStyle = rcNever;
    } else {
      referenceCountStyle = rcOnStack;
    }
    Slot result = scope.registerDynamicValue(lSlot.staticType, referenceCountStyle, concat(describeOperator(), ' operator result'));
    generateTypeCheckInstructions(lhsValue, rhsValue, scope, intrinsics);
    generateExpressionInstructions(lhsValue, rhsValue, result, scope, intrinsics);
    if (!lSlot.staticType.neverReferenceCounted()) {
      scope.emitIncref(result, true /* isGCRoot */); // should never actually do anything but since we can't prove it...
    }
    return result;
  }
}

class NumericOperatorAssignmentStatement extends OperatorAssignmentStatement {
  Null generateTypeCheckInstructions(Slot lhsValue, Slot rhsValue, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    scope.emitTypeCheck(lhsValue, intrinsics.coreIntegerType, intrinsics.operandTypeCheckFailureMessage, lhsValue.debugName, true);
    scope.emitTypeCheck(rhsValue, intrinsics.coreIntegerType, intrinsics.operandTypeCheckFailureMessage, rhsValue.debugName, true);
  }
}

class PlusAssignmentStatement extends NumericOperatorAssignmentStatement {
  String describeOperator() {
    return '+=';
  }

  Null generateExpressionInstructions(Slot lhsValue, Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    scope.emitInstruction(BiOperandInstruction('add', lhsValue, rhsValue, result, concat(describeOperator(), ' operator')));
    scope.emitInstruction(SetTypeInstruction(result, intrinsics.coreIntegerType));
  }
}

class MinusAssignmentStatement extends NumericOperatorAssignmentStatement {
  String describeOperator() {
    return '-=';
  }

  Null generateExpressionInstructions(Slot lhsValue, Slot rhsValue, Slot result, CompiledScope scope, CompiledIntrinsicsLibrary intrinsics) {
    scope.emitInstruction(BiOperandInstruction('sub', lhsValue, rhsValue, result, concat(describeOperator(), ' operator')));
    scope.emitInstruction(SetTypeInstruction(result, intrinsics.coreIntegerType));
  }
}

class AsteriskAssignmentStatement extends AssignmentStatement {
  String describeOperator() {
    return '*=';
  }
}

class SlashAssignmentStatement extends AssignmentStatement {
  String describeOperator() {
    return '/=';
  }
}

class ModulusAssignmentStatement extends AssignmentStatement {
  String describeOperator() {
    return '%=';
  }
}

class BitwiseAndAssignmentStatement extends AssignmentStatement {
  String describeOperator() {
    return '&=';
  }
}

class BitwiseXorAssignmentStatement extends AssignmentStatement {
  String describeOperator() {
    return '^=';
  }
}

class BitwiseOrAssignmentStatement extends AssignmentStatement {
  String describeOperator() {
    return '|=';
  }
}

class ElseClause extends AstNode {
  Null generateInstructions(CompiledScope scope) {
    abstract();
  }
}

class IfStatement extends Statement {
  Expression expression;
  StatementBlock block;
  ElseClauseNullable elseClause;
  
  String toStringIndent(Integer indent) {
    String elseString;
    if (elseClause != null) {
      elseString = elseClause!.toStringIndent(indent);
    } else {
      elseString = '\n';
    }
    return concat(
      'if (', expression.toStringIndent(indent), ') {\n',
      block.toStringIndent(indent + 2),
      stringTimes(' ', indent), '}', elseString,
    );
  }

  Null generateInstructions(CompiledScope scope) {
    Slot expressionHandle = expression.generateInstructions(scope);
    CompiledNestedScope blockScope = CompiledNestedScope(scope, scope.environment().generateLabel(concat(camelCase(scope.name), '$if')));
    block.generateInstructions(blockScope);
    CompiledNestedScopeNullable elseBlockScope = null;
    if (elseClause != null) {
      elseBlockScope = CompiledNestedScope(scope, scope.environment().generateLabel(concat(camelCase(scope.name), '$else')));
      elseClause!.generateInstructions(elseBlockScope!);
    }
    scope.emitConditionalBlock(blockScope, elseBlockScope, expressionHandle, (scope.environment().intrinsicsLibrary.coreFalse as Slot), 'if', concat(expression));
  }

  Null walk(NullFunction callback, Anything context) {
    callback(expression, context);
    callback(block, context);
    if (elseClause != null) {
      callback(elseClause, context);
    }
  }

  Null constructor(Expression expressionArg, StatementBlock blockArg, ElseClauseNullable elseClauseArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    expression = expressionArg;
    block = blockArg;
    elseClause = elseClauseArg;
  }
}

class DefaultElseClause extends ElseClause {
  StatementBlock block;
  
  String toStringIndent(Integer indent) {
    return concat(
      ' else {\n',
      block.toStringIndent(indent + 2),
      stringTimes(' ', indent), '}\n',
    );
  }

  Null walk(NullFunction callback, Anything context) {
    callback(block, context);
  }

  Null generateInstructions(CompiledScope scope) {
    block.generateInstructions(scope);
  }

  Null constructor(StatementBlock blockArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    block = blockArg;
  }
}

class ElseIfClause extends ElseClause {
  IfStatement ifClause;
  
  String toStringIndent(Integer indent) {
    return concat(' else ', ifClause.toStringIndent(indent));
  }

  Null walk(NullFunction callback, Anything context) {
    callback(ifClause, context);
  }

  Null generateInstructions(CompiledScope scope) {
    ifClause.generateInstructions(scope);
  }

  Null constructor(IfStatement clauseArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    ifClause = clauseArg;
  }
}

class WhileStatement extends Statement {
  Expression expression;
  StatementBlock block;
  
  String toStringIndent(Integer indent) {
    return concat(
      'while (', expression.toStringIndent(indent), ') {\n',
      block.toStringIndent(indent + 2),
      stringTimes(' ', indent), '}\n',
    );
  }

  Null walk(NullFunction callback, Anything context) {
    callback(expression, context);
    callback(block, context);
  }

  Null generateInstructions(CompiledScope scope) {
    CompiledLoopScope loopScope = CompiledLoopScope(scope, 'while');
    String loopBodyLabel = loopScope.environment().generateLabel(concat(scope.labelPrefix(), '$', loopScope.name, '$body'));
    loopScope.emitInstruction(JumpIfNotEqualInstruction(
      expression.generateInstructions(loopScope),
      scope.environment().intrinsicsLibrary.coreFalse,
      loopBodyLabel,
      'while condition',
    ));
    loopScope.emitBreakInstructionFrom(loopScope);
    loopScope.emitInstruction(LabelInstruction(loopBodyLabel, concat('start of ', loopScope.name)));
    block.generateInstructions(loopScope);
    scope.emitBlock(loopScope);
  }

  Null constructor(Expression expressionArg, StatementBlock blockArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    expression = expressionArg;
    block = blockArg;
  }
}

class ForStatement extends Statement {
  String variable;
  Expression iterable;
  StatementBlock block;
  
  String toStringIndent(Integer indent) {
    return concat(
      'for (',
      variable,
      ' in ',
      iterable.toStringIndent(indent),
      ') {\n',
      block.toStringIndent(indent + 2),
      stringTimes(' ', indent), '}\n',
    );
  }

  Null walk(NullFunction callback, Anything context) {
    callback(iterable, context);
    callback(block, context);
  }

  Null generateInstructions(CompiledScope scope) {
    // TODO: implement for loop
    throw('for not implemented');
  }

/*
  Null generateInstructions(CompiledScope scope) {
    CompiledLoopScope loopScope = CompiledLoopScope(scope, 'for');
    Slot expressionHandle = expression.generateInstructions(loopScope).read(loopScope);
    // verify that expressionHandle is an *Iterable
    // if it is statically a *ReadOnlyList
    
    loopScope.emitConditionalJump(loopScope.loopBottomLabel, expressionHandle, (scope.environment().intrinsicsLibrary.coreFalse as Slot), 'while condition');
    block.generateInstructions(loopScope);
    scope.emitBlock(loopScope);
  }
*/

  Null constructor(String variableArg, Expression iterableArg, StatementBlock blockArg, SourceLocation sourceLocationArg) {
    super.constructor(sourceLocationArg);
    variable = variableArg;
    iterable = iterableArg;
    block = blockArg;
  }
}

class Library extends StatementBlock {
  String name;

  Null constructor(StatementList childrenArg, String nameArg, SourceLocation sourceLocationArg) {
    super.constructor(childrenArg, sourceLocationArg);
    name = nameArg;
  }

  CompiledLibrary generateScopes(CompilationEnvironment compilationEnvironmentArg) { 
    CompiledLibrary result = CompiledLibrary(compilationEnvironmentArg, name);
    generateInstructions(result);
    return result;
  }
}

class Program extends Library {
  Null generateInstructions(CompiledScope scope) {
    super.generateInstructions(scope);
    scope.emitInstruction(CommentInstruction('Terminate application - call exit(0)'));
    Slot exitCode = scope.environment().integer(0);
    Slot exit = scope.environment().intrinsicsLibrary.coreExit;
    scope.references.add(exit);
    scope.emitSubroutineCall(exit, [exitCode]);
  }
}