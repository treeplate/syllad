import 'syd-tokenizer.syd';
import 'syd-assembler.syd';
import 'syd-x64-instructions.syd';
import 'syd-llvm.syd';
import 'syd-parser.syd';
import 'syd-ast.syd';
import 'syd-compiler.syd';

stderr('syllad self-hosting compiler');

// TODO
//  - performance of compiler and compilee
//  - productionize self-hosting
//  - language features:
//     - statics
//     - unary ++ and --
//     - string encodings
//     - override pragma
//     - unused variable detection, ignore unused pragma
//  - pdb support at syd level rather than .ll / .asm level

Library processFile(String filename, MapNullable librariesArg, Boolean isProgram, Boolean isInternal) {
  Map libraries;
  if (librariesArg == null) {
    libraries = Map(); // path -> null, true, or Library
  } else {
    libraries = librariesArg!;
  }
  assert(libraries.get(filename) == null, concat('tried to process ', filename, ' twice'));
  stderr(concat('  ', filename));
  if (!fileExists(filename)) {
    stderr(concat('File "', filename, '" not found.'));
    exit(1);
  }
  Library ast = parseTokens(tokenize(scalarValues(readFile(openFile(filename, fileModeRead))), filename, isInternal), filename, isProgram);
  libraries.set(filename, true);
  for (child in ast.children) {
    if (child is ImportStatement) {
      ImportStatement node = child as ImportStatement;
      node.setResolvedPath(pathResolve(filename, node.path));
      Anything sublibrary = libraries.get(node.resolvedPath);
      if (sublibrary == true) {
        compileeSourceError(concat('Import loop at ', child.sourceLocation));
      } else if (sublibrary == null) {
        if (!fileExists(node.resolvedPath)) {
          compileeSourceError(concat('Import specifies a non-existent file "', node.resolvedPath, '" at ', node.sourceLocation));
        }
        node.setResolvedLibrary(processFile(node.resolvedPath, libraries, false, isInternal));
      } else {
        node.setResolvedLibrary(sublibrary as Library);
      }
    } else {
      break;
    }
  }
  libraries.set(filename, ast);
  return ast;
}

if (len(args) != 3) {
  println('Invalid number of arguments, syd must be run as follows:');
  println('  syd --mode=MASM program.syd');
  println('  syd --mode=FASM program.syd');
  println('  syd --mode=LLVM program.syd');
  exit(1);
}

String compilerPath = args[0];
String mode = args[1];
String mainProgramFileName = args[2];

// parse everything
stderr('parsing...');
Library rtl = processFile(pathResolve(compilerPath, 'syd-rtl.syd'), null, false, true);
Library stdlib = processFile(pathResolve(compilerPath, 'syd-stdlib.syd'), null, false, false);
Library program = processFile(mainProgramFileName, null, true, false);

stderr('generateLibraryScope...');
LibraryList libraries = []:Library;
CompilationEnvironment compilationEnvironment = CompilationEnvironment();
appendAll(libraries, rtl.generateLibraryScope(compilationEnvironment));
compilationEnvironment.setRuntimeLibrary(rtl.library!);
appendAll(libraries, stdlib.generateLibraryScope(compilationEnvironment));
compilationEnvironment.setStandardLibrary(stdlib.library!);
appendAll(libraries, program.generateLibraryScope(compilationEnvironment));

stderr('declareTypes...');
for (library in libraries) {
  stderr(concat('  ', library.name));
  library.declareTypes(library.library!);
}

stderr('prepareIdentifiers...');
for (library in libraries) {
  stderr(concat('  ', library.name));
  library.prepareIdentifiers(library.library!);
}

stderr('generateInstructions...');
for (library in libraries) {
  stderr(concat('  ', library.name));
  library.generateInstructions(library.library!);
}

Assembler assembler;
if (mode == '--mode=MASM') {
  assembler = X64Assembler(compilationEnvironment.rootLabel, AssemblerFormat.masm);
} else if (mode == '--mode=FASM') {
  assembler = X64Assembler(compilationEnvironment.rootLabel, AssemblerFormat.fasm);
} else if (mode == '--mode=LLVM') {
  assembler = LLVMAssembler(compilationEnvironment.rootLabel);
} else {
  compileeSourceError(concat('Invalid compilation mode "', mode, '".'));
}

compilationEnvironment.compile(assembler);
String output = assembler.serialize(mainProgramFileName);
stderr('Compilation finished!');
println(output);
