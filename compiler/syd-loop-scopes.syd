import 'syd-compiler.syd';

// TODO: need to figure out how to handle nested scopes in the slot manager here

class CompiledLoopScope extends CompiledNestedScope {
  String loopTopLabel;
  String loopBottomLabel;

  Null emitBreakInstructionFrom(CompiledScope scope) {
    scope.emitInstruction(SyntheticNestedScopeExitInstruction(this));
    scope.emitInstruction(JumpInstruction(loopBottomLabel, concat('break out of ', name)));
  }

  Null emitContinueInstructionFrom(CompiledScope scope) {
    scope.emitInstruction(SyntheticNestedScopeExitInstruction(this));
    scope.emitInstruction(JumpInstruction(loopTopLabel, concat('return to top of ', name)));
  }

  Null prepareInstructions() {
    super.prepareInstructions();
    emitContinueInstructionFrom(this);
  }

  Null generateAssemblerBlock(AssemblerBlock block) {
    block.addLabel(loopTopLabel, concat('top of ', name));
    super.generateAssemblerBlock(block);
    block.addLabel(loopBottomLabel, concat('bottom of ', name));
  }

  Null constructor(CompiledScope parentArg, String nameArg) {
    super.constructor(parentArg, nameArg);
    loopTopLabel = environment().generateLabel(concat(parentArg.labelPrefix(), '$', name, '$top'));
    loopBottomLabel = environment().generateLabel(concat(parentArg.labelPrefix(), '$', name, '$bottom'));
  }
}
