import 'core.syd';

// This escapes a string for the purposes of display to the user.
// This function does not preserve all data. Control characters
// and non-ASCII characters are replaced by a dot.
String escapeString(String value) {
  StringList buffer = []:String;
  for (char in scalarValues(value)) {
    if (char == 0x0a) {
      append(buffer, '\\n');
    } else if (char == 0x0d) {
      append(buffer, '\\r');
    } else if (char == 0x27) {
      append(buffer, '\\\'');
    } else if (char < 0x20 || char > 0x7e) {
      append(buffer, '.');
    } else {
      append(buffer, chr(char));
    }
  }
  return joinList(buffer);
}

String truncateString(String value, Integer maxLength) {
  StringList buffer = []:String;
  Boolean terminated = false;
  for (char in scalarValues(value)) {
    if (char == 0x0a || char == 0x0d) {
      terminated = true;
    } else {
      append(buffer, chr(char));
      if (terminated || len(buffer) >= maxLength) {
        append(buffer, '...');
        break;
      }
    }
  }
  return joinList(buffer);
}

String hex8(Integer value) {
  if (value < 0) {
    return concat('-', hex8(-value));
  }
  return concat('0', padLeft(hex(value), 2, '0'), 'h');
}

String hex32(Integer value) {
  if (value < 0) {
    return concat('-', hex32(-value));
  }
  return concat('0', padLeft(hex(value), 8, '0'), 'h');
}

String hex64(Integer value) {
  if (value < 0) {
    return concat('-', hex64(-value));
  }
  return concat('0', padLeft(hex(value), 16, '0'), 'h');
}

String hexH(Integer value) {
  if (value < 0) {
    return concat('-', hexH(-value));
  }
  if (value <= 0xFF) {
    return hex8(value);
  }
  if (value <= 0xFFFFFFFF) {
    return hex32(value);
  }
  return hex64(value);
}

String camelCase(String value) {
  StringList buffer = []:String;
  Boolean needUpper = false;
  for (char in scalarValues(value)) {
    if (char >= 0x41 && char <= 0x5A) { // capital A-Z
      append(buffer, chr(char));
    } else if (char >= 0x61 && char <= 0x7A) { // lowercase a-z
      if (needUpper) {
        append(buffer, chr(char - 0x20));
        needUpper = false;
      } else {
        append(buffer, chr(char));
      }
    } else if (char == 0x24 || char == 0x5f) { // $, _
      append(buffer, chr(char));
      needUpper = false;
    } else {
      if (char >= 0x30 && char <= 0x39) { // 0-9
        append(buffer, chr(char));
      }
      needUpper = true;
    }
  }
  return joinList(buffer);
}

String commentNameForString(String value) {
  StringList buffer = []:String;
  // TODO: this should iterate over the UTF-8 encoded bytes, not the Unicode Scalar Values
  append(buffer, '"');
  for (char in scalarValues(value)) {
    if (len(buffer) > 20) {
      append(buffer, '...');
      break;
    }
    if (char >= 0x20 && char <= 0x7e && char != 0x22) {
      append(buffer, chr(char));
    } else {
      append(buffer, concat('\\x', padLeft(hex(char), 2, '0')));
    }
  }
  append(buffer, '"');
  return join(buffer, '');
}

class SourceLocation extends Object {
  Integer lineNo;
  Integer colNo;
  String filename;

  Null constructor(Integer lineNoArg, Integer colNoArg, String filenameArg) {
    super.constructor();
    lineNo = lineNoArg;
    colNo = colNoArg;
    filename = filenameArg;
  }
  
  //#override
  String toString() {
    return concat('line ', lineNo, ' column ', colNo, ' in file ', filename);
  }
}

class AstNode extends Object {
  SourceLocation sourceLocation;

  String toStringIndent(Integer indent) {
    abstract();
  }

  //#override
  String toString() {
    return toStringIndent(0);
  }

  Null constructor(SourceLocation sourceLocationArg) {
    super.constructor();
    sourceLocation = sourceLocationArg;
  }
}

fwdclass AssemblerLabel(AssemblerLabelNullable, String) extends Object;
class AssemblerLabel extends Object {
  AssemblerLabelNullable parent;
  String name;

  //#override
  String toString() {
    StringList bits = []:String;
    AssemblerLabelNullable current = this;
    while (current != null) {
      append(bits, current!.name);
      current = current!.parent;
    }
    return join(reverse(bits) as StringList, '::');
  }

  AssemblerLabel deriveWith(String next) {
    return AssemblerLabel(this, next);
  }

  Null constructor(AssemblerLabelNullable parentArg, String nameArg) {
    super.constructor();
    parent = parentArg;
    name = nameArg;
  }
}