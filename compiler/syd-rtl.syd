// RUNTIME LIBRARY
// Code in this file defines and uses compiler intrinsics.

// Naming conventions
// foo - publicly accessible Syd API (implemented in the RTL or the compiler)
// foo# - compiler-internal API (implemented in the RTL or the compiler)
// _foo - compiler-specific publicly accessible API (implemented in the RTL)
// __foo - compiler-specific unary operator, keyword, or function (implemented in the compiler)
// __foo__ - compiler-specific binary operator (implemented in the compiler)

// TODO: complain if a function is intrinsic# and we don't know about it

import 'syd-constants.syd';
import 'syd-rtl-memory.syd';
import 'syd-rtl-types.syd';
import 'syd-rtl-strings.syd';
import 'syd-rtl-arguments.syd';
import 'syd-rtl-io.syd';
import 'syd-rtl-system.syd';


// EQUALITY

Boolean _byteCompare(Integer a, Integer b, Integer length) {
  assert(length > 0, '_byteCompare expects positive number of bytes to compare');
  Integer aCursor = a;
  Integer bCursor = b;
  Integer end = a + (length / 8) * 8;
  assert(aCursor != end || length > 0, 'inconsistency');
  assert(aCursor != end || length < 8, 'inconsistency');
  while (aCursor < end) {
    Integer aValue = __readFromAddress(aCursor);
    Integer bValue = __readFromAddress(bCursor);
    if (aValue != bValue) {
      return false;
    }
    aCursor += 8;
    bCursor += 8;
  }
  end = a + length;
  if (aCursor < end) {
    Integer extraBytes = end - aCursor;
    assert(extraBytes > 0, 'internal error: zero extra bytes but aCursor is before end');
    assert(extraBytes < 8, 'internal error: more than 7 extra bytes');
    Integer mask = ~(_allBits << (extraBytes * 8));
    Integer aValue = __readFromAddress(aCursor) & mask;
    Integer bValue = __readFromAddress(bCursor) & mask;
    if (aValue != bValue) {
      return false;
    }
  }
  return true;
}

Boolean equals#(Anything a, Anything b) intrinsic# {
  // This only gets called if the compiler thinks a and b might be both strings or both function pointers.
  // See EqualityInstruction.
  if (a is String && b is String) {
    Integer lengthA = __readFromAddress(a __as__ Integer + _gcBlockHeaderLength);
    Integer lengthB = __readFromAddress(b __as__ Integer + _gcBlockHeaderLength);
    if (lengthA != lengthB) {
      return false;
    }
    return _byteCompare(a __as__ Integer + _gcBlockStringData, b __as__ Integer + _gcBlockStringData, lengthA);
  }
  if (a is WhateverFunction && b is WhateverFunction) {
    return (__readFromAddress(a __as__ Integer + _subroutineReceiverPointer) == __readFromAddress(b __as__ Integer + _subroutineReceiverPointer))
        && (__readFromAddress(a __as__ Integer + _subroutineClosurePointer) == __readFromAddress(b __as__ Integer + _subroutineClosurePointer))
        && (__readFromAddress(a __as__ Integer + _subroutineCodePointer) == __readFromAddress(b __as__ Integer + _subroutineCodePointer));
  }
  return false;
}


// ARITHMETIC

Integer pow#(Integer base, Integer exponent) intrinsic# {
  if (exponent == 0) {
    return 1;
  }
  if (base == 0 || base == 1 || exponent == 1) {
    return base;
  }
  if (exponent < 0) {
    throw('negative exponents not supported');
  }
  Integer index = exponent;
  Integer result = base;
  while (index > 1) {
    result *= base;
    index -= 1;
  }
  return result;
}

Integer abs(Integer number) {
  if (number < 0) {
    return -number;
  }
  return number;
}

Integer mod#(Integer dividend, Integer divisor) intrinsic# {
  // TODO: surely there's a more efficient way of implementing mod
  Integer absoluteDivisor = abs(divisor);
  Integer result = dividend - absoluteDivisor * (dividend / absoluteDivisor);
  if (result < 0) {
    result += absoluteDivisor;
  }
  return result;
}

String stackTrace() {
  // TODO: implement
  return "<stack trace not implemented>";
}