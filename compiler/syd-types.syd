import 'core.syd';
import 'syd-assembler.syd';

// XXX this whole class can be merged with TypeRegistry once we have forward type declarations
class TypeRegistryInterface extends Object {
  // This is used by createOrFindSubroutineType().
  // TODO: right now managing this is O(N), could be made faster
  // e.g. keep the list sorted and binary search, or shard it by
  // number of parameters or return type or whatever...
  ObjectList typesOfSubroutinesWithSpecificParameters = []:Object;

  Null registerType(Object type, Boolean isSubroutineType) {
    abstract();
  }
}

// xxx Type knows how to do things like + - * / % () [] etc

class Type extends Object {
  IntegerNullable code = null;
  String name;

  Boolean isSubtypeOf(Type other) {
    abstract();
  }

  Boolean isSubroutineType() {
    return false;
  }

  // XXX do we need this?
  Boolean literalValueIsAppropriate(Anything value) {
    return false;
  }

  Operand asOperand() {
    assert(code != null, concat('cannot read type operand (', name, ') before codes are assigned'));
    return Operand(hex32(code!), otImm32);
  }

  Boolean hasDynamicType() {
    abstract();
  }

  Boolean isConstructed = false;
  Boolean isUsedInTypeCheck = false;

  Null markConstructed() {
    isConstructed = true;
  }

  Null markUsedInTypeCheck() {
    isUsedInTypeCheck = true;
  }

  Null assignCode(Integer codeArg) {
    code = codeArg;
  }

  Null constructor(TypeRegistryInterface typeRegistryArg, String nameArg) {
    name = nameArg;
    super.constructor();
    typeRegistryArg.registerType(this, isSubroutineType());
  }

  String toString() {
    if (code != null) {
      return concat(name, '\'', code!);
    }
    return name;
  }
}

class NothingTypeXXX extends Type {
  Boolean isSubtypeOf(Type other) {
    return false;
  }

  Boolean literalValueIsAppropriate(Anything value) {
    return value == this;
  }

  Boolean hasDynamicType() {
    return false;
  }

  Null constructor(TypeRegistryInterface typeRegistryArg) {
    super.constructor(typeRegistryArg, '<nothing>');
  }
}

class AnythingType extends Type {
  Boolean isSubtypeOf(Type other) {
    return other is AnythingType;
  }

  Boolean hasDynamicType() {
    return true;
  }

  Null constructor(TypeRegistryInterface typeRegistryArg) {
    super.constructor(typeRegistryArg, 'Anything');
  }
}

class NullableType extends Type {
  Type subtype;

  Boolean isSubtypeOf(Type other) {
    return other is AnythingType || (other is NullableType && subtype.isSubtypeOf(cast(cast(other).subtype)));
  }

  Boolean hasDynamicType() {
    return true;
  }

  Null constructor(TypeRegistryInterface typeRegistryArg, Type subtypeArg) {
    super.constructor(typeRegistryArg, concat(subtypeArg.name, 'Nullable'));
    subtype = subtypeArg;
  }
}

class NumericType extends Type {
  Boolean hasDynamicType() {
    return true;
  }

  Null constructor(TypeRegistryInterface typeRegistryArg, String nameArg) {
    super.constructor(typeRegistryArg, nameArg);
  }
}

class NullType extends NumericType {
  Boolean isSubtypeOf(Type other) {
    return other is AnythingType || other is NullType || other is NullableType;
  }

  Boolean literalValueIsAppropriate(Anything value) {
    return value == null;
  }

  Null constructor(TypeRegistryInterface typeRegistryArg) {
    super.constructor(typeRegistryArg, 'Null');
  }
}

class BooleanType extends NumericType {
  Boolean isSubtypeOf(Type other) {
    return other is AnythingType || other is BooleanType;
  }

  Boolean literalValueIsAppropriate(Anything value) {
    return value == true || value == false;
  }

  Null constructor(TypeRegistryInterface typeRegistryArg) {
    super.constructor(typeRegistryArg, 'Boolean');
  }
}

class IntegerType extends NumericType {
  Boolean isSubtypeOf(Type other) {
    return other is AnythingType || other is IntegerType;
  }

  Boolean literalValueIsAppropriate(Anything value) {
    return value is Integer;
  }

  Null constructor(TypeRegistryInterface typeRegistryArg) {
    super.constructor(typeRegistryArg, 'Integer');
  }
}

class StringType extends Type {
  // pointer to heap-allocated structure (or structure in data segment)

  Boolean isSubtypeOf(Type other) {
    return other is AnythingType || other is StringType;
  }

  Boolean literalValueIsAppropriate(Anything value) {
    return value is String;
  }

  Boolean hasDynamicType() {
    return true;
  }

  Null constructor(TypeRegistryInterface typeRegistryArg) {
    super.constructor(typeRegistryArg, 'String');
  }
}

class EnumValue extends Object {
  Object type; // XXX Object should be EnumType
  String name;
  Integer index;

  Null constructor(Object typeArg, String nameArg, Integer indexArg) {
    super.constructor();
    type = typeArg;
    name = nameArg;
    index = indexArg;
  }
}

class EnumType extends NumericType {
  Map values = Map();

  Boolean isSubtypeOf(Type other) {
    return other is AnythingType || other is StringType;
  }

  Boolean literalValueIsAppropriate(Anything value) {
    return value is EnumValue && cast(value).type == this;
  }

  Null constructor(TypeRegistryInterface typeRegistryArg, String nameArg, StringList valuesArg) {
    super.constructor(typeRegistryArg, nameArg);
    Integer index = 0;
    for (value in valuesArg) {
      values.set(value, EnumValue(this, value, index));
      index += 1;
    }
  }
}

class ClassType extends Type {
  // xxx properties, methods, constructor...

  Boolean hasDynamicType() {
    return true;
  }

  Null constructor(TypeRegistryInterface typeRegistryArg, String nameArg) {
    super.constructor(typeRegistryArg, nameArg);
  }
}

class RootClassType extends Type {
  // pointer to class instance

  Boolean isSubtypeOf(Type other) {
    return other is ClassType || other is RootClassType;
  }

  Boolean hasDynamicType() {
    return true;
  }

  Null constructor(TypeRegistryInterface typeRegistryArg) {
    super.constructor(typeRegistryArg, '<object>');
  }
}

class AbstractSubroutineType extends Type {
  Type returnType;

  String createName() {
    return concat(returnType.name, 'Function');
  }

  Boolean isSubtypeOf(Type other) {
    return other is AnythingType || (other is AbstractSubroutineType && returnType.isSubtypeOf(cast(cast(other).returnType)));
  }

  Boolean isSubroutineType() {
    return true;
  }

  Boolean hasDynamicType() {
    return true;
  }

  Null constructor(TypeRegistryInterface typeRegistryArg, Type returnTypeArg) {
    returnType = returnTypeArg;
    super.constructor(typeRegistryArg, createName());
  }
}

class SubroutineTypeWithAnyArguments extends AbstractSubroutineType {
  Null constructor(TypeRegistryInterface typeRegistryArg, Type returnTypeArg) {
    super.constructor(typeRegistryArg, returnTypeArg);
  }
}

class SubroutineTypeWithVarArgs extends AbstractSubroutineType {
  Type argumentType;

  String createName() {
    return concat(super.createName(), '(', argumentType.name, '...)');
  }

  Null constructor(TypeRegistryInterface typeRegistryArg, Type returnTypeArg, Type argumentTypeArg) {
    argumentType = argumentTypeArg;
    super.constructor(typeRegistryArg, returnTypeArg);
  }
}

class SubroutineTypeWithSpecificParameters extends AbstractSubroutineType {
  TypeList parameterTypes;

  String createName() {
    String stringify(Type type) {
      return type.name;
    }
    return concat(super.createName(), '(', join(map(parameterTypes, stringify) as StringList, ', '), ')');
  }

  Null constructor(TypeRegistryInterface typeRegistryArg, Type returnTypeArg, TypeList parameterTypesArg) {
    parameterTypes = parameterTypesArg;
    super.constructor(typeRegistryArg, returnTypeArg);
  }
}

SubroutineTypeWithSpecificParameters createOrFindSubroutineType(TypeRegistryInterface typeRegistry, Type returnType, TypeList parameterTypes) {
  for (entry in typeRegistry.typesOfSubroutinesWithSpecificParameters) {
    SubroutineTypeWithSpecificParameters type = entry as SubroutineTypeWithSpecificParameters;
    if (type.returnType != returnType) {
      continue;
    }
    if (len(type.parameterTypes) != len(parameterTypes)) {
      continue;
    }
    Integer index = 0;
    Boolean found = true;
    while (index < len(parameterTypes)) {
      if (parameterTypes[index] != type.parameterTypes[index]) {
        found = false;
        break;
      }
      index += 1;
    }
    if (!found) {
      continue;
    }
    return type;
  }
  return SubroutineTypeWithSpecificParameters(typeRegistry, returnType, parameterTypes);
}

// xxx ListLiteral

class ListType extends Type {
  // pointer to heap-allocated structure

  Type elementType;

  Boolean isSubtypeOf(Type other) {
    return other is Anything || (other is ListType && elementType.isSubtypeOf(cast(cast(other).elementType)));
  }

  Boolean hasDynamicType() {
    return true;
  }

  // xxx literals

  Null constructor(TypeRegistryInterface typeRegistryArg, Type elementTypeArg) {
    super.constructor(typeRegistryArg, concat(elementTypeArg.name, 'List'));
    elementType = elementTypeArg;
  }
}

class IterableType extends Type {
  // pointer to heap-allocated structure

  Type elementType;

  Boolean isSubtypeOf(Type other) {
    return other is Anything || (other is IterableType && elementType.isSubtypeOf(cast(cast(other).elementType)));
  }

  Boolean hasDynamicType() {
    return true;
  }

  Null constructor(TypeRegistryInterface typeRegistryArg, Type elementTypeArg) {
    super.constructor(typeRegistryArg, concat(elementTypeArg.name, 'Iterable'));
    elementType = elementTypeArg;
  }
}

class IteratorType extends Type {
  // pointer to heap-allocated structure

  Type elementType;

  Boolean isSubtypeOf(Type other) {
    return other is Anything || (other is IteratorType && elementType.isSubtypeOf(cast(cast(other).elementType)));
  }

  Boolean hasDynamicType() {
    return true; 
  }

  Null constructor(TypeRegistryInterface typeRegistryArg, Type elementTypeArg) {
    super.constructor(typeRegistryArg, concat(elementTypeArg.name, 'Iterator'));
    elementType = elementTypeArg;
  }
}

class ClosureType extends Type {
  Boolean isSubtypeOf(Type other) {
    return other is ClosureType;
  }

  Boolean hasDynamicType() {
    return false;
  }

  Null constructor(TypeRegistryInterface typeRegistryArg) {
    super.constructor(typeRegistryArg, '<closure>');
  }
}

class SystemType extends Type {
  Boolean isSubtypeOf(Type other) {
    return other is SystemType;
  }

  Boolean hasDynamicType() {
    return false;
  }

  Null constructor(TypeRegistryInterface typeRegistryArg) {
    super.constructor(typeRegistryArg, '<system>');
  }
}

class TypeRegistry extends TypeRegistryInterface {
  TypeList types = []:Type;

  Null registerType(Object type, Boolean isSubroutineType) { // XXX Object should be Type
    assert(type is Type, concat('tried to registerType ', type));
    append(types, type);
  }

  TypeList sortedTypes;

  Integer assignTypeCodes() {
    TypeList constructedNotTypeChecked = []:Type;
    TypeList constructedAndTypeChecked = []:Type;
    TypeList typeCheckedNotConstructed = []:Type;
    for (type in types) {
      if (type.isConstructed) {
        if (type.isUsedInTypeCheck) {
          append(constructedAndTypeChecked, type);
        } else {
          append(constructedNotTypeChecked, type);
        }
      } else {
        if (type.isUsedInTypeCheck) {
          append(typeCheckedNotConstructed, type);
        } else {
          // not used
        }
      }
    }
    sortedTypes = addLists(constructedNotTypeChecked, constructedAndTypeChecked, typeCheckedNotConstructed) as TypeList;
    Integer code = 0;
    for (type in sortedTypes) {
      type.assignCode(code);
      code += 1;
    }
    return len(constructedNotTypeChecked);
  }
}
