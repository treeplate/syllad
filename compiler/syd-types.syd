import 'core.syd';
import 'syd-utils.syd';

fwdclass TypeRegistry() extends Object;
fwdclass Type(TypeRegistry, String) extends Object;
fwdclass NullableType(TypeRegistry, Type) extends Type;
fwdclass NumericType(TypeRegistry, String) extends Type;
fwdclass AbstractSubroutineType(TypeRegistry, Type) extends Type;
fwdclass SubroutineTypeWithAnyArguments(TypeRegistry, Type) extends AbstractSubroutineType;
fwdclass AbstractSubroutineTypeWithSpecificParameters(TypeRegistry, Type) extends AbstractSubroutineType;
fwdclass AbstractListType(TypeRegistry, String, Type) extends Type;
fwdclass ArrayType(TypeRegistry, Type) extends AbstractListType;
fwdclass ListType(TypeRegistry, Type) extends AbstractListType;
fwdclass IterableType(TypeRegistry, Type) extends Type;
fwdclass IteratorType(TypeRegistry, Type) extends Type;

fwdclassfield Type NullableType.subtype;
fwdclassfield Type IterableType.elementType;
fwdclassmethod Null TypeRegistry.registerType(Type);
fwdclassmethod TypeNullable TypeRegistry.parseType(String, Boolean, TypeNullableFunction);

fwdclassfield NullableTypeList TypeRegistry.typesOfNullables;
fwdclassfield SubroutineTypeWithAnyArgumentsList TypeRegistry.typesOfSubroutinesWithAnyArguments;
fwdclassfield AbstractSubroutineTypeWithSpecificParametersList TypeRegistry.typesOfSubroutinesWithSpecificParameters;
fwdclassfield ArrayTypeList TypeRegistry.typesOfArrays;
fwdclassfield ListTypeList TypeRegistry.typesOfLists;
fwdclassfield IterableTypeList TypeRegistry.typesOfIterables;
fwdclassfield IteratorTypeList TypeRegistry.typesOfIterators;

/* sealed */ class Type extends Object {
  IntegerNullable code = null;
  String name;

  Boolean neverReferenceCounted() {
    abstract();
  }

  Boolean isSubtypeOf(Type other) {
    abstract();
  }

  // Given type |this| and type |other|, returns whether it is ever possible for a
  // variable with static type |this| to _not_ be of type |other|.
  //
  // In other words, returns false if you know for sure that |this is other|, but some
  // cases where |this is other| return true because you can't trust them, like if |other| is Whatever.
  //
  // Returns false if |this| would definitely fit in a variable of type |other|; returns true
  // if we cannot guarantee it (including in cases where we can guarantee it cannot; use isSubtypeOf
  // to check for that case).
  //
  // For example, a variable of type Whatever can always turn out to dynamically be of a type that is
  // not a subtype of |other|, even though Whatever is always a subtype of |other|.
  //
  // Another tricky case is that a variable of type WhateverList or WhateverFunction can always turn
  // out to dynamically _not_ be a subtype of |other|, even if |other| is a List or Function type
  // respectively.
  //
  // If this returns false, then you know that this.isSubtypeOf(other) is true.
  // If this returns true, you cannot assume the types are not statically known to be disjoint.
  Boolean needRuntimeTypeCheckFor(Type other) {
    return !isSubtypeOf(other);
  }

  Boolean isDeclared = false;
  Boolean isConstructed = false;
  Boolean isUsedInTypeCheck = false;
  Boolean canSetUsageFlags = true;

  Null markDeclared() {
    assert(canSetUsageFlags, 'cannot mark declared type that finalizeUsageFlags has been called on');
    isDeclared = true;
  }

  // Should be called by the code that calls the constructor.
  // Implied by __as__.
  Null markConstructed() {
    assert(canSetUsageFlags, 'cannot mark constructed type that finalizeUsageFlags has been called on');
    isConstructed = true;
  }

  Null markUsedInTypeCheck() {
    assert(canSetUsageFlags, 'cannot mark used in type check type that finalizeUsageFlags has been called on');
    isUsedInTypeCheck = true;
  }

  Null finalizeUsageFlags() {
    canSetUsageFlags = false;
  }

  Null assignCode(Integer codeArg) {
    assert(!canSetUsageFlags, 'call finalizeUsageFlags before assigning code');
    code = codeArg;
  }

  Null constructor(TypeRegistry typeRegistryArg, String nameArg) {
    name = nameArg;
    super.constructor();
    typeRegistryArg.registerType(this);
  }

  //#override
  String toString() {
    if (code != null) {
      return concat(name, '\'', hex(code!));
    }
    return name;
  }

  String debugNotes() {
    return '';
  }
}

class WhateverType extends Type {
  //#override
  Boolean isSubtypeOf(Type other) {
    return true;
  }

  //#override
  Boolean needRuntimeTypeCheckFor(Type other) {
    return true;
  }

  //#override
  Boolean neverReferenceCounted() {
    return false;
  }

  //#override
  Null markConstructed() {
    assert(false, 'Whatever type cannot be constructed.');
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, 'Whatever');
  }
}

class AnythingType extends Type {
  //#override
  Boolean isSubtypeOf(Type other) {
    return other is AnythingType
        || other is WhateverType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  //#override
  Boolean neverReferenceCounted() {
    return false;
  }

  //#override
  Null markConstructed() {
    assert(false, 'Anything type cannot be constructed.');
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, 'Anything');
  }
}

class SentinelType extends Type {
  //#override
  Null markUsedInTypeCheck() {
    assert(false, concat(name, ' type cannot be used in a type check (it cannot be referenced from code at all!).'));
  }

  //#override
  Boolean isSubtypeOf(Type other) {
    return false;
  }

  //#override
  Boolean neverReferenceCounted() {
    return true;
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, '<sentinel type>');
  }
}

class NullableType extends Type {
  Type subtype;

  //#override
  Boolean isSubtypeOf(Type other) {
    return other is AnythingType
        || other is WhateverType
        || (other is NullableType && subtype.isSubtypeOf((other as NullableType).subtype));
  }

  //#override
  Boolean needRuntimeTypeCheckFor(Type other) {
    // in addition to the other cases where we might need a runtime check,
    // we need a runtime check if they're both nullable types and
    // our subtype needs a runtime check for the other's subtype.
    if (other is NullableType) {
      return subtype.needRuntimeTypeCheckFor((other as NullableType).subtype);
    }
    return super.needRuntimeTypeCheckFor(other);
  }

  //#override
  Boolean neverReferenceCounted() {
    return false;
  }

  //#override
  Null markConstructed() {
    assert(false, 'Nullable types cannot be constructed.');
  }

  Null constructor(TypeRegistry typeRegistryArg, Type subtypeArg) {
    assert(!(subtypeArg is NullableType), 'Cannot create nullable nullable type.');
    super.constructor(typeRegistryArg, concat(subtypeArg.name, 'Nullable'));
    subtype = subtypeArg;
  }
}

NullableType createOrFindNullableType(TypeRegistry typeRegistry, Type subtype) {
  for (entry in typeRegistry.typesOfNullables) {
    if (entry.subtype == subtype) {
      return entry;
    }
  }
  NullableType result = NullableType(typeRegistry, subtype);
  append(typeRegistry.typesOfNullables, result);
  return result;
}

class NumericType extends Type {
  //#override
  Boolean neverReferenceCounted() {
    return true;
  }

  Null constructor(TypeRegistry typeRegistryArg, String nameArg) {
    super.constructor(typeRegistryArg, nameArg);
  }
}

class NullType extends NumericType {
  //#override
  Boolean isSubtypeOf(Type other) {
    return other is AnythingType
        || other is WhateverType
        || other is NullType
        || other is NullableType;
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, 'Null');
  }
}

class BooleanType extends NumericType {
  //#override
  Boolean isSubtypeOf(Type other) {
    return other is BooleanType
        || other is AnythingType
        || other is WhateverType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, 'Boolean');
  }
}

class IntegerType extends NumericType {
  //#override
  Boolean isSubtypeOf(Type other) {
    return other is IntegerType
        || other is AnythingType
        || other is WhateverType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, 'Integer');
  }
}

class ReferenceCountedType extends Type {
  //#override
  Boolean isSubtypeOf(Type other) {
    return other is ReferenceCountedType
        || other is AnythingType
        || other is WhateverType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, 'ReferenceCounted');
  }
}

class StringType extends Type {
  // pointer to heap-allocated structure (or structure in data segment)

  //#override
  Boolean isSubtypeOf(Type other) {
    // Despite strings having a reference count just like GarbageCollectables,
    // a String is _not_ a GarbageCollectable and has a different memory model.
    // Specifically, a String is freed immediately upon hitting zero whereas a
    // GarbageCollectable might still be referenced even when its count is zero
    // and we have to sweep the list of roots to determine if it should be freed.
    return other is StringType
        || other is ReferenceCountedType
        || other is AnythingType
        || other is WhateverType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  //#override
  Boolean neverReferenceCounted() {
    return false;
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, 'String');
  }
}

class GarbageCollectableType extends Type {
  //#override
  Boolean isSubtypeOf(Type other) {
    return other is GarbageCollectableType
        || other is ReferenceCountedType
        || other is AnythingType
        || other is WhateverType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  //#override
  Boolean neverReferenceCounted() {
    return false;
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, 'GarbageCollectable');
  }
}

class AbstractSubroutineType extends Type {
  Type returnType;

  String createName() {
    return concat(returnType.name, 'Function');
  }

  Boolean parametersMatch(AbstractSubroutineType other) {
    abstract();
  }

  //#override
  Boolean isSubtypeOf(Type other) {
    return (other is AbstractSubroutineType &&
            returnType.isSubtypeOf((other as AbstractSubroutineType).returnType) &&
            parametersMatch(other as AbstractSubroutineType))
        || other is AnythingType
        || other is WhateverType
        || other is GarbageCollectableType
        || other is ReferenceCountedType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  Boolean needRuntimeTypeCheckForParameters(AbstractSubroutineType other) {
    // this should typically be the same logic as parametersMatch except
    // using needRuntimeTypeCheckFor instead of isSubtypeOf, and returning
    // the logically opposite result.
    abstract();
  }

  //#override
  Boolean needRuntimeTypeCheckFor(Type other) {
    // in addition to the other cases where we might need a runtime check,
    // we need a runtime check if they're both subroutine types and
    // our return type needs a runtime check for the other's return type,
    // or any of our parameters need a runtime check for the other's
    // equivalent parameter (see needRuntimeTypeCheckForParameters).
    if (other is AbstractSubroutineType) {
      if (returnType.needRuntimeTypeCheckFor((other as AbstractSubroutineType).returnType)) {
        return true;
      }
      return needRuntimeTypeCheckForParameters(other as AbstractSubroutineType);
    }
    return super.needRuntimeTypeCheckFor(other);
  }

  //#override
  Boolean neverReferenceCounted() {
    return true;
  }

  Null constructor(TypeRegistry typeRegistryArg, Type returnTypeArg) {
    returnType = returnTypeArg;
    super.constructor(typeRegistryArg, createName());
  }
}

class SubroutineTypeWithAnyArguments extends AbstractSubroutineType {
  //#override
  Boolean parametersMatch(AbstractSubroutineType other) {
    return true;
  }

  //#override
  Boolean needRuntimeTypeCheckForParameters(AbstractSubroutineType other) {
    return false;
  }

  //#override
  Null markConstructed() {
    assert(false, concat(name, ' type cannot be constructed.'));
  } 
  
  // this is for internal use in this file and is never want you want to be using outside this file
  Boolean equals(Type returnTypeArg) {
    return returnType == returnTypeArg;
  }

  Null constructor(TypeRegistry typeRegistryArg, Type returnTypeArg) {
    super.constructor(typeRegistryArg, returnTypeArg);
    append(typeRegistryArg.typesOfSubroutinesWithAnyArguments, this);
  }
}

class AbstractSubroutineTypeWithSpecificParameters extends AbstractSubroutineType {
  // this is for internal use in this file and is never want you want to be using outside this file
  Boolean equals(Type returnTypeArg, TypeList parameterTypesArg, Boolean isVarArgsArg) {
    abstract();
  }

  Null verifyArguments(TypeList argumentTypes, SourceLocation callLocation, SourceLocationList sourceLocations) {
    abstract();
  }

  Null constructor(TypeRegistry typeRegistryArg, Type returnTypeArg) {
    super.constructor(typeRegistryArg, returnTypeArg);
    append(typeRegistryArg.typesOfSubroutinesWithSpecificParameters, this);
  }
}

fwdclass SubroutineTypeWithSpecificParameters(TypeRegistry, Type, TypeList) extends AbstractSubroutineTypeWithSpecificParameters;
fwdclassfield TypeList SubroutineTypeWithSpecificParameters.parameterTypes;

class SubroutineTypeWithVarArgs extends AbstractSubroutineTypeWithSpecificParameters {
  Type parameterType;

  //#override
  Boolean parametersMatch(AbstractSubroutineType other) {
    if (other is SubroutineTypeWithVarArgs) {
      return (other as SubroutineTypeWithVarArgs).parameterType.isSubtypeOf(parameterType);
    }
    if (other is SubroutineTypeWithSpecificParameters) {
      for (otherParameterType in (other as SubroutineTypeWithSpecificParameters).parameterTypes) {
        if (!otherParameterType.isSubtypeOf(parameterType)) {
          return false;
        }
      }
    }
    return true;
  }

  //#override
  Boolean needRuntimeTypeCheckForParameters(AbstractSubroutineType other) {
    if (other is SubroutineTypeWithVarArgs) {
      return (other as SubroutineTypeWithVarArgs).parameterType.needRuntimeTypeCheckFor(parameterType);
    }
    if (other is SubroutineTypeWithSpecificParameters) {
      for (otherParameterType in (other as SubroutineTypeWithSpecificParameters).parameterTypes) {
        if (otherParameterType.needRuntimeTypeCheckFor(parameterType)) {
          return true;
        }
      }
    }
    return false;
  }

  //#override
  String createName() {
    return concat(super.createName(), '(', parameterType.name, '...)');
  }

  //#override
  Boolean equals(Type returnTypeArg, TypeList parameterTypesArg, Boolean isVarArgsArg) {
    return isVarArgsArg && returnTypeArg == returnType && len(parameterTypesArg) == 1 && parameterTypesArg[0] == parameterType;
  }

  //#override
  Null verifyArguments(TypeList argumentTypes, SourceLocation callLocation, SourceLocationList sourceLocations) {
    Integer index = 0;
    for (type in argumentTypes) {
      if (!type.isSubtypeOf(parameterType)) {
        compileeSourceError(concat('Argument ', index + 1, ' has a static type of ', type.name, ' but expected ', parameterType.name, ' at ', sourceLocations[index]));
      }
      index += 1;
    }
  }

  Null constructor(TypeRegistry typeRegistryArg, Type returnTypeArg, Type parameterTypeArg) {
    parameterType = parameterTypeArg;
    super.constructor(typeRegistryArg, returnTypeArg);
  }
}

class SubroutineTypeWithSpecificParameters extends AbstractSubroutineTypeWithSpecificParameters {
  TypeList parameterTypes;

  //#override
  Boolean parametersMatch(AbstractSubroutineType other) {
    if (other is SubroutineTypeWithVarArgs) {
      return false;
    }
    if (other is SubroutineTypeWithSpecificParameters) {
      SubroutineTypeWithSpecificParameters b = other as SubroutineTypeWithSpecificParameters;
      if (len(b.parameterTypes) != len(parameterTypes)) {
        return false;
      }
      Integer index = 0;
      while (index < len(parameterTypes)) {
        if (!b.parameterTypes[index].isSubtypeOf(parameterTypes[index])) {
          return false;
        }
        index += 1;
      }
    }
    return true;
  }

  //#override
  Boolean needRuntimeTypeCheckForParameters(AbstractSubroutineType other) {
    if (other is SubroutineTypeWithVarArgs) {
      return true;
    }
    if (other is SubroutineTypeWithSpecificParameters) {
      SubroutineTypeWithSpecificParameters b = other as SubroutineTypeWithSpecificParameters;
      if (len(b.parameterTypes) != len(parameterTypes)) {
        return true;
      }
      Integer index = 0;
      while (index < len(parameterTypes)) {
        if (b.parameterTypes[index].needRuntimeTypeCheckFor(parameterTypes[index])) {
          return true;
        }
        index += 1;
      }
    }
    return false;
  }

  //#override
  String createName() {
    String stringify(Type type) {
      return type.name;
    }
    return concat(super.createName(), '(', join(map(parameterTypes, stringify) as StringList, ', '), ')');
  }

  //#override
  Boolean equals(Type returnTypeArg, TypeList parameterTypesArg, Boolean isVarArgsArg) {
    if (isVarArgsArg || returnTypeArg != returnType || len(parameterTypesArg) != len(parameterTypes)) {
      return false;
    }
    Integer index = 0;
    while (index < len(parameterTypes)) {
      if (parameterTypesArg[index] != parameterTypes[index]) {
        return false;
      }
      index += 1;
    }
    return true;
  }

  //#override
  Null verifyArguments(TypeList argumentTypes, SourceLocation callLocation, SourceLocationList sourceLocations) {
    assert(len(argumentTypes) == len(sourceLocations), 'contract violation');
    if (len(argumentTypes) != len(parameterTypes)) {
      compileeSourceError(concat('Wrong number of arguments for subroutine call at ', callLocation, ' (expected ', len(parameterTypes), ', got ', len(argumentTypes), ')'));
    }
    Integer index = 0;
    for (type in argumentTypes) {
      if (!type.isSubtypeOf(parameterTypes[index])) {
        compileeSourceError(concat('Argument ', index + 1, ' has a static type of ', type.name, ' but expected ', parameterTypes[index].name, ' at ', sourceLocations[index]));
      }
      index += 1;
    }
  }

  Null constructor(TypeRegistry typeRegistryArg, Type returnTypeArg, TypeList parameterTypesArg) {
    parameterTypes = parameterTypesArg;
    super.constructor(typeRegistryArg, returnTypeArg);
  }
}

SubroutineTypeWithAnyArgumentsNullable findSubroutineTypeWithAnyArguments(TypeRegistry typeRegistry, Type returnType) {
  for (entry in typeRegistry.typesOfSubroutinesWithAnyArguments) {
    if (entry.equals(returnType)) {
      return entry;
    }
  }
  return null;
}

SubroutineTypeWithAnyArguments createOrFindSubroutineTypeWithAnyArgs(TypeRegistry typeRegistry, Type returnType) {
  SubroutineTypeWithAnyArgumentsNullable result = findSubroutineTypeWithAnyArguments(typeRegistry, returnType);
  if (result == null) {
    SubroutineTypeWithAnyArguments result = SubroutineTypeWithAnyArguments(typeRegistry, returnType);
    append(typeRegistry.typesOfSubroutinesWithAnyArguments, result);
    return result;
  }
  return result!;
}

AbstractSubroutineTypeWithSpecificParametersNullable findSubroutineTypeWithSpecificParameters(TypeRegistry typeRegistry, Type returnType, TypeList parameterTypes, Boolean isVarArgs) {
  for (entry in typeRegistry.typesOfSubroutinesWithSpecificParameters) {
    if (entry.equals(returnType, parameterTypes, isVarArgs)) {
      return entry;
    }
  }
  return null;
}

SubroutineTypeWithVarArgs createOrFindSubroutineTypeWithVarArgs(TypeRegistry typeRegistry, Type returnType, TypeList parameterTypes) {
  assert(len(parameterTypes) == 1, 'varargs must have exactly one parameter type');
  AbstractSubroutineTypeWithSpecificParametersNullable result = findSubroutineTypeWithSpecificParameters(typeRegistry, returnType, parameterTypes, true);
  if (result == null) {
    SubroutineTypeWithVarArgs result = SubroutineTypeWithVarArgs(typeRegistry, returnType, parameterTypes[0]);
    append(typeRegistry.typesOfSubroutinesWithSpecificParameters, result);
    return result;
  }
  return result as SubroutineTypeWithVarArgs;
}

SubroutineTypeWithSpecificParameters createOrFindSubroutineTypeWithSpecificParameters(TypeRegistry typeRegistry, Type returnType, TypeList parameterTypes) {
  AbstractSubroutineTypeWithSpecificParametersNullable result = findSubroutineTypeWithSpecificParameters(typeRegistry, returnType, parameterTypes, false);
  if (result == null) {
    SubroutineTypeWithSpecificParameters result = SubroutineTypeWithSpecificParameters(typeRegistry, returnType, parameterTypes);
    append(typeRegistry.typesOfSubroutinesWithSpecificParameters, result);
    return result;
  }
  return result as SubroutineTypeWithSpecificParameters;
}

class ListDataType extends Type {
  //#override
  Boolean isSubtypeOf(Type other) {
    return other is ListDataType
        || other is AnythingType
        || other is WhateverType
        || other is GarbageCollectableType
        || other is ReferenceCountedType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  //#override
  Boolean neverReferenceCounted() {
    return false;
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, '__ListData');
  }
}

class IteratorType extends Type {
  // pointer to heap-allocated structure

  Type elementType;

  //#override
  Boolean isSubtypeOf(Type other) {
    return (other is IteratorType && elementType.isSubtypeOf((other as IteratorType).elementType))
        || other is AnythingType
        || other is WhateverType
        || other is GarbageCollectableType
        || other is ReferenceCountedType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  //#override
  Boolean needRuntimeTypeCheckFor(Type other) {
    // in addition to the other cases where we might need a runtime check,
    // we need a runtime check if they're both iterator types and
    // our element type needs a runtime check for the other's element type.
    if (other is IteratorType) {
      return elementType.needRuntimeTypeCheckFor((other as IteratorType).elementType);
    }
    return super.needRuntimeTypeCheckFor(other);
  }

  //#override
  Boolean neverReferenceCounted() {
    return false;
  }

  Null constructor(TypeRegistry typeRegistryArg, Type elementTypeArg) {
    super.constructor(typeRegistryArg, concat(elementTypeArg.name, 'Iterator'));
    elementType = elementTypeArg;
    append(typeRegistryArg.typesOfIterators, this);
  }

  //#override
  String debugNotes() {
    if (elementType.code == null) {
      return concat('elementType=', elementType.name, ' (no code)');
    }
    return concat('elementType=', elementType.name, ' (', hexH(elementType.code!), ')');
  }
}

IteratorType createOrFindIteratorType(TypeRegistry typeRegistry, Type elementType) {
  for (entry in typeRegistry.typesOfIterators) {
    if (entry.elementType == elementType) {
      return entry;
    }
  }
  IteratorType result = IteratorType(typeRegistry, elementType);
  append(typeRegistry.typesOfIterators, result);
  return result;
}

class AbstractListType extends Type {
  Type elementType;
  TypeRegistry typeRegistry;

  //#override
  Boolean neverReferenceCounted() {
    return false;
  }

  //#override
  Null markConstructed() {
    super.markConstructed();
    elementType.markUsedInTypeCheck();
    createOrFindIteratorType(typeRegistry, elementType).markConstructed();
    createOrFindIteratorType(typeRegistry, elementType).markUsedInTypeCheck();
  }

  //#override
  Null markUsedInTypeCheck() {
    super.markUsedInTypeCheck();
    elementType.markUsedInTypeCheck();
    createOrFindIteratorType(typeRegistry, elementType).markUsedInTypeCheck();
  }

  Null constructor(TypeRegistry typeRegistryArg, String nameArg, Type elementTypeArg) {
    super.constructor(typeRegistryArg, nameArg);
    typeRegistry = typeRegistryArg;
    elementType = elementTypeArg;
  }

  //#override
  String debugNotes() {
    if (elementType.code == null) {
      return concat('elementType=', elementType.name, ' (no code)');
    }
    return concat('elementType=', elementType.name, ' (', hexH(elementType.code!), ')');
  }
}

class ListType extends AbstractListType {
  // pointer to heap-allocated structure

  //#override
  Boolean isSubtypeOf(Type other) {
    return (other is AbstractListType &&
            elementType.isSubtypeOf((other as AbstractListType).elementType) &&
            (other as AbstractListType).elementType.isSubtypeOf(elementType))
        || (other is IterableType &&
            elementType.isSubtypeOf((other as IterableType).elementType) &&
            (other as IterableType).elementType.isSubtypeOf(elementType))
        || other is AnythingType
        || other is WhateverType
        || other is GarbageCollectableType
        || other is ReferenceCountedType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  //#override
  Boolean needRuntimeTypeCheckFor(Type other) {
    if (other is ListType) {
      Type otherElementType = (other as AbstractListType).elementType;
      return elementType.needRuntimeTypeCheckFor(otherElementType)
          || otherElementType.needRuntimeTypeCheckFor(elementType);
    }
    if (other is ArrayType) {
      return elementType.needRuntimeTypeCheckFor((other as ArrayType).elementType);
    }
    if (other is IterableType) {
      return elementType.needRuntimeTypeCheckFor((other as IterableType).elementType);
    }
    return super.needRuntimeTypeCheckFor(other);
  }

  Null constructor(TypeRegistry typeRegistryArg, Type elementTypeArg) {
    super.constructor(typeRegistryArg, concat(elementTypeArg.name, 'List'), elementTypeArg);
    append(typeRegistryArg.typesOfLists, this);
  }
}

ListType createOrFindListType(TypeRegistry typeRegistry, Type elementType) {
  for (entry in typeRegistry.typesOfLists) {
    if (entry.elementType == elementType) {
      return entry;
    }
  }
  ListType result = ListType(typeRegistry, elementType);
  append(typeRegistry.typesOfLists, result);
  return result;
}

class ArrayType extends AbstractListType {
  // used by varargs and by copies of varargs

  //#override
  Boolean isSubtypeOf(Type other) {
    return (other is ArrayType && elementType.isSubtypeOf((other as ArrayType).elementType))
        || (other is IterableType &&
            elementType.isSubtypeOf((other as IterableType).elementType) &&
            (other as IterableType).elementType.isSubtypeOf(elementType))
        || other is AnythingType
        || other is WhateverType
        || other is GarbageCollectableType // not technically true of VarArgs per se but any time it would matter it is true
        || other is ReferenceCountedType // not technically true of VarArgs per se but any time it would matter it is true
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  //#override
  Boolean needRuntimeTypeCheckFor(Type other) {
    if (other is ArrayType) {
      return elementType.needRuntimeTypeCheckFor((other as ArrayType).elementType);
    }
    if (other is IterableType) {
      return elementType.needRuntimeTypeCheckFor((other as IterableType).elementType);
    }
    return super.needRuntimeTypeCheckFor(other);
  }

  Null constructor(TypeRegistry typeRegistryArg, Type elementTypeArg) {
    super.constructor(typeRegistryArg, concat(elementTypeArg.name, 'Array'), elementTypeArg);
    append(typeRegistryArg.typesOfArrays, this);
  }
}

ArrayType createOrFindArrayType(TypeRegistry typeRegistry, Type elementType) {
  for (entry in typeRegistry.typesOfArrays) {
    if (entry.elementType == elementType) {
      return entry;
    }
  }
  ArrayType result = ArrayType(typeRegistry, elementType);
  append(typeRegistry.typesOfArrays, result);
  return result;
}

class IterableType extends Type {
  // pointer to heap-allocated structure

  Type elementType;
  TypeRegistry typeRegistry;

  //#override
  Boolean isSubtypeOf(Type other) {
    return (other is IterableType && elementType.isSubtypeOf((other as IterableType).elementType))
        || other is AnythingType
        || other is WhateverType
        || other is GarbageCollectableType
        || other is ReferenceCountedType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  //#override
  Boolean needRuntimeTypeCheckFor(Type other) {
    // in addition to the other cases where we might need a runtime check,
    // we need a runtime check if they're both iterable types and
    // our element type needs a runtime check for the other's element type.
    if (other is IterableType) {
      return elementType.needRuntimeTypeCheckFor((other as IterableType).elementType);
    }
    return super.needRuntimeTypeCheckFor(other);
  }

  //#override
  Null markConstructed() {
    super.markConstructed();
    elementType.markUsedInTypeCheck();
    createOrFindIteratorType(typeRegistry, elementType).markConstructed();
    createOrFindIteratorType(typeRegistry, elementType).markUsedInTypeCheck();
    createOrFindListType(typeRegistry, elementType).markConstructed();
    createOrFindListType(typeRegistry, elementType).markUsedInTypeCheck();
  }

  //#override
  Null markUsedInTypeCheck() {
    super.markUsedInTypeCheck();
    elementType.markUsedInTypeCheck();
    createOrFindIteratorType(typeRegistry, elementType).markUsedInTypeCheck();
    createOrFindListType(typeRegistry, elementType).markUsedInTypeCheck();
  }

  //#override
  Boolean neverReferenceCounted() {
    return false;
  }

  Null constructor(TypeRegistry typeRegistryArg, Type elementTypeArg) {
    super.constructor(typeRegistryArg, concat(elementTypeArg.name, 'Iterable'));
    elementType = elementTypeArg;
    typeRegistry = typeRegistryArg;
    append(typeRegistryArg.typesOfIterables, this);
  }

  //#override
  String debugNotes() {
    if (elementType.code == null) {
      return concat('elementType=', elementType.name, ' (no code)');
    }
    return concat('elementType=', elementType.name, ' (', hexH(elementType.code!), ')');
  }
}

IterableType createOrFindIterableType(TypeRegistry typeRegistry, Type elementType) {
  for (entry in typeRegistry.typesOfIterables) {
    if (entry.elementType == elementType) {
      return entry;
    }
  }
  IterableType result = IterableType(typeRegistry, elementType);
  append(typeRegistry.typesOfIterables, result);
  return result;
}

class ClosureType extends Type {
  //#override
  Boolean isSubtypeOf(Type other) {
    return other is ClosureType
        || other is AnythingType
        || other is WhateverType
        || other is GarbageCollectableType
        || other is ReferenceCountedType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  //#override
  Boolean neverReferenceCounted() {
    return false;
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, 'Closure#');
  }
}

/* for typedef# types like StringBuffer */
class IntrinsicType extends Type {
  //#override
  Boolean isSubtypeOf(Type other) {
    return other == this
        || other is GarbageCollectableType
        || other is ReferenceCountedType
        || other is AnythingType
        || other is WhateverType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  //#override
  Boolean neverReferenceCounted() {
    return false;
  }
}

class SubroutineCodeAddressType extends Type {
  //#override
  Boolean isSubtypeOf(Type other) {
    return other is SubroutineCodeAddressType;
  }

  //#override
  Boolean neverReferenceCounted() {
    return true;
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, '__CodeAddress');
  }
}

class TypeRegistry extends Object {
  TypeList types = []:Type;

  Null registerType(Type type) {
    append(types, type);
  }

  SentinelType coreSentinelType;
  AnythingType coreAnythingType;
  WhateverType coreWhateverType;
  NullType coreNullType;
  BooleanType coreBooleanType;
  IntegerType coreIntegerType;
  StringType coreStringType;
  GarbageCollectableType coreGarbageCollectableType;
  ReferenceCountedType coreReferenceCountedType;
  SubroutineCodeAddressType coreSubroutineCodeAddressType;
  ListDataType coreListDataType;
  ClosureType coreClosureType;
  AbstractSubroutineType coreSubroutineType;
  AbstractListType coreSubscriptableType;
  IterableType coreIterableType;

  Null constructor() {
    coreSentinelType = SentinelType(this);
    coreAnythingType = AnythingType(this);
    coreWhateverType = WhateverType(this);
    coreNullType = NullType(this);
    coreBooleanType = BooleanType(this);
    coreIntegerType = IntegerType(this);
    coreStringType = StringType(this);
    coreGarbageCollectableType = GarbageCollectableType(this);
    coreReferenceCountedType = ReferenceCountedType(this);
    coreSubroutineCodeAddressType = SubroutineCodeAddressType(this);
    coreListDataType = ListDataType(this);
    coreClosureType = ClosureType(this);
    coreSubroutineType = createOrFindSubroutineTypeWithAnyArgs(this, coreAnythingType);
    coreSubscriptableType = createOrFindArrayType(this, coreWhateverType);
    coreIterableType = createOrFindIterableType(this, coreWhateverType);
  }

  // These are used by createOrFindSubroutineType(), createOrFindArrayType(), et al.
  // TODO: right now managing this is O(N), could be made faster
  // e.g. keep the lists sorted and binary search.
  NullableTypeList typesOfNullables = []:NullableType;
  AbstractSubroutineTypeWithSpecificParametersList typesOfSubroutinesWithSpecificParameters = []:AbstractSubroutineTypeWithSpecificParameters;
  SubroutineTypeWithAnyArgumentsList typesOfSubroutinesWithAnyArguments = []:SubroutineTypeWithAnyArguments;
  ArrayTypeList typesOfArrays = []:ArrayType;
  ListTypeList typesOfLists = []:ListType;
  IterableTypeList typesOfIterables = []:IterableType;
  IteratorTypeList typesOfIterators = []:IteratorType;

  TypeList sortedTypes;

  Integer assignTypeCodes() {
    TypeList constructedNotTypeChecked = []:Type;
    TypeList constructedAndTypeChecked = []:Type;
    TypeList typeCheckedNotConstructed = []:Type;
    for (type in types) {
      type.finalizeUsageFlags();
      if (type.isConstructed) {
        if (type.isUsedInTypeCheck) {
          append(constructedAndTypeChecked, type);
        } else {
          append(constructedNotTypeChecked, type);
        }
      } else {
        if (type.isUsedInTypeCheck) {
          append(typeCheckedNotConstructed, type);
        } else {
          // not used
        }
      }
    }
    sortedTypes = addLists(constructedNotTypeChecked, constructedAndTypeChecked, typeCheckedNotConstructed) as TypeList;
    assert(first(sortedTypes) is SentinelType, 'type zero must be the sentinel type');
    Integer code = 0;
    for (type in sortedTypes) {
      type.assignCode(code);
      code += 1;
    }
    assert(code < 2**32 - 1, 'too many types (type code exceeded 32 bits)'); // we use imm32s for type codes in some places, we use 0xffffffff as an "invalid" marker
    return len(constructedNotTypeChecked);
  }

  Boolean hasSuffix(String name, String suffix) {
    Integer nameLen = len(scalarValues(name));
    Integer suffixLen = len(scalarValues(suffix));
    return (nameLen > suffixLen) && (substring(name, nameLen - suffixLen, nameLen) == suffix);
  }

  Boolean isCompoundType(String name) {
    return hasSuffix(name, 'Nullable')
        || hasSuffix(name, 'Function')
        || hasSuffix(name, 'List')
        || hasSuffix(name, 'Array')
        || hasSuffix(name, 'Iterable');
  }

  TypeNullable getPrefix(String name, String suffix, Boolean requireDeclared, TypeNullableFunction lookupType) {
    Integer nameLen = len(scalarValues(name));
    Integer suffixLen = len(scalarValues(suffix));
    if ((nameLen > suffixLen) && (substring(name, nameLen - suffixLen, nameLen) == suffix)) {
      return parseType(substring(name, 0, nameLen - suffixLen), requireDeclared, lookupType);
    }
    return null;
  }

  TypeNullable parseType(String name, Boolean requireDeclared, TypeNullableFunction lookupType) {
    TypeNullable prefix;
    prefix = getPrefix(name, 'Nullable', requireDeclared, lookupType);
    if (prefix != null) {
      return createOrFindNullableType(this, prefix!);
    }
    prefix = getPrefix(name, 'Function', requireDeclared, lookupType);
    if (prefix != null) {
      return createOrFindSubroutineTypeWithAnyArgs(this, prefix!);
    }
    prefix = getPrefix(name, 'List', requireDeclared, lookupType);
    if (prefix != null) {
      return createOrFindListType(this, prefix!);
    }
    prefix = getPrefix(name, 'Array', requireDeclared, lookupType);
    if (prefix != null) {
      return createOrFindArrayType(this, prefix!);
    }
    prefix = getPrefix(name, 'Iterable', requireDeclared, lookupType);
    if (prefix != null) {
      return createOrFindIterableType(this, prefix!);
    }
    prefix = getPrefix(name, 'Iterator', requireDeclared, lookupType);
    if (prefix != null) {
      return createOrFindIteratorType(this, prefix!);
    }
    return lookupType(name, requireDeclared);
  }
}