import 'core.syd';
import 'syd-assembler.syd';
import 'syd-operands.syd';

fwdclass Type extends Object;
fwdclass NullableType extends Type;
fwdclass NumericType extends Type;
fwdclass EnumType extends NumericType;
fwdclass ClassType extends Type;
fwdclass AbstractSubroutineType extends Type;
fwdclass SubroutineTypeWithAnyArguments extends AbstractSubroutineType;
fwdclass AbstractSubroutineTypeWithSpecificParameters extends AbstractSubroutineType;
fwdclass AbstractListType extends Type;
fwdclass ReadOnlyListType extends AbstractListType;
fwdclass ListType extends AbstractListType;
fwdclass IterableType extends Type;
fwdclass IteratorType extends Type;
fwdclass TypeRegistry extends Object;

fwdclassprop Type NullableType.subtype;
fwdclassprop TypeList AbstractSubroutineTypeWithSpecificParameters.parameterTypes;
fwdclassprop Type IterableType.elementType;
fwdclassprop NullFunction TypeRegistry.registerType;
fwdclassprop TypeNullableFunction TypeRegistry.parseType;

fwdclassprop NullableTypeList TypeRegistry.typesOfNullables;
fwdclassprop SubroutineTypeWithAnyArgumentsList TypeRegistry.typesOfSubroutinesWithAnyArguments;
fwdclassprop AbstractSubroutineTypeWithSpecificParametersList TypeRegistry.typesOfSubroutinesWithSpecificParameters;
fwdclassprop ReadOnlyListTypeList TypeRegistry.typesOfReadOnlyLists;
fwdclassprop ListTypeList TypeRegistry.typesOfLists;
fwdclassprop IterableTypeList TypeRegistry.typesOfIterables;
fwdclassprop IteratorTypeList TypeRegistry.typesOfIterators;

class Type extends Object {
  IntegerNullable code = null;
  String name;

  Boolean neverReferenceCounted() {
    abstract();
  }

  Boolean isSubtypeOf(Type other) {
    abstract();
  }

  ImmediateOperand asOperand() {
    assert(code != null, concat('cannot read type operand (', name, ') before codes are assigned (did you forget to call markConstructed?)'));
    return ImmediateIntegerOperand(code!);
  }

  Boolean isConstructed = false;
  Boolean isUsedInTypeCheck = false;

  // Should be called by the code that calls the constructor.
  // Implied by __as__.
  Null markConstructed() {
    isConstructed = true;
  }

  Null markUsedInTypeCheck() {
    isUsedInTypeCheck = true;
  }

  Null assignCode(Integer codeArg) {
    code = codeArg;
  }

  Null constructor(TypeRegistry typeRegistryArg, String nameArg) {
    name = nameArg;
    super.constructor();
    typeRegistryArg.registerType(this);
  }

  String toString() {
    if (code != null) {
      return concat(name, '\'', code!);
    }
    return name;
  }
}

class WhateverType extends Type {
  Boolean isSubtypeOf(Type other) {
    return true;
  }

  Boolean neverReferenceCounted() {
    return false;
  }

  Null markConstructed() {
    assert(false, 'Whatever type cannot be constructed.');
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, 'Whatever');
  }
}

class AnythingType extends Type {
  Boolean isSubtypeOf(Type other) {
    return other is AnythingType
        || other is WhateverType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  Boolean neverReferenceCounted() {
    return false;
  }

  Null markConstructed() {
    assert(false, 'Anything type cannot be constructed.');
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, 'Anything');
  }
}

class SentinelType extends Type {
  Boolean isSubtypeOf(Type other) {
    return false;
  }

  Boolean neverReferenceCounted() {
    return true;
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, '<sentinel>');
  }
}

class NullableType extends Type {
  Type subtype;

  Boolean isSubtypeOf(Type other) {
    return other is AnythingType
        || other is WhateverType
        || (other is NullableType && subtype.isSubtypeOf((other as NullableType).subtype));
  }

  Boolean neverReferenceCounted() {
    return false;
  }

  Null markConstructed() {
    assert(false, 'Nullable types cannot be constructed.');
  }

  Null constructor(TypeRegistry typeRegistryArg, Type subtypeArg) {
    assert(!(subtypeArg is NullableType), 'Cannot create nullable nullable type.');
    super.constructor(typeRegistryArg, concat(subtypeArg.name, 'Nullable'));
    subtype = subtypeArg;
  }
}

NullableType createOrFindNullableType(TypeRegistry typeRegistry, Type subtype) {
  for (entry in typeRegistry.typesOfNullables) {
    if (entry.subtype == subtype) {
      return entry;
    }
  }
  return NullableType(typeRegistry, subtype);
}

class NumericType extends Type {
  Boolean neverReferenceCounted() {
    return true;
  }

  Null constructor(TypeRegistry typeRegistryArg, String nameArg) {
    super.constructor(typeRegistryArg, nameArg);
  }
}

class NullType extends NumericType {
  Boolean isSubtypeOf(Type other) {
    return other is AnythingType
        || other is WhateverType
        || other is NullType
        || other is NullableType;
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, 'Null');
  }
}

class BooleanType extends NumericType {
  Boolean isSubtypeOf(Type other) {
    return other is BooleanType
        || other is AnythingType
        || other is WhateverType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, 'Boolean');
  }
}

class IntegerType extends NumericType {
  Boolean isSubtypeOf(Type other) {
    return other is IntegerType
        || other is AnythingType
        || other is WhateverType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, 'Integer');
  }
}

class StringType extends Type {
  // pointer to heap-allocated structure (or structure in data segment)

  Boolean isSubtypeOf(Type other) {
    // Despite strings having a reference count just like GarbageCollectables,
    // a String is _not_ a GarbageCollectable and has a different memory model.
    // Specifically, a String is freed immediately upon hitting zero whereas a
    // GarbageCollectable might still be referenced even when its count is zero
    // and we have to sweep the list of roots to determine if it should be freed.
    return other is StringType
        || other is AnythingType
        || other is WhateverType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  Boolean neverReferenceCounted() {
    return false;
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, 'String');
  }
}

class EnumValue extends Object {
  EnumType type;
  String name;
  Integer index;

  Null constructor(EnumType typeArg, String nameArg, Integer indexArg) {
    super.constructor();
    type = typeArg;
    name = nameArg;
    index = indexArg;
  }
}

class EnumType extends NumericType {
  Map values = Map();

  Boolean isSubtypeOf(Type other) {
    return other == this
        || other is AnythingType
        || other is WhateverType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  Null constructor(TypeRegistry typeRegistryArg, String nameArg, StringList valuesArg) {
    super.constructor(typeRegistryArg, nameArg);
    Integer index = 0;
    for (value in valuesArg) {
      values.set(value, EnumValue(this, value, index));
      index += 1;
    }
  }
}

class GarbageCollectableType extends Type {
  Boolean isSubtypeOf(Type other) {
    return other is GarbageCollectableType
        || other is AnythingType
        || other is WhateverType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  Boolean neverReferenceCounted() {
    return false;
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, 'GarbageCollectable');
  }
}

class ClassType extends Type {
  // xxx properties, methods, constructor...

  ClassType supertype;

  Boolean isSubtypeOf(Type other) {
    if (this == other) {
      return true;
    }
    if (supertype != this) {
      return supertype.isSubtypeOf(other);
    }
    return other is AnythingType
        || other is WhateverType
        || other is GarbageCollectableType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  Boolean neverReferenceCounted() {
    return false;
  }

  Null constructor(TypeRegistry typeRegistryArg, String nameArg, ClassType supertypeArg) {
    super.constructor(typeRegistryArg, nameArg);
    supertype = supertypeArg;
  }
}

class RootClassType extends ClassType {
  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, '<object>', this);
  }
}

class AbstractSubroutineType extends Type {
  Type returnType;

  String createName() {
    return concat(returnType.name, 'Function');
  }

  Boolean isSubtypeOf(Type other) {
    return (other is AbstractSubroutineType && returnType.isSubtypeOf((other as AbstractSubroutineType).returnType))
        || other is AnythingType
        || other is WhateverType
        || other is GarbageCollectableType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  Boolean neverReferenceCounted() {
    return true;
  }

  Null constructor(TypeRegistry typeRegistryArg, Type returnTypeArg) {
    returnType = returnTypeArg;
    super.constructor(typeRegistryArg, createName());
  }
}

class SubroutineTypeWithAnyArguments extends AbstractSubroutineType {
  Null markConstructed() {
    assert(false, concat(name, ' type cannot be constructed.'));
  } 
  
  Boolean equals(Type returnTypeArg) {
    return returnType == returnTypeArg;
  }

  Null constructor(TypeRegistry typeRegistryArg, Type returnTypeArg) {
    super.constructor(typeRegistryArg, returnTypeArg);
    append(typeRegistryArg.typesOfSubroutinesWithAnyArguments, this);
  }
}

class AbstractSubroutineTypeWithSpecificParameters extends AbstractSubroutineType {
  Boolean equals(Type returnTypeArg, TypeList parameterTypesArg, Boolean isVarArgsArg) {
    abstract();
  }

  Null verifyArguments(TypeList argumentTypes, SourceLocationList sourceLocations) {
    abstract();
  }

  Null constructor(TypeRegistry typeRegistryArg, Type returnTypeArg) {
    super.constructor(typeRegistryArg, returnTypeArg);
    append(typeRegistryArg.typesOfSubroutinesWithSpecificParameters, this);
  }
}

class SubroutineTypeWithVarArgs extends AbstractSubroutineTypeWithSpecificParameters {
  Type parameterType;

  String createName() {
    return concat(super.createName(), '(', parameterType.name, '...)');
  }

  Boolean equals(Type returnTypeArg, TypeList parameterTypesArg, Boolean isVarArgsArg) {
    return isVarArgsArg && returnTypeArg == returnType && len(parameterTypesArg) == 1 && parameterTypesArg[0] == parameterType;
  }

  Null verifyArguments(TypeList argumentTypes, SourceLocationList sourceLocations) {
    Integer index = 0;
    for (type in argumentTypes) {
      if (!type.isSubtypeOf(parameterType)) {
        throw(concat('Argument ', index + 1, ' has a static type of ', type.name, ' but expected ', parameterType.name, ' at ', sourceLocations[index]));
      }
      index += 1;
    }
  }

  Null constructor(TypeRegistry typeRegistryArg, Type returnTypeArg, Type parameterTypeArg) {
    parameterType = parameterTypeArg;
    super.constructor(typeRegistryArg, returnTypeArg);
  }
}

class SubroutineTypeWithSpecificParameters extends AbstractSubroutineTypeWithSpecificParameters {
  TypeList parameterTypes;

  String createName() {
    String stringify(Type type) {
      return type.name;
    }
    return concat(super.createName(), '(', join(map(parameterTypes, stringify) as StringList, ', '), ')');
  }

  Boolean equals(Type returnTypeArg, TypeList parameterTypesArg, Boolean isVarArgsArg) {
    if (isVarArgsArg || returnTypeArg != returnType || len(parameterTypesArg) != len(parameterTypes)) {
      return false;
    }
    Integer index = 0;
    while (index < len(parameterTypes)) {
      if (parameterTypesArg[index] != parameterTypes[index]) {
        return false;
      }
      index += 1;
    }
    return true;
  }

  Null verifyArguments(TypeList argumentTypes, SourceLocationList sourceLocations) {
    Integer index = 0;
    for (type in argumentTypes) {
      if (!type.isSubtypeOf(parameterTypes[index])) {
        throw(concat('Argument ', index + 1, ' has a static type of ', type.name, ' but expected ', parameterTypes[index].name, ' at ', sourceLocations[index]));
      }
      index += 1;
    }
  }

  Null constructor(TypeRegistry typeRegistryArg, Type returnTypeArg, TypeList parameterTypesArg) {
    parameterTypes = parameterTypesArg;
    super.constructor(typeRegistryArg, returnTypeArg);
  }
}

SubroutineTypeWithAnyArgumentsNullable findSubroutineTypeWithAnyArguments(TypeRegistry typeRegistry, Type returnType) {
  for (entry in typeRegistry.typesOfSubroutinesWithAnyArguments) {
    if (entry.equals(returnType)) {
      return entry;
    }
  }
  return null;
}

SubroutineTypeWithAnyArguments createOrFindSubroutineTypeWithAnyArgs(TypeRegistry typeRegistry, Type returnType) {
  SubroutineTypeWithAnyArgumentsNullable result = findSubroutineTypeWithAnyArguments(typeRegistry, returnType);
  if (result == null) {
    return SubroutineTypeWithAnyArguments(typeRegistry, returnType);
  }
  return result!;
}

AbstractSubroutineTypeWithSpecificParametersNullable findSubroutineTypeWithSpecificParameters(TypeRegistry typeRegistry, Type returnType, TypeList parameterTypes, Boolean isVarArgs) {
  for (entry in typeRegistry.typesOfSubroutinesWithSpecificParameters) {
    if (entry.equals(returnType, parameterTypes, isVarArgs)) {
      return entry;
    }
  }
  return null;
}

SubroutineTypeWithVarArgs createOrFindSubroutineTypeWithVarArgs(TypeRegistry typeRegistry, Type returnType, TypeList parameterTypes) {
  assert(len(parameterTypes) == 1, 'varargs must have exactly one parameter type');
  AbstractSubroutineTypeWithSpecificParametersNullable result = findSubroutineTypeWithSpecificParameters(typeRegistry, returnType, parameterTypes, true);
  if (result == null) {
    return SubroutineTypeWithVarArgs(typeRegistry, returnType, parameterTypes[0]);
  }
  return result as SubroutineTypeWithVarArgs;
}

SubroutineTypeWithSpecificParameters createOrFindSubroutineTypeWithSpecificParameters(TypeRegistry typeRegistry, Type returnType, TypeList parameterTypes) {
  AbstractSubroutineTypeWithSpecificParametersNullable result = findSubroutineTypeWithSpecificParameters(typeRegistry, returnType, parameterTypes, false);
  if (result == null) {
    return SubroutineTypeWithSpecificParameters(typeRegistry, returnType, parameterTypes);
  }
  return result as SubroutineTypeWithSpecificParameters;
}

class ListDataType extends Type {
  Boolean isSubtypeOf(Type other) {
    return other is ListDataType
        || other is AnythingType
        || other is WhateverType
        || other is GarbageCollectableType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  Boolean neverReferenceCounted() {
    return false;
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, '__ListData');
  }
}

class AbstractListType extends Type {
  Type elementType;

  Boolean neverReferenceCounted() {
    return false;
  }

  Null constructor(TypeRegistry typeRegistryArg, String nameArg, Type elementTypeArg) {
    super.constructor(typeRegistryArg, nameArg);
    elementType = elementTypeArg;
  }
}

class ListType extends AbstractListType {
  // pointer to heap-allocated structure

  Boolean isSubtypeOf(Type other) {
    return (other is AbstractListType &&
            elementType.isSubtypeOf((other as AbstractListType).elementType) &&
            (other as AbstractListType).elementType.isSubtypeOf(elementType))
        || (other is IterableType &&
            elementType.isSubtypeOf((other as IterableType).elementType) &&
            (other as IterableType).elementType.isSubtypeOf(elementType))
        || other is AnythingType
        || other is WhateverType
        || other is GarbageCollectableType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  Null constructor(TypeRegistry typeRegistryArg, Type elementTypeArg) {
    super.constructor(typeRegistryArg, concat(elementTypeArg.name, 'List'), elementTypeArg);
    append(typeRegistryArg.typesOfLists, this);
  }
}

ListType createOrFindListType(TypeRegistry typeRegistry, Type elementType) {
  for (entry in typeRegistry.typesOfLists) {
    if (entry.elementType == elementType) {
      return entry;
    }
  }
  return ListType(typeRegistry, elementType);
}

class ReadOnlyListType extends AbstractListType {
  // used by varargs and by copies of varargs

  Boolean isSubtypeOf(Type other) {
    return (other is ReadOnlyListType && elementType.isSubtypeOf((other as ReadOnlyListType).elementType))
        || other is AnythingType
        || other is WhateverType
        || other is GarbageCollectableType // not technically true of VarArgs per se but any time it would matter it is true
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  Null constructor(TypeRegistry typeRegistryArg, Type elementTypeArg) {
    super.constructor(typeRegistryArg, concat(elementTypeArg.name, 'ReadOnlyList'), elementTypeArg);
    append(typeRegistryArg.typesOfReadOnlyLists, this);
  }
}

ReadOnlyListType createOrFindReadOnlyListType(TypeRegistry typeRegistry, Type elementType) {
  for (entry in typeRegistry.typesOfReadOnlyLists) {
    if (entry.elementType == elementType) {
      return entry;
    }
  }
  return ReadOnlyListType(typeRegistry, elementType);
}

class IterableType extends Type {
  // pointer to heap-allocated structure

  Type elementType;

  Boolean isSubtypeOf(Type other) {
    return (other is IterableType && elementType.isSubtypeOf(cast(cast(other).elementType)))
        || other is AnythingType
        || other is WhateverType
        || other is GarbageCollectableType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  Boolean neverReferenceCounted() {
    return false;
  }

  Null constructor(TypeRegistry typeRegistryArg, Type elementTypeArg) {
    super.constructor(typeRegistryArg, concat(elementTypeArg.name, 'Iterable'));
    elementType = elementTypeArg;
    append(typeRegistryArg.typesOfIterables, this);
  }
}

IterableType createOrFindIterableType(TypeRegistry typeRegistry, Type elementType) {
  for (entry in typeRegistry.typesOfIterables) {
    if (entry.elementType == elementType) {
      return entry;
    }
  }
  return IterableType(typeRegistry, elementType);
}

class IteratorType extends Type {
  // pointer to heap-allocated structure

  Type elementType;

  Boolean isSubtypeOf(Type other) {
    return (other is IteratorType && elementType.isSubtypeOf(cast(cast(other).elementType)))
        || other is AnythingType
        || other is WhateverType
        || other is GarbageCollectableType
        || (other is NullableType && isSubtypeOf((other as NullableType).subtype));
  }

  Boolean neverReferenceCounted() {
    return false;
  }

  Null constructor(TypeRegistry typeRegistryArg, Type elementTypeArg) {
    super.constructor(typeRegistryArg, concat(elementTypeArg.name, 'Iterator'));
    elementType = elementTypeArg;
    append(typeRegistryArg.typesOfIterators, this);
  }
}

IteratorType createOrFindIteratorType(TypeRegistry typeRegistry, Type elementType) {
  for (entry in typeRegistry.typesOfIterators) {
    if (entry.elementType == elementType) {
      return entry;
    }
  }
  return IteratorType(typeRegistry, elementType);
}

class ClosureType extends Type {
  Boolean isSubtypeOf(Type other) {
    return other is ClosureType
        || other is GarbageCollectableType;
  }

  Boolean neverReferenceCounted() {
    return false;
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, '<closure>');
  }
}

class SystemType extends Type {
  Boolean isSubtypeOf(Type other) {
    return other is SystemType;
  }

  Boolean neverReferenceCounted() {
    return true;
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, '<system>');
  }
}

class SubroutineCodeAddressType extends Type {
  Boolean isSubtypeOf(Type other) {
    return other is SubroutineCodeAddressType;
  }

  Boolean neverReferenceCounted() {
    return true;
  }

  Null constructor(TypeRegistry typeRegistryArg) {
    super.constructor(typeRegistryArg, '<subroutine code address>');
  }
}


class TypeRegistry extends Object {
  TypeList types = []:Type;

  Null registerType(Type type) {
    append(types, type);
  }

  // These are used by createOrFindSubroutineType(), createOrFindReadOnlyListType(), et al.
  // TODO: right now managing this is O(N), could be made faster
  // e.g. keep the lists sorted and binary search.
  NullableTypeList typesOfNullables = []:NullableType;
  AbstractSubroutineTypeWithSpecificParametersList typesOfSubroutinesWithSpecificParameters = []:AbstractSubroutineTypeWithSpecificParameters;
  SubroutineTypeWithAnyArgumentsList typesOfSubroutinesWithAnyArguments = []:SubroutineTypeWithAnyArguments;
  ReadOnlyListTypeList typesOfReadOnlyLists = []:ReadOnlyListType;
  ListTypeList typesOfLists = []:ListType;
  IterableTypeList typesOfIterables = []:IterableType;
  IteratorTypeList typesOfIterators = []:IteratorType;

  TypeList sortedTypes;

  Integer assignTypeCodes() {
    TypeList constructedNotTypeChecked = []:Type;
    TypeList constructedAndTypeChecked = []:Type;
    TypeList typeCheckedNotConstructed = []:Type;
    for (type in types) {
      if (type.isConstructed) {
        if (type.isUsedInTypeCheck) {
          append(constructedAndTypeChecked, type);
        } else {
          append(constructedNotTypeChecked, type);
        }
      } else {
        if (type.isUsedInTypeCheck) {
          append(typeCheckedNotConstructed, type);
        } else {
          // not used
        }
      }
    }
    sortedTypes = addLists(constructedNotTypeChecked, constructedAndTypeChecked, typeCheckedNotConstructed) as TypeList;
    Integer code = 0;
    for (type in sortedTypes) {
      type.assignCode(code);
      code += 1;
    }
    assert(code < 2**32, 'too many types (type code exceeded 32 bits)'); // we use imm32s for type codes in some places
    return len(constructedNotTypeChecked);
  }

  String withConstantTypeParenthetical(String comment, Operand operand) {
    if (operand is ImmediateIntegerOperand) {
      return concat(comment, ' (', sortedTypes[(operand as ImmediateIntegerOperand).value], ')');
    }
    return comment;
  }

  Boolean hasSuffix(String name, String suffix) {
    Integer nameLen = len(scalarValues(name));
    Integer suffixLen = len(scalarValues(suffix));
    return (nameLen > suffixLen) && (substring(name, nameLen - suffixLen, nameLen) == suffix);
  }

  Boolean isCompoundType(String name) {
    return hasSuffix(name, 'Nullable')
        || hasSuffix(name, 'Function')
        || hasSuffix(name, 'List')
        || hasSuffix(name, 'Iterable');
  }

  TypeNullable getPrefix(String name, String suffix, TypeNullableFunction lookupType) {
    Integer nameLen = len(scalarValues(name));
    Integer suffixLen = len(scalarValues(suffix));
    if ((nameLen > suffixLen) && (substring(name, nameLen - suffixLen, nameLen) == suffix)) {
      return parseType(substring(name, 0, nameLen - suffixLen), lookupType);
    }
    return null;
  }

  TypeNullable parseType(String name, TypeNullableFunction lookupType) {
    TypeNullable prefix;
    prefix = getPrefix(name, 'Nullable', lookupType);
    if (prefix != null) {
      return createOrFindNullableType(this, prefix!);
    }
    prefix = getPrefix(name, 'Function', lookupType);
    if (prefix != null) {
      return createOrFindSubroutineTypeWithAnyArgs(this, prefix!);
    }
    prefix = getPrefix(name, 'List', lookupType);
    if (prefix != null) {
      return createOrFindListType(this, prefix!);
    }
    prefix = getPrefix(name, 'Iterable', lookupType);
    if (prefix != null) {
      return createOrFindIterableType(this, prefix!);
    }
    prefix = getPrefix(name, 'Iterator', lookupType);
    if (prefix != null) {
      return createOrFindIteratorType(this, prefix!);
    }
    return lookupType(name);
  }
}
