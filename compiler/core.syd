// Standard Library
//stderr('Syllad core library 1.0 loaded.');

//#ignore_unused
Integer min(Integer a, Integer b) {
  if (a > b) {
    return b;
  }
  return a;
}

//#ignore_unused
Integer max(Integer a, Integer b) {
  if (a < b) {
    return b;
  }
  return a;
}

//#ignore_unused
String intToStr(Integer value) {
  if (value == 0) {
    return '0';
  }
  StringList buffer = []:String;
  Integer newValue = value; // parameters are final
  if (newValue < 0) {
    newValue = -newValue;
  }
  while (newValue > 0) {
    Integer digit = newValue % 10;
    newValue = newValue / 10;
    append(buffer, chr(0x30 + digit));
  }
  if (value < 0) {
    append(buffer, '-');
  }
  Integer index = len(buffer);
  StringList flippedBuffer = []:String;
  while (index > 0) {
    index -= 1;
    append(flippedBuffer, buffer[index]);
  }
  return joinList(flippedBuffer);
}

//#ignore_unused
String padRight(String line, Integer length, String padding) {
  return concat(line, stringTimes(padding, (length - len(charsOf(line))) / len(charsOf(padding))));
}

//#ignore_unused
AnythingList map(WhateverList items, AnythingFunction callback) {
  AnythingList result = [];
  Integer index = 0;
  while (index < len(items)) {
    append(result, callback(items[index]));
    index += 1;
  }
  return result;
}

//#ignore_unused
Null appendAll(WhateverList list, WhateverList other) {
  for (item in other) {
    append(list, item);
  }
}

//#ignore_unused
WhateverList reverse(WhateverList list) {
  Integer length = len(list);
  if (length < 2) {
    return copy(list);
  }
  WhateverList result = filledList(length, list[0]);
  Integer index = 0;
  while (index < length) {
    result[index] = list[length - index - 1];
    index += 1;
  }
  return result;
}

//#ignore_unused
Integer compareInteger(Integer a, Integer b) {
  return a - b;
}

//#ignore_unused
Integer compareString(String a, String b) {
  Integer index = 0;
  IntegerList aChars = copy(scalarValues(a));
  IntegerList bChars = copy(scalarValues(b));
  while (true) {
    if (index >= len(aChars)) {
      if (index >= len(bChars)) {
        return 0;
      }
      return -1;
    }
    if (index >= len(bChars)) {
      return 1;
    }
    Integer result = aChars[index] - bChars[index];
    if (result != 0) {
      return result;
    }
    index += 1;
  }
}

// QUICKSORT

// begin is inclusive, end is exclusive
// return value is the indices of values such that all lower values
// are before the first index and all higher values are after the second index
IntegerList _partition(WhateverList list, Integer begin, Integer end, IntegerFunction comparator) {
  assert(begin + 1 < end, '_partition called with less than two items');
  // choose a pivot and put it at the end
  // we choose one in the middle so that a sorted array is not worst-case
  Integer pivotIndex = begin + (end - 1 - begin) / 2;
  assert(pivotIndex < end - 1, 'invariant violation');
  Whatever pivot = list[pivotIndex];
  list[pivotIndex] = list[end - 1];
  list[end - 1] = pivot;
  // now partition the array around pivot
  Integer candidatePivotIndex = begin;
  Integer index = begin;
  while (index < end - 1) {
    if (comparator(list[index], pivot) < 0) {
      // swap
      Whatever temp = list[candidatePivotIndex];
      list[candidatePivotIndex] = list[index];
      list[index] = temp;
      // increment
      candidatePivotIndex += 1;
    }
    index += 1;
  }
  assert(index == end - 1, 'invariant violation');
  Whatever temp = list[candidatePivotIndex];
  list[candidatePivotIndex] = list[index];
  list[index] = temp;
  index = begin;
  while (index < candidatePivotIndex) {
    if (comparator(list[index], list[candidatePivotIndex]) > 0) {
      throw(concat('partition error (left): at ', index, ' of ', list, ' between ', begin, ' and ', end, ', with pivot at ', candidatePivotIndex, '; comparator says: ', comparator(list[index], list[candidatePivotIndex])));
    }
    index += 1;
  }
  assert(index == candidatePivotIndex, 'internal error');
  while (index < end) {
    if (comparator(list[index], list[candidatePivotIndex]) < 0) {
      throw(concat('partition error (right): at ', index, ' of ', list, ' between ', begin, ' and ', end, ', with pivot at ', candidatePivotIndex, '; comparator says: ', comparator(list[index], list[candidatePivotIndex])));
    }
    index += 1;
  }
  Integer fatPivotStart = candidatePivotIndex;
  while (fatPivotStart > begin && comparator(list[fatPivotStart - 1], list[candidatePivotIndex]) == 0) {
    fatPivotStart -= 1;
  }
  Integer fatPivotEnd = candidatePivotIndex;
  while (fatPivotEnd < end-1 && comparator(list[fatPivotEnd + 1], list[candidatePivotIndex]) == 0) {
    fatPivotEnd += 1;
  }
  return [fatPivotStart, fatPivotEnd];
}

// begin is inclusive, end is exclusive
Null _sortRange(WhateverList list, Integer begin, Integer end, IntegerFunction comparator) {
  assert(begin + 1 < end, '_sortRange called with less than two items');
  if (end - begin == 2) {
    if (comparator(list[begin], list[end - 1]) > 0) {
      Whatever temp = list[begin];
      list[begin] = list[end - 1];
      list[end - 1] = temp;
    }
    return;
  }
  IntegerList pivotIndices = _partition(list, begin, end, comparator);
  if (begin + 1 < pivotIndices[0]) {
    _sortRange(list, begin, pivotIndices[0], comparator);
  }
  if (pivotIndices[1] + 2 < end) {
    _sortRange(list, pivotIndices[1] + 1, end, comparator);
  }
}

// in-place sort.
// comparator takes two values and returns a positive number if the first is first,
// a negative number if the second is first, and zero if they are equal.
//#ignore_unused
Null sortWithComparator(WhateverList list, IntegerFunction comparator) {
  if (len(list) > 1) {
    _sortRange(list, 0, len(list), comparator);
  }
}

// O(N)
//#ignore_unused
Boolean contains(WhateverList list, Anything item) {
  for (entry in list) {
    if (entry == item) {
      return true;
    }
  }
  return false;
}

// OBJECTS

Integer lastObjectId = 0;

class Object {
  //#ignore_unused
  Null abstract() {
    throw(concat('called abstract method on ', className));
  }

  //#ignore_unused
  Null unimplemented() {
    throw(concat('not implemented on ', className));
  }

  Integer internalObjectId;

  //#ignore_unused
  Null constructor() {
    internalObjectId = lastObjectId;
    lastObjectId += 1;
  }

  String toString() {
    return concat('<', className, '@', internalObjectId, '>');
  }
}

// COLLECTIONS

// This is a port of the xor variant of djb2, from http://www.cse.yorku.ca/~oz/hash.html
// The original assumed 8-bit characters; this version uses scalar values which are 21 bits,
// whether this makes any sense or not is unclear.
//#ignore_unused
Integer hashString(String data) {
  Integer result = 5381;
  for (c in scalarValues(data)) {
    result = ((result << 5) + result) ^ c;
  }
  return result;
}

//#ignore_unused
Integer hashAnything(Anything data) {
  if (data is Object) {
    return (data as Object).internalObjectId;
  }
  return hashString(concat(data));
}

fwdclass Map extends Object;

// Map has set, get, remove, keys, values
// an implementation of .containsKey would be identical to get(n) != null, so just use that
class Map extends Object {
  // outer list is indexed by hash mod length
  // it is a sparse list (hence nullable)
  // each entry is a list of the things at that that hash code
  // each thing in that list is a key/value pair
  AnythingListListNullableList table = []:AnythingListListNullable;
  Integer length = 0;

  // protected
  Null nonGrowingSet(Anything key, Anything value) {
    assert(len(table) > 0, 'Cannot set without growing in an empty Map.');
    Integer hashCode = hashAnything(key);
    Integer entryIndex = hashCode % len(table);
    AnythingListListNullableList table = table;
    AnythingListListNullable entry = table[entryIndex];
    if (entry == null) {
      table[entryIndex] = [[key, value]]:AnythingList;
      length += 1;
      return;
    }
    for (record in entry!) {
      if (record[0] == key) {
        record[1] = value;
        return;
      }
    }
    append(entry!, [key, value]);
    length += 1;
  }
  
  //#ignore_unused
  Null remove(Anything key) {
    assert(len(table) > 0, 'Cannot remove from an empty Map.');
    Integer hashCode = hashAnything(key);
    Integer entryIndex = hashCode % len(table);
    AnythingListListNullable entry = table[entryIndex];
    assert(entry != null, 'Cannot remove something not in the map.');
    for (record in entry!) {
      if (record[0] == key) {
        length -= 1;
        if (len(entry!) > 1) {
          AnythingListList newRecord = []:AnythingList;
          for (item in entry!) {
            if (item[0] != key) {
              append(newRecord, item);
            }
          }
          table[entryIndex] = newRecord;
        } else {
          table[entryIndex] = null;
        }
        return;
      }
    }
    assert(false, 'Cannot remove something not in the map.');
  }

  // protected
  Null grow() {
    AnythingListListNullableList oldTable = table;
    AnythingListListNullableList newTable = []:AnythingListListNullable;
    Integer oldSize = len(oldTable);
    Integer newSize = oldSize * 2 + 1;
    Integer index = 0;
    while (index < newSize) {
      append(newTable, null);
      index += 1;
    }
    table = newTable;
    length = 0; // gets reset by nonGrowingSet
    for (entry in oldTable) {
      if (entry != null) {
        for (record in entry!) {
          nonGrowingSet(record[0], record[1]);
        }
      }
    }
  }

  //#ignore_unused
  Null set(Anything key, Anything value) {
    if (len(table) <= length /* *1.3 */) {
      grow();
    }
    nonGrowingSet(key, value);
  }

  //#ignore_unused
  Anything get(Anything key) {
    if (len(table) == 0) {
      return null;
    }
    Integer hashCode = hashAnything(key);
    AnythingListListNullable entry = table[hashCode % len(table)];
    if (entry == null) {
      return null;
    }
    for (record in entry!) {
      if (record[0] == key) {
        return record[1];
      }
    }
    return null;
  }

  //#ignore_unused
  AnythingList keys() {
    AnythingList result = [];
    for (entry in table) {
      if (entry != null) {
        for (record in entry!) {
          append(result, record[0]);
        }
      }
    }
    return result;
  }

  //#ignore_unused
  AnythingList values() {
    AnythingList result = [];
    for (entry in table) {
      if (entry != null) {
        for (record in entry!) {
          append(result, record[1]);
        }
      }
    }
    return result;
  }
  
  //#ignore_unused
  Map copy() {
    Map result = Map();
    for (entry in table) {
      if (entry != null) {
        for (record in entry!) {
          result.set(record[0], record[1]);
        }
      }
    }
    return result;
  }
  
  //#override
  String toString() {
    StringList items = []:String;
    for (entry in table) {
      if (entry != null) {
        for (record in entry!) {
          if (len(items) > 0) {
            append(items, ', ');
          }
          append(items, concat(record[0], ': ', record[1]));
        }
      }
    }
    return concat(
      '{',
      joinList(items),
      '}',
    );
  }
}

fwdclass Set() extends Object;
class Set extends Object {
  AnythingListNullableList table = []:AnythingListNullable;
  Integer length = 0;

  // protected
  Null nonGrowingAdd(Anything key) {
    assert(len(table) > 0, 'Cannot set without growing in an empty Set.');
    Integer hashCode = hashAnything(key);
    Integer entryIndex = hashCode % len(table);
    AnythingListNullable entry = table[entryIndex];
    if (entry == null) {
      table[entryIndex] = [key];
      length += 1;
      return;
    }
    for (record in entry!) {
      if (record == key) {
        return;
      }
    }
    append(entry!, key);
    length += 1;
  }

  //#ignore_unused
  Boolean has(Anything key) {
    if (len(table) == 0) {
      return false;
    }
    Integer hashCode = hashAnything(key);
    AnythingListNullable entry = table[hashCode % len(table)];
    if (entry == null) {
      return false;
    }
    for (record in entry!) {
      if (record == key) {
        return true;
      }
    }
    return false;
  }

  //#ignore_unused
  Null remove(Anything key) {
    assert(len(table) > 0, 'Cannot remove from an empty Set.');
    Integer hashCode = hashAnything(key);
    Integer entryIndex = hashCode % len(table);
    AnythingListNullable entry = table[entryIndex];
    assert(entry != null, 'Cannot remove something not in the set.');
    for (record in entry!) {
      if (record == key) {
        length -= 1;
        if (len(entry!) > 1) {
          AnythingList newRecord = []:Anything;
          for (item in entry!) {
            if (item != key) {
              append(newRecord, item);
            }
          }
          table[entryIndex] = newRecord;
        } else {
          table[entryIndex] = null;
        }
        return;
      }
    }
    assert(false, 'Cannot remove something not in the set.');
  }

  //#ignore_unused
  Null removeAll(WhateverList keys) {
    for (key in keys) {
      if (has(key)) {
        remove(key);
      }
    }
  }

  // protected
  Null grow() {
    AnythingListNullableList oldTable = table;
    AnythingListNullableList newTable = []:AnythingListNullable;
    Integer oldSize = len(oldTable);
    Integer newSize = oldSize * 2 + 1;
    Integer index = 0;
    while (index < newSize) {
      append(newTable, null);
      index += 1;
    }
    length = 0; // gets reset by nonGrowingAdd
    table = newTable;
    for (entry in oldTable) {
      if (entry != null) {
        for (record in entry!) {
          nonGrowingAdd(record);
        }
      }
    }
  }

  //#ignore_unused
  Null add(Anything key) {
    if (has(key)) {
      return;
    }
    if (len(table) <= length /* *1.3 */) {
      grow();
    }
    nonGrowingAdd(key);
    assert(has(key), 'add did not add');
  }

  //#ignore_unused
  Null addAll(AnythingList keys) {
    for (key in keys) {
      add(key);
    }
  }

  //#ignore_unused
  AnythingList values() {
    AnythingList result = [];
    for (entry in table) {
      if (entry != null) {
        for (record in entry!) {
          append(result, record);
        }
      }
    }
    return result;
  }

  //#override
  String toString() {
    StringList items = []:String;
    for (entry in table) {
      if (entry != null) {
        for (record in entry!) {
          if (len(items) > 0) {
            append(items, ', ');
          }
          append(items, concat(record));
        }
      }
    }
    return concat(
      '{',
      joinList(items),
      '}',
    );
  }

  Null _setTable(AnythingListNullableList tableArg) {
    table = tableArg;
  }
  
  //#ignore_unused
  Set clone() {
    AnythingListNullableList tableResult = []:AnythingListNullable;
    for (entry in table) {
      if (entry == null) {
        append(tableResult, null);
      } else {
        append(tableResult, copy(entry!));
      }
    }
    Set result = Set();
    result._setTable(tableResult);
    return result;
  }

  //#ignore_unused
  Null clear() {
    table = []:AnythingListNullable;
    length = 0;
  }
}

//#ignore_unused
Boolean listEquals(WhateverList list1, WhateverList list2) {
  if (len(list1) != len(list2)) {
    return false;
  }
  Integer index = 0;
  while (index < len(list1)) {
    if (list1[index] != list2[index]) {
      return false;
    }
    index += 1;
  }
  return true;
}

//#ignore_unused
Boolean unorderedListEquals(WhateverList list1, WhateverList list2) {
  if (len(list1) != len(list2)) {
    return false;
  }
  Set set2 = Set();
  for (item in list2) {
    assert(!set2.has(item), 'list2 has duplicates');
    set2.add(item);
  }
  assert(len(list1) == set2.length, 'list1 has duplicates');
  for (item in list1) {
    if (!set2.has(item)) {
      return false;
    }
  }
  return true;
}