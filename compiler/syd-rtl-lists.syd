// RUNTIME LIBRARY - SEQUENCE TYPES

import 'syd-rtl-memory.syd';
import 'syd-rtl-core-lists.syd';

// LISTS

// Lists are represented as pointers to an intermediary block that itself contains a pointer to
// the data. Both are GarbageCollectable blocks as described above.
//
// The list intermediary has length two.
// The first value is size (type Integer), the number of allocated entries in the list data.
// This may be bigger than the length, to allow cheaper appends.
// The second value is a pointer to the data block (type __ListData).
//
// The list data just has the values.

// constantPointer is a pointer to a sequence of (type, value) pairs
WhateverList listConstructorFromConstant#(Integer typeCode, Integer length, Integer constantPointer) intrinsic# {
  assert(length > 0, 'call listConstructor# for empty lists, not listConstructorFromConstant#');
  _gcLocked += 1;
  WhateverList list = _constructor(typeCode, 2, 2) as WhateverList;
  __ListData data = _constructor(__typeCodeOf __ListData, length, length) as __ListData;
  _moveBytes(constantPointer, data __as__ Integer + _gcBlockData, length * 16);
  __writeToAddress(list __as__ Integer + _gcBlockData + 0, __typeOf length);
  __writeToAddress(list __as__ Integer + _gcBlockData + 8, length);
  __writeToAddress(list __as__ Integer + _gcBlockData + 16, __typeOf data);
  __writeToAddress(list __as__ Integer + _gcBlockData + 24, data __as__ Integer);
  _gcLocked -= 1;
  return list;
}

Anything pop(WhateverList list) {
  Integer lastIndex = len(list) - 1;
  if (lastIndex < 0) {
    throw('cannot pop from empty list');
  }
  Anything result = list[lastIndex];
  Integer intermediaryAddress = list __as__ Integer;
  Integer dataAddress = __readFromAddress(intermediaryAddress + _gcBlockData + 16 + 8);
  __writeToAddress(dataAddress + _gcBlockHeaderLength, lastIndex);
  return result;
}


// ITERABLES AND ITERATORS

class Iterator# {
  Whatever current() { }
  Boolean next() { }
}

class ArrayIterator# extends Iterator# {
  WhateverArray array;
  Integer index = -1;

  //#override
  Whatever current() {
    assert(index >= 0, 'contract violation');
    assert(index < len(array), 'contract violation');
    return array[index];
  }

  //#override
  Boolean next() {
    index += 1;
    return index < len(array);
  }

  Null constructor(WhateverArray arrayArg) {
    array = arrayArg;
  }
}

class Iterable# {
  WhateverIterator iterator() { }

  Integer len() {
    // default implementation (expensive)
    Iterator# lengthCountingIterator = iterator() __as__ Iterator#;
    Integer count = 0;
    while (lengthCountingIterator.next()) {
      count += 1;
    }
    return count;
  }
}

// creates an iterator for the iterable
WhateverIterator iterator(WhateverIterable iterableArg) intrinsic# {
  if (iterableArg is WhateverArray) {
    return (ArrayIterator#(iterableArg as WhateverArray) __dynamic_as__ __iteratorTypeFrom __typeOf iterableArg) as WhateverIterator;
  }
  Iterable# iterable = iterableArg __as__ Iterable#;
  return iterable.iterator();
}

Integer len#(WhateverIterable iterableArg) intrinsic# {
  if (iterableArg is WhateverArray) {
    // We only get here if the type could not be determined statically
    // (the static case is inlined by the compiler), or if someone is
    // using a pointer to len() (e.g. as a callback).
    Integer listPointer = iterableArg __as__ Integer;
    Integer dataPointer = __readFromAddress(listPointer + _listBlockData);
    return __readFromAddress(dataPointer + _gcBlockHeaderLength);
  }
  Iterable# iterable = iterableArg __as__ Iterable#;
  return iterable.len();
}

// returns value at cursor of iterator
// it is a fatal error to call current when the cursor
// points before the beginning or after the end of the iterable
// (i.e. if next() has not been called or has returned false)
Whatever current(WhateverIterator iteratorArg) intrinsic# {
  Iterator# iterator = iteratorArg __as__ Iterator#;
  return iterator.current();
}

// advances cursor of iterator by one
// return true if cursor is before end of iterable; current returns value at cursor
// return false if cursor is after end of iterable
Boolean next(WhateverIterator iteratorArg) intrinsic# {
  Iterator# iterator = iteratorArg __as__ Iterator#;
  return iterator.next();
}

WhateverList copy(WhateverIterable iterable) {
  Integer length;
  if (iterable is WhateverArray) {
    length = len(iterable as WhateverArray);
    if (length == 0) {
      length = 1;
    }
  } else {
    length = 1;
  }
  WhateverList list = listConstructor#(__listTypeFrom __typeOf iterable, length);
  for (value in iterable) {
    append(list, value);
  }
  return list;
}

// TODO: make this compatible with arrays
// listCast# currently cannot propertly handle "FooArray as BarArray"
// we want to make sure you can't do "FooArray as FooList".
WhateverList listCast#(Anything list, Integer type) intrinsic# {
  if (!list is WhateverList) {
    throw('cannot cast a non-list to a list type');
  }
  for (value in list as WhateverList) {
    if (!(value __dynamic_is__ __elementTypeFrom type)) {
      throw('type error in list cast');
    }
  }
  return (list __dynamic_as__ type) as WhateverList;
}

//#ignore_unused
WhateverList filledList(Integer length, Whatever value) {
  if (length < 0) {
    throw('filledList expects non-negative length');
  }
  Integer size = length;
  if (size == 0) {
    size = 1;
  }
  AnythingList result = listConstructor#(__typeCodeOf AnythingList, size);
  _gcLocked += 1;
  Integer listPointer = result __as__ Integer;
  Integer dataAddress = __readFromAddress(listPointer + _gcBlockData + 16 + 8);
  __writeToAddress(dataAddress + _gcBlockHeaderLength, length);
  Integer index = 0;
  while (index < length) {
    __writeToAddress(dataAddress + _gcBlockData + index * 16, __typeOf value);
    __writeToAddress(dataAddress + _gcBlockData + index * 16 + 8, value __as__ Integer);
    index += 1;
  }
  if (value is String && length > 0) {
    Integer refcount = __readFromAddress(value __as__ Integer + _gcBlockHeaderRefCount);
    if (refcount >= 0) {
      __writeToAddress(value __as__ Integer + _gcBlockHeaderRefCount, refcount + length);
    }
  }
  _gcLocked -= 1;
  return result;
}

WhateverArray copyVarargs#(Integer baseAddress, Integer length) intrinsic# {
  WhateverArray result = listConstructor#(__typeCodeOf WhateverList, length);
  __writeToAddress(__readFromAddress(result __as__ Integer + _listBlockData) + _gcBlockHeaderLength, length);
  _moveBytes(baseAddress, __readFromAddress(result __as__ Integer + _listBlockData) + _gcBlockData, length * 16);
  return result;
}