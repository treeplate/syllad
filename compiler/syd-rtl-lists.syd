// RUNTIME LIBRARY - SEQUENCE TYPES

import 'syd-rtl-memory.syd';

// LISTS

// Lists are represented as pointers to an intermediary block that itself contains a pointer to
// the data. Both are GarbageCollectable blocks as described above.
//
// The list intermediary has length two.
// The first value is size (type Integer), the number of allocated entries in the list data.
// This may be bigger than the length, to allow cheaper appends.
// The second value is a pointer to the data block (type __ListData).
//
// The list data just has the values.

WhateverList listConstructor#(Integer typeCode, Integer initialSize) intrinsic# {
  assert(initialSize > 0, 'listConstructor needs initialSize to be greater than 0');
  _gcLocked += 1;
  WhateverList list = _constructor(typeCode, 2, 2) as WhateverList;
  __ListData data = _constructor(__typeCodeOf __ListData, 0, initialSize) as __ListData;
  __writeToAddress(list __as__ Integer + _gcBlockData + 0, __typeOf initialSize);
  __writeToAddress(list __as__ Integer + _gcBlockData + 8, initialSize);
  __writeToAddress(list __as__ Integer + _gcBlockData + 16, __typeOf data);
  __writeToAddress(list __as__ Integer + _gcBlockData + 24, data __as__ Integer);
  _gcLocked -= 1;
  return list;
}

Null _growList(WhateverList list) {
  assert(len(list) > 0, '_growList got empty list');
  _gcLocked += 1;
  Integer newSize = len(list) * 2;
  __ListData newData = _constructor(__typeCodeOf __ListData, len(list), newSize) as __ListData;
  __ListData oldData = __readFromAddress(list __as__ Integer + _gcBlockData + 16 + 8) __as__ __ListData;
  _moveBytes(oldData __as__ Integer + _gcBlockData, newData __as__ Integer + _gcBlockData, len(list) * 16);
  __writeToAddress(list __as__ Integer + _gcBlockData + 8, newSize);
  __writeToAddress(list __as__ Integer + _gcBlockData + 16 + 8, newData __as__ Integer);
  _gcLocked -= 1;
}

Null append(WhateverList list, Anything element) intrinsic# {
  if (!(element __dynamic_is__ __elementTypeFrom __typeOf list)) {
    throw('type error in append');
  }
  _gcLocked += 1;
  Integer intermediaryAddress = list __as__ Integer;
  Integer size = __readFromAddress(intermediaryAddress + _gcBlockData + 0 + 8);
  assert(size > 0, '0 size list should not be possible');
  Integer dataAddress = __readFromAddress(intermediaryAddress + _gcBlockData + 16 + 8);
  Integer length = len(list);
  if (length == size) {
    _growList(list);
    dataAddress = __readFromAddress(intermediaryAddress + _gcBlockData + 16 + 8);
  }
  __writeToAddress(dataAddress + _gcBlockData + length * 16, __typeOf element);
  __writeToAddress(dataAddress + _gcBlockData + length * 16 + 8, element __as__ Integer);
  __writeToAddress(dataAddress + _gcBlockHeaderLength, length + 1);
  if (element is String) {
    Integer refcount = __readFromAddress(element __as__ Integer + _gcBlockHeaderRefCount);
    if (refcount >= 0) {
      __writeToAddress(element __as__ Integer + _gcBlockHeaderRefCount, refcount + 1);
    }
  }
  _gcLocked -= 1;
}

Anything pop(WhateverList list) {
  Integer lastIndex = len(list) - 1;
  if (lastIndex < 0) {
    throw('cannot pop from empty list');
  }
  Anything result = list[lastIndex];
  Integer intermediaryAddress = list __as__ Integer;
  Integer dataAddress = __readFromAddress(intermediaryAddress + _gcBlockData + 16 + 8);
  __writeToAddress(dataAddress + _gcBlockHeaderLength, lastIndex);
  return result;
}


// ITERABLES AND ITERATORS

// Iterators are blocks with the following values:
//  1: pointer to iterable
//  2: cursor (semantics vary based on the iterable)

// Iterables are currently just lists. This will have to change when we implement scalarValues.

// returns value at cursor of iterator
// it is a fatal error to call current when the cursor
// points before the beginning or after the end of the iterable
// (i.e. if next() has not been called or has returned false)
Whatever current(WhateverIterator iteratorArg) intrinsic# {
  WhateverArray list = (__readFromAddress(iteratorArg __as__ Integer + _gcBlockData + 8) __dynamic_as__ __readFromAddress(iteratorArg __as__ Integer + _gcBlockData + 0)) as WhateverArray;
  Integer index = (__readFromAddress(iteratorArg __as__ Integer + _gcBlockData + 24) __dynamic_as__ __readFromAddress(iteratorArg __as__ Integer + _gcBlockData + 16)) as Integer;
  return list[index];
}

// advances cursor of iterator by one
// return true if cursor is before end of iterable; current returns value at cursor
// return false if cursor is after end of iterable
Boolean next(WhateverIterator iteratorArg) intrinsic# {
  WhateverArray list = (__readFromAddress(iteratorArg __as__ Integer + _gcBlockData + 8) __dynamic_as__ __readFromAddress(iteratorArg __as__ Integer + _gcBlockData + 0)) as WhateverArray;
  Integer index = (__readFromAddress(iteratorArg __as__ Integer + _gcBlockData + 24) __dynamic_as__ __readFromAddress(iteratorArg __as__ Integer + _gcBlockData + 16)) as Integer;
  index += 1;
  __writeToAddress(iteratorArg __as__ Integer + _gcBlockData + 24, index);
  return index < len(list);
}

// creates an iterator for the iterable
WhateverIterator iterator(WhateverIterable iterable) intrinsic# {
  assert(iterable is WhateverArray, 'iterables are only implemented for lists');
  _gcLocked += 1;
  WhateverIterator result = _constructor(__iteratorTypeFrom __typeOf iterable, 2, 2) as WhateverIterator;
  __writeToAddress(result __as__ Integer + _gcBlockData + 0, __typeOf iterable);
  __writeToAddress(result __as__ Integer + _gcBlockData + 8, iterable __as__ Integer);
  __writeToAddress(result __as__ Integer + _gcBlockData + 16, __typeCodeOf Integer);
  __writeToAddress(result __as__ Integer + _gcBlockData + 24, -1);
  _gcLocked -= 1;
  return result;
}

WhateverList copy(WhateverIterable iterable) {
  Integer length;
  if (iterable is WhateverArray) {
    length = len(iterable as WhateverArray);
    if (length == 0) {
      length = 1;
    }
  } else {
    length = 1;
  }
  WhateverList list = listConstructor#(__listTypeFrom __typeOf iterable, length);
  for (value in iterable) {
    append(list, value);
  }
  return list;
}

// TODO: make this compatible with arrays
// listCast# currently cannot propertly handle "FooArray as BarArray"
// we want to make sure you can't do "FooArray as FooList".
WhateverList listCast#(Anything list, Integer type) intrinsic# {
  if (!list is WhateverList) {
    throw('cannot cast a non-list to a list type');
  }
  for (value in list as WhateverList) {
    if (!(value __dynamic_is__ __elementTypeFrom type)) {
      throw('type error in list cast');
    }
  }
  return (list __dynamic_as__ type) as WhateverList;
}

//#ignore_unused
WhateverList filledList(Integer length, Whatever value) {
  if (length < 0) {
    throw('filledList expects non-negative length');
  }
  Integer size = length;
  if (size == 0) {
    size = 1;
  }
  AnythingList result = listConstructor#(__typeCodeOf AnythingList, size);
  _gcLocked += 1;
  Integer listPointer = result __as__ Integer;
  Integer dataAddress = __readFromAddress(listPointer + _gcBlockData + 16 + 8);
  __writeToAddress(dataAddress + _gcBlockHeaderLength, length);
  Integer index = 0;
  while (index < length) {
    __writeToAddress(dataAddress + _gcBlockData + index * 16, __typeOf value);
    __writeToAddress(dataAddress + _gcBlockData + index * 16 + 8, value __as__ Integer);
    index += 1;
  }
  if (value is String && length > 0) {
    Integer refcount = __readFromAddress(value __as__ Integer + _gcBlockHeaderRefCount);
    if (refcount >= 0) {
      __writeToAddress(value __as__ Integer + _gcBlockHeaderRefCount, refcount + length);
    }
  }
  _gcLocked -= 1;
  return result;
}

WhateverArray copyVarargs#(Integer baseAddress, Integer length) intrinsic# {
  WhateverArray result = listConstructor#(__typeCodeOf WhateverList, length);
  __writeToAddress(__readFromAddress(result __as__ Integer + _listBlockData) + _gcBlockHeaderLength, length);
  _moveBytes(baseAddress, __readFromAddress(result __as__ Integer + _listBlockData) + _gcBlockData, length * 16);
  return result;
}