// Data structures:
//
// GarbageCollectables:
//   8 bytes reference count
//   8 bytes number of fields
//   8 bytes scratch space for garbage collector
//   8 bytes pointer into block list (relative to block start)
//   fields, 16 bytes each:
//      8 bytes type
//      8 bytes value
//   
// Strings (first 16 bytes intentionally match GarbageCollectables):
//   8 bytes reference count
//   8 bytes number of bytes
//   String data (right-padded to 8 byte boundary with 0x00)
//
// Function pointers (kind of GarbageCollectable):
//   GarbageCollectable header
//   8 bytes type of object (this pointer type)
//   8 bytes pointer to object (this pointer value)
//   8 bytes either internal closure type or sentinel type
//   8 bytes pointer to closure
//   8 bytes internal code address type
//   8 bytes pointer to code (with annotation at -8 bytes) as an Integer
//
// Reified Enum Table
//   8 bytes pointer to name
//   8 bytes number of enum values
//   8 bytes type of enum values (absent if length is 0)
//   values, 16 bytes each:
//      8 bytes atom identifier
//      8 bytes enum value (pointer to enum value name)

//#ignore_unused
const Integer _blockEntrySize = 8; // stride size in block entry list

const Integer _gcBlockHeaderRefCount = 0 * 8;
const Integer _gcBlockHeaderLength = 1 * 8;
//#ignore_unused
const Integer _gcBlockStringData = 2 * 8;
//#ignore_unused
const Integer _gcBlockHeaderScratchSpace = 2 * 8; // for completeness
//#ignore_unused
const Integer _gcBlockHeaderEntryPointer = 3 * 8; // for completeness
const Integer _gcBlockData = 4 * 8;
//#ignore_unused
const Integer _listBlockSize = _gcBlockData + 0 * 16 + 8; // for completeness
const Integer _listBlockData = _gcBlockData + 1 * 16 + 8;

const Integer _subroutineReceiverType = _gcBlockData + 0 * 16;
const Integer _subroutineReceiverPointer = _gcBlockData + 0 * 16 + 8;
//#ignore_unused
const Integer _subroutineClosureType = _gcBlockData + 1 * 16; // either sentinel or internal closure type
const Integer _subroutineClosurePointer = _gcBlockData + 1 * 16 + 8;
const Integer _subroutineCodeType = _gcBlockData + 2 * 16; // for completeness, always code address type
const Integer _subroutineCodePointer = _gcBlockData + 2 * 16 + 8;

//#ignore_unused
const Integer _vmtTypeCode = 0x00;
//#ignore_unused
const Integer _vmtFieldCount = 0x08;
//#ignore_unused
const Integer _vmtClassName = 0x10;
//#ignore_unused
const Integer _vmtParent = 0x18;
//#ignore_unused
const Integer _vmtDynamicDispatchTable = 0x20;
//#ignore_unused
const Integer _vmtMethods = 0x28;

const Integer _vmtHeaderFieldCount = 5; // number of 64 bit header fields before the actual virtual method table

const Integer _fieldVmt = _gcBlockData + 0x00;
//#ignore_unused
const Integer _fieldClassName = _gcBlockData + 0x10;
//#ignore_unused
const Integer _fieldsRemainder = _gcBlockData + 0x20;

//#ignore_unused
const Integer _enumTableNameOffset = 0x00;
//#ignore_unused
const Integer _enumTableLengthOffset = 0x08;
//#ignore_unused
const Integer _enumTableEntryTypeOffset = 0x10; // only present if length is non-zero
//#ignore_unused
const Integer _enumTableFirstEntryOffset = 0x18; // length (atom code, string pointer) pairs

//#ignore_unused
const Integer _allBits = -1; // 0xFFFFFFFFFFFFFFFF