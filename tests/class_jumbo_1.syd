// expected output: FIELD: FIELD
// expected output: METHOD: METHOD
// expected output: CLASSNAME: Test
// expected output: FIELD: FIELD
// expected output: METHOD: METHOD
// expected output: CLASSNAME: Test
// expected output: FIELD (should now be CARROT): CARROT
// expected output: FIELD (should be PEA): PEA
// expected output: as Whatever:
// expected output: METHOD caller: METHOD
// expected output: FIELD: PEA
// expected output: ONE: 1
// expected output: SIX: 6

Boolean assertsEnabled = false;
Boolean test() { assertsEnabled = true; return true; }
assert(test(), 'control');
if (!assertsEnabled) {
  println('FAIL: asserts not enabled');
  exit(1);
}

class Object {
  Null constructor() {}
}

class Test extends Object {
  String field = 'FIELD';
  String method() {
    return "METHOD";
  }

  Null mutateField(String newValue) {
    field = newValue;
  }
}

class Subclass extends Test {
  Null constructor(String initialValue) {
    field = initialValue;
  }
}

println('FIELD:', Test().field);
println('METHOD:', Test().method());
println('CLASSNAME:', Test().className);

Test obj = Test();
println('FIELD:', obj.field);
println('METHOD:', obj.method());
println('CLASSNAME:', obj.className);

obj.mutateField('CARROT');
println('FIELD (should now be CARROT):', obj.field);

Subclass subclass = Subclass('PEA');
println('FIELD (should be PEA):', subclass.field);

println('as Whatever:');
println('METHOD caller:', ((subclass as Whatever).method as Whatever)());
println('FIELD:', (subclass as Whatever).field);


// method references

String result = 'FAIL';

class BunnyA {
  Null test() {
    result = 'BunnyA::test';
  }
}

class BunnyB extends BunnyA {
  NullFunction grab() {
    return test;
  }

  //#override
  Null test() {
    result = 'BunnyB::test';
  }
}

BunnyB().grab()();
assert(result == 'BunnyB::test', concat('failure (Bunnies) - ', result));


// Ambiguous members

result = '';

class CarrotRoot {
  Null foo() {
    result = concat(result, 'a');
  }
}

class CarrotBranchA extends CarrotRoot {
  Null bar() {
    result = concat(result, 'b');
  }
}

class CarrotLeafA extends CarrotBranchA {
  NullFunction bar;

  Null barImpl() {
    result = concat(result, 'c');
  }

  Null constructor() {
    bar = barImpl;
  }
}

class CarrotBranchB extends CarrotRoot {
  NullFunction foo;

  Null fooImpl() {
    result = concat(result, 'd');
  }

  Null bar() {
    result = concat(result, 'e');
  }

  Null constructor() {
    foo = fooImpl;
  }
}

assert(result == '', 'failure (??? strings in general?)');

result = '';
CarrotBranchB x = CarrotBranchB();
x.foo();
x.bar();
assert(result == 'de', 'failure (CarrotBranchB)');

result = '';
CarrotBranchA y = CarrotLeafA();
y.foo();
y.bar();
assert(result == 'ac', 'failure (CarrotLeafA)');

class A {
  Integer foo() { return 1; }
}

class B extends A {
  Whatever foo = super.foo;

  Null setFoo(IntegerFunction v) {
    foo = v;
  }
}

Integer six() { return 6; }

B b = B();
println('ONE:', b.foo());
b.setFoo(six);
println('SIX:', b.foo());